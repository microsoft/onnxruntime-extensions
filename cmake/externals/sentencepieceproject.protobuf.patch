diff --git a/CMakeLists.txt b/CMakeLists.txt
index a3870cb..159cd84 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -63,7 +63,7 @@ if (MSVC)
   string(REPLACE "/MD" "/MT" CMAKE_CXX_FLAGS_MINSIZEREL     ${CMAKE_CXX_FLAGS_MINSIZEREL})
   string(REPLACE "/MD" "/MT" CMAKE_CXX_FLAGS_RELEASE        ${CMAKE_CXX_FLAGS_RELEASE})
   string(REPLACE "/MD" "/MT" CMAKE_CXX_FLAGS_RELWITHDEBINFO ${CMAKE_CXX_FLAGS_RELWITHDEBINFO})
-  add_definitions("/wd4267 /wd4244 /wd4305 /Zc:strictStrings /utf-8")
+  add_definitions("/wd4305 /Zc:strictStrings /utf-8")
 endif()
 
 if (APPLE)
@@ -108,7 +108,7 @@ if (SPM_USE_EXTERNAL_ABSL)
 endif()
 
 add_subdirectory(src)
-add_subdirectory(third_party)
+# add_subdirectory(third_party)
 
 set(CPACK_SOURCE_GENERATOR "TXZ")
 set(CPACK_GENERATOR "7Z")
diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index 8b7fb76..820e622 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -62,19 +62,31 @@ if (SPM_USE_BUILTIN_PROTOBUF)
     ${CMAKE_CURRENT_SOURCE_DIR}/../third_party/protobuf-lite/zero_copy_stream_impl.cc
     ${CMAKE_CURRENT_SOURCE_DIR}/../third_party/protobuf-lite/zero_copy_stream_impl_lite.cc)
   if (MSVC)
-    add_definitions("/DHAVE_PTHREAD /wd4018 /wd4514")
+    add_definitions("/DHAVE_PTHREAD /wd4514")
   else()
     add_definitions("-pthread -DHAVE_PTHREAD=1 -Wno-sign-compare")
   endif()
   include_directories(${CMAKE_CURRENT_SOURCE_DIR}/../third_party/protobuf-lite)
   include_directories(builtin_pb)
 else()
-  find_package(Protobuf REQUIRED)
+  include_directories(${protobuf_SOURCE_DIR}/src)
+  if(EXISTS "${ONNX_CUSTOM_PROTOC_EXECUTABLE}")
+    set(PROTOC_EXECUTABLE ${ONNX_CUSTOM_PROTOC_EXECUTABLE})
+  else()
+    set(PROTOC_EXECUTABLE ${protobuf_BINARY_DIR}/${CMAKE_BUILD_TYPE}/protoc)
+  endif()
+  message(STATUS "Using protobuf compiler ${PROTOC_EXECUTABLE}")
+  execute_process(COMMAND ${PROTOC_EXECUTABLE} --cpp_out=${CMAKE_CURRENT_SOURCE_DIR}/builtin_pb --proto_path=${CMAKE_CURRENT_SOURCE_DIR} sentencepiece_model.proto)
+  execute_process(COMMAND ${PROTOC_EXECUTABLE} --cpp_out=${CMAKE_CURRENT_SOURCE_DIR}/builtin_pb --proto_path=${CMAKE_CURRENT_SOURCE_DIR} sentencepiece.proto)
   include_directories(${Protobuf_INCLUDE_DIRS})
-  protobuf_generate_cpp(SPM_PROTO_SRCS SPM_PROTO_HDRS sentencepiece.proto)
-  protobuf_generate_cpp(SPM_MODEL_PROTO_SRCS SPM_MODEL_PROTO_HDRS sentencepiece_model.proto)
   set(PROTOBUF_LITE_SRCS "")
+  set(PROTOBUF_LITE_LIBRARY "")
   include_directories(${PROTOBUF_INCLUDE_DIR})
+  include_directories(builtin_pb)
+  set(SPM_PROTO_HDRS builtin_pb/sentencepiece.pb.h)
+  set(SPM_PROTO_SRCS builtin_pb/sentencepiece.pb.cc)
+  set(SPM_MODEL_PROTO_HDRS builtin_pb/sentencepiece_model.pb.h)
+  set(SPM_MODEL_PROTO_SRCS builtin_pb/sentencepiece_model.pb.cc)
 endif()
 
 include_directories(${CMAKE_CURRENT_BINARY_DIR})
diff --git a/src/builtin_pb/sentencepiece.pb.cc b/src/builtin_pb/sentencepiece.pb.cc
index 7bc5494..b3ade70 100644
--- a/src/builtin_pb/sentencepiece.pb.cc
+++ b/src/builtin_pb/sentencepiece.pb.cc
@@ -11,63 +11,52 @@
 #include <google/protobuf/io/zero_copy_stream_impl_lite.h>
 // @@protoc_insertion_point(includes)
 #include <google/protobuf/port_def.inc>
-extern PROTOBUF_INTERNAL_EXPORT_sentencepiece_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SentencePieceText_sentencepiece_2eproto;
-extern PROTOBUF_INTERNAL_EXPORT_sentencepiece_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SentencePieceText_SentencePiece_sentencepiece_2eproto;
+
+PROTOBUF_PRAGMA_INIT_SEG
 namespace sentencepiece {
-class SentencePieceText_SentencePieceDefaultTypeInternal {
- public:
-  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SentencePieceText_SentencePiece> _instance;
-} _SentencePieceText_SentencePiece_default_instance_;
-class SentencePieceTextDefaultTypeInternal {
- public:
-  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SentencePieceText> _instance;
-} _SentencePieceText_default_instance_;
-class NBestSentencePieceTextDefaultTypeInternal {
- public:
-  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NBestSentencePieceText> _instance;
-} _NBestSentencePieceText_default_instance_;
+constexpr SentencePieceText_SentencePiece::SentencePieceText_SentencePiece(
+  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
+  : piece_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
+  , surface_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
+  , id_(0u)
+  , begin_(0u)
+  , end_(0u){}
+struct SentencePieceText_SentencePieceDefaultTypeInternal {
+  constexpr SentencePieceText_SentencePieceDefaultTypeInternal()
+    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
+  ~SentencePieceText_SentencePieceDefaultTypeInternal() {}
+  union {
+    SentencePieceText_SentencePiece _instance;
+  };
+};
+PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SentencePieceText_SentencePieceDefaultTypeInternal _SentencePieceText_SentencePiece_default_instance_;
+constexpr SentencePieceText::SentencePieceText(
+  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
+  : pieces_()
+  , text_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
+  , score_(0){}
+struct SentencePieceTextDefaultTypeInternal {
+  constexpr SentencePieceTextDefaultTypeInternal()
+    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
+  ~SentencePieceTextDefaultTypeInternal() {}
+  union {
+    SentencePieceText _instance;
+  };
+};
+PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SentencePieceTextDefaultTypeInternal _SentencePieceText_default_instance_;
+constexpr NBestSentencePieceText::NBestSentencePieceText(
+  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
+  : nbests_(){}
+struct NBestSentencePieceTextDefaultTypeInternal {
+  constexpr NBestSentencePieceTextDefaultTypeInternal()
+    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
+  ~NBestSentencePieceTextDefaultTypeInternal() {}
+  union {
+    NBestSentencePieceText _instance;
+  };
+};
+PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NBestSentencePieceTextDefaultTypeInternal _NBestSentencePieceText_default_instance_;
 }  // namespace sentencepiece
-static void InitDefaultsscc_info_NBestSentencePieceText_sentencepiece_2eproto() {
-  GOOGLE_PROTOBUF_VERIFY_VERSION;
-
-  {
-    void* ptr = &::sentencepiece::_NBestSentencePieceText_default_instance_;
-    new (ptr) ::sentencepiece::NBestSentencePieceText();
-    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
-  }
-}
-
-::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NBestSentencePieceText_sentencepiece_2eproto =
-    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_NBestSentencePieceText_sentencepiece_2eproto}, {
-      &scc_info_SentencePieceText_sentencepiece_2eproto.base,}};
-
-static void InitDefaultsscc_info_SentencePieceText_sentencepiece_2eproto() {
-  GOOGLE_PROTOBUF_VERIFY_VERSION;
-
-  {
-    void* ptr = &::sentencepiece::_SentencePieceText_default_instance_;
-    new (ptr) ::sentencepiece::SentencePieceText();
-    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
-  }
-}
-
-::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SentencePieceText_sentencepiece_2eproto =
-    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SentencePieceText_sentencepiece_2eproto}, {
-      &scc_info_SentencePieceText_SentencePiece_sentencepiece_2eproto.base,}};
-
-static void InitDefaultsscc_info_SentencePieceText_SentencePiece_sentencepiece_2eproto() {
-  GOOGLE_PROTOBUF_VERIFY_VERSION;
-
-  {
-    void* ptr = &::sentencepiece::_SentencePieceText_SentencePiece_default_instance_;
-    new (ptr) ::sentencepiece::SentencePieceText_SentencePiece();
-    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
-  }
-}
-
-::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SentencePieceText_SentencePiece_sentencepiece_2eproto =
-    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SentencePieceText_SentencePiece_sentencepiece_2eproto}, {}};
-
 namespace sentencepiece {
 
 // ===================================================================
@@ -92,11 +81,14 @@ class SentencePieceText_SentencePiece::_Internal {
   }
 };
 
-SentencePieceText_SentencePiece::SentencePieceText_SentencePiece(::PROTOBUF_NAMESPACE_ID::Arena* arena)
-  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
+SentencePieceText_SentencePiece::SentencePieceText_SentencePiece(::PROTOBUF_NAMESPACE_ID::Arena* arena,
+                         bool is_message_owned)
+  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
   _extensions_(arena) {
   SharedCtor();
-  RegisterArenaDtor(arena);
+  if (!is_message_owned) {
+    RegisterArenaDtor(arena);
+  }
   // @@protoc_insertion_point(arena_constructor:sentencepiece.SentencePieceText.SentencePiece)
 }
 SentencePieceText_SentencePiece::SentencePieceText_SentencePiece(const SentencePieceText_SentencePiece& from)
@@ -107,12 +99,12 @@ SentencePieceText_SentencePiece::SentencePieceText_SentencePiece(const SentenceP
   piece_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
   if (from._internal_has_piece()) {
     piece_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_piece(), 
-      GetArena());
+      GetArenaForAllocation());
   }
   surface_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
   if (from._internal_has_surface()) {
     surface_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_surface(), 
-      GetArena());
+      GetArenaForAllocation());
   }
   ::memcpy(&id_, &from.id_,
     static_cast<size_t>(reinterpret_cast<char*>(&end_) -
@@ -121,23 +113,23 @@ SentencePieceText_SentencePiece::SentencePieceText_SentencePiece(const SentenceP
 }
 
 void SentencePieceText_SentencePiece::SharedCtor() {
-  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SentencePieceText_SentencePiece_sentencepiece_2eproto.base);
-  piece_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
-  surface_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
-  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
-      reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
-      0, static_cast<size_t>(reinterpret_cast<char*>(&end_) -
-      reinterpret_cast<char*>(&id_)) + sizeof(end_));
+piece_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
+surface_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
+::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
+    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
+    0, static_cast<size_t>(reinterpret_cast<char*>(&end_) -
+    reinterpret_cast<char*>(&id_)) + sizeof(end_));
 }
 
 SentencePieceText_SentencePiece::~SentencePieceText_SentencePiece() {
   // @@protoc_insertion_point(destructor:sentencepiece.SentencePieceText.SentencePiece)
+  if (GetArenaForAllocation() != nullptr) return;
   SharedDtor();
   _internal_metadata_.Delete<std::string>();
 }
 
-void SentencePieceText_SentencePiece::SharedDtor() {
-  GOOGLE_DCHECK(GetArena() == nullptr);
+inline void SentencePieceText_SentencePiece::SharedDtor() {
+  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
   piece_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
   surface_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
 }
@@ -151,11 +143,6 @@ void SentencePieceText_SentencePiece::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID:
 void SentencePieceText_SentencePiece::SetCachedSize(int size) const {
   _cached_size_.Set(size);
 }
-const SentencePieceText_SentencePiece& SentencePieceText_SentencePiece::default_instance() {
-  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SentencePieceText_SentencePiece_sentencepiece_2eproto.base);
-  return *internal_default_instance();
-}
-
 
 void SentencePieceText_SentencePiece::Clear() {
 // @@protoc_insertion_point(message_clear_start:sentencepiece.SentencePieceText.SentencePiece)
@@ -188,7 +175,6 @@ const char* SentencePieceText_SentencePiece::_InternalParse(const char* ptr, ::P
   while (!ctx->Done(&ptr)) {
     ::PROTOBUF_NAMESPACE_ID::uint32 tag;
     ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
-    CHK_(ptr);
     switch (tag >> 3) {
       // optional string piece = 1;
       case 1:
@@ -196,7 +182,8 @@ const char* SentencePieceText_SentencePiece::_InternalParse(const char* ptr, ::P
           auto str = _internal_mutable_piece();
           ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
           CHK_(ptr);
-        } else goto handle_unusual;
+        } else
+          goto handle_unusual;
         continue;
       // optional uint32 id = 2;
       case 2:
@@ -204,7 +191,8 @@ const char* SentencePieceText_SentencePiece::_InternalParse(const char* ptr, ::P
           _Internal::set_has_id(&has_bits);
           id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
           CHK_(ptr);
-        } else goto handle_unusual;
+        } else
+          goto handle_unusual;
         continue;
       // optional string surface = 3;
       case 3:
@@ -212,7 +200,8 @@ const char* SentencePieceText_SentencePiece::_InternalParse(const char* ptr, ::P
           auto str = _internal_mutable_surface();
           ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
           CHK_(ptr);
-        } else goto handle_unusual;
+        } else
+          goto handle_unusual;
         continue;
       // optional uint32 begin = 4;
       case 4:
@@ -220,7 +209,8 @@ const char* SentencePieceText_SentencePiece::_InternalParse(const char* ptr, ::P
           _Internal::set_has_begin(&has_bits);
           begin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
           CHK_(ptr);
-        } else goto handle_unusual;
+        } else
+          goto handle_unusual;
         continue;
       // optional uint32 end = 5;
       case 5:
@@ -228,34 +218,35 @@ const char* SentencePieceText_SentencePiece::_InternalParse(const char* ptr, ::P
           _Internal::set_has_end(&has_bits);
           end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
           CHK_(ptr);
-        } else goto handle_unusual;
-        continue;
-      default: {
-      handle_unusual:
-        if ((tag & 7) == 4 || tag == 0) {
-          ctx->SetLastTag(tag);
-          goto success;
-        }
-      if ((1600u <= tag)) {
-        ptr = _extensions_.ParseField(tag, ptr,
-            internal_default_instance(), &_internal_metadata_, ctx);
-        CHK_(ptr != nullptr);
-        continue;
-      }
-        ptr = UnknownFieldParse(tag,
-            _internal_metadata_.mutable_unknown_fields<std::string>(),
-            ptr, ctx);
-        CHK_(ptr != nullptr);
+        } else
+          goto handle_unusual;
         continue;
-      }
+      default:
+        goto handle_unusual;
     }  // switch
+  handle_unusual:
+    if ((tag == 0) || ((tag & 7) == 4)) {
+      CHK_(ptr);
+      ctx->SetLastTag(tag);
+      goto message_done;
+    }
+    if ((1600u <= tag)) {
+      ptr = _extensions_.ParseField(tag, ptr, internal_default_instance(), &_internal_metadata_, ctx);
+      CHK_(ptr != nullptr);
+      continue;
+    }
+    ptr = UnknownFieldParse(
+        tag,
+        _internal_metadata_.mutable_unknown_fields<std::string>(),
+        ptr, ctx);
+    CHK_(ptr != nullptr);
   }  // while
-success:
+message_done:
   _has_bits_.Or(has_bits);
   return ptr;
 failure:
   ptr = nullptr;
-  goto success;
+  goto message_done;
 #undef CHK_
 }
 
@@ -298,7 +289,7 @@ failure:
 
   // Extension range [200, 536870912)
   target = _extensions_._InternalSerialize(
-      200, 536870912, target, stream);
+  internal_default_instance(), 200, 536870912, target, stream);
 
   if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
     target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
@@ -336,23 +327,17 @@ size_t SentencePieceText_SentencePiece::ByteSizeLong() const {
 
     // optional uint32 id = 2;
     if (cached_has_bits & 0x00000004u) {
-      total_size += 1 +
-        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
-          this->_internal_id());
+      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
     }
 
     // optional uint32 begin = 4;
     if (cached_has_bits & 0x00000008u) {
-      total_size += 1 +
-        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
-          this->_internal_begin());
+      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_begin());
     }
 
     // optional uint32 end = 5;
     if (cached_has_bits & 0x00000010u) {
-      total_size += 1 +
-        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
-          this->_internal_end());
+      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_end());
     }
 
   }
@@ -373,8 +358,6 @@ void SentencePieceText_SentencePiece::CheckTypeAndMergeFrom(
 void SentencePieceText_SentencePiece::MergeFrom(const SentencePieceText_SentencePiece& from) {
 // @@protoc_insertion_point(class_specific_merge_from_start:sentencepiece.SentencePieceText.SentencePiece)
   GOOGLE_DCHECK_NE(&from, this);
-  _extensions_.MergeFrom(from._extensions_);
-  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
   ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
   (void) cached_has_bits;
 
@@ -397,6 +380,8 @@ void SentencePieceText_SentencePiece::MergeFrom(const SentencePieceText_Sentence
     }
     _has_bits_[0] |= cached_has_bits;
   }
+  _extensions_.MergeFrom(from._extensions_);
+  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
 }
 
 void SentencePieceText_SentencePiece::CopyFrom(const SentencePieceText_SentencePiece& from) {
@@ -416,11 +401,21 @@ bool SentencePieceText_SentencePiece::IsInitialized() const {
 
 void SentencePieceText_SentencePiece::InternalSwap(SentencePieceText_SentencePiece* other) {
   using std::swap;
-  _extensions_.Swap(&other->_extensions_);
-  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
+  _extensions_.InternalSwap(&other->_extensions_);
+  auto* lhs_arena = GetArenaForAllocation();
+  auto* rhs_arena = other->GetArenaForAllocation();
+  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
   swap(_has_bits_[0], other->_has_bits_[0]);
-  piece_.Swap(&other->piece_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
-  surface_.Swap(&other->surface_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
+  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
+      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
+      &piece_, lhs_arena,
+      &other->piece_, rhs_arena
+  );
+  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
+      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
+      &surface_, lhs_arena,
+      &other->surface_, rhs_arena
+  );
   ::PROTOBUF_NAMESPACE_ID::internal::memswap<
       PROTOBUF_FIELD_OFFSET(SentencePieceText_SentencePiece, end_)
       + sizeof(SentencePieceText_SentencePiece::end_)
@@ -447,12 +442,15 @@ class SentencePieceText::_Internal {
   }
 };
 
-SentencePieceText::SentencePieceText(::PROTOBUF_NAMESPACE_ID::Arena* arena)
-  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
+SentencePieceText::SentencePieceText(::PROTOBUF_NAMESPACE_ID::Arena* arena,
+                         bool is_message_owned)
+  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
   _extensions_(arena),
   pieces_(arena) {
   SharedCtor();
-  RegisterArenaDtor(arena);
+  if (!is_message_owned) {
+    RegisterArenaDtor(arena);
+  }
   // @@protoc_insertion_point(arena_constructor:sentencepiece.SentencePieceText)
 }
 SentencePieceText::SentencePieceText(const SentencePieceText& from)
@@ -464,26 +462,26 @@ SentencePieceText::SentencePieceText(const SentencePieceText& from)
   text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
   if (from._internal_has_text()) {
     text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_text(), 
-      GetArena());
+      GetArenaForAllocation());
   }
   score_ = from.score_;
   // @@protoc_insertion_point(copy_constructor:sentencepiece.SentencePieceText)
 }
 
 void SentencePieceText::SharedCtor() {
-  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SentencePieceText_sentencepiece_2eproto.base);
-  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
-  score_ = 0;
+text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
+score_ = 0;
 }
 
 SentencePieceText::~SentencePieceText() {
   // @@protoc_insertion_point(destructor:sentencepiece.SentencePieceText)
+  if (GetArenaForAllocation() != nullptr) return;
   SharedDtor();
   _internal_metadata_.Delete<std::string>();
 }
 
-void SentencePieceText::SharedDtor() {
-  GOOGLE_DCHECK(GetArena() == nullptr);
+inline void SentencePieceText::SharedDtor() {
+  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
   text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
 }
 
@@ -496,11 +494,6 @@ void SentencePieceText::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
 void SentencePieceText::SetCachedSize(int size) const {
   _cached_size_.Set(size);
 }
-const SentencePieceText& SentencePieceText::default_instance() {
-  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SentencePieceText_sentencepiece_2eproto.base);
-  return *internal_default_instance();
-}
-
 
 void SentencePieceText::Clear() {
 // @@protoc_insertion_point(message_clear_start:sentencepiece.SentencePieceText)
@@ -525,7 +518,6 @@ const char* SentencePieceText::_InternalParse(const char* ptr, ::PROTOBUF_NAMESP
   while (!ctx->Done(&ptr)) {
     ::PROTOBUF_NAMESPACE_ID::uint32 tag;
     ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
-    CHK_(ptr);
     switch (tag >> 3) {
       // optional string text = 1;
       case 1:
@@ -533,7 +525,8 @@ const char* SentencePieceText::_InternalParse(const char* ptr, ::PROTOBUF_NAMESP
           auto str = _internal_mutable_text();
           ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
           CHK_(ptr);
-        } else goto handle_unusual;
+        } else
+          goto handle_unusual;
         continue;
       // repeated .sentencepiece.SentencePieceText.SentencePiece pieces = 2;
       case 2:
@@ -545,7 +538,8 @@ const char* SentencePieceText::_InternalParse(const char* ptr, ::PROTOBUF_NAMESP
             CHK_(ptr);
             if (!ctx->DataAvailable(ptr)) break;
           } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
-        } else goto handle_unusual;
+        } else
+          goto handle_unusual;
         continue;
       // optional float score = 3;
       case 3:
@@ -553,34 +547,35 @@ const char* SentencePieceText::_InternalParse(const char* ptr, ::PROTOBUF_NAMESP
           _Internal::set_has_score(&has_bits);
           score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
           ptr += sizeof(float);
-        } else goto handle_unusual;
-        continue;
-      default: {
-      handle_unusual:
-        if ((tag & 7) == 4 || tag == 0) {
-          ctx->SetLastTag(tag);
-          goto success;
-        }
-      if ((1600u <= tag)) {
-        ptr = _extensions_.ParseField(tag, ptr,
-            internal_default_instance(), &_internal_metadata_, ctx);
-        CHK_(ptr != nullptr);
+        } else
+          goto handle_unusual;
         continue;
-      }
-        ptr = UnknownFieldParse(tag,
-            _internal_metadata_.mutable_unknown_fields<std::string>(),
-            ptr, ctx);
-        CHK_(ptr != nullptr);
-        continue;
-      }
+      default:
+        goto handle_unusual;
     }  // switch
+  handle_unusual:
+    if ((tag == 0) || ((tag & 7) == 4)) {
+      CHK_(ptr);
+      ctx->SetLastTag(tag);
+      goto message_done;
+    }
+    if ((1600u <= tag)) {
+      ptr = _extensions_.ParseField(tag, ptr, internal_default_instance(), &_internal_metadata_, ctx);
+      CHK_(ptr != nullptr);
+      continue;
+    }
+    ptr = UnknownFieldParse(
+        tag,
+        _internal_metadata_.mutable_unknown_fields<std::string>(),
+        ptr, ctx);
+    CHK_(ptr != nullptr);
   }  // while
-success:
+message_done:
   _has_bits_.Or(has_bits);
   return ptr;
 failure:
   ptr = nullptr;
-  goto success;
+  goto message_done;
 #undef CHK_
 }
 
@@ -613,7 +608,7 @@ failure:
 
   // Extension range [200, 536870912)
   target = _extensions_._InternalSerialize(
-      200, 536870912, target, stream);
+  internal_default_instance(), 200, 536870912, target, stream);
 
   if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
     target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
@@ -672,8 +667,6 @@ void SentencePieceText::CheckTypeAndMergeFrom(
 void SentencePieceText::MergeFrom(const SentencePieceText& from) {
 // @@protoc_insertion_point(class_specific_merge_from_start:sentencepiece.SentencePieceText)
   GOOGLE_DCHECK_NE(&from, this);
-  _extensions_.MergeFrom(from._extensions_);
-  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
   ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
   (void) cached_has_bits;
 
@@ -688,6 +681,8 @@ void SentencePieceText::MergeFrom(const SentencePieceText& from) {
     }
     _has_bits_[0] |= cached_has_bits;
   }
+  _extensions_.MergeFrom(from._extensions_);
+  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
 }
 
 void SentencePieceText::CopyFrom(const SentencePieceText& from) {
@@ -708,11 +703,17 @@ bool SentencePieceText::IsInitialized() const {
 
 void SentencePieceText::InternalSwap(SentencePieceText* other) {
   using std::swap;
-  _extensions_.Swap(&other->_extensions_);
-  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
+  _extensions_.InternalSwap(&other->_extensions_);
+  auto* lhs_arena = GetArenaForAllocation();
+  auto* rhs_arena = other->GetArenaForAllocation();
+  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
   swap(_has_bits_[0], other->_has_bits_[0]);
   pieces_.InternalSwap(&other->pieces_);
-  text_.Swap(&other->text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
+  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
+      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
+      &text_, lhs_arena,
+      &other->text_, rhs_arena
+  );
   swap(score_, other->score_);
 }
 
@@ -727,11 +728,14 @@ class NBestSentencePieceText::_Internal {
  public:
 };
 
-NBestSentencePieceText::NBestSentencePieceText(::PROTOBUF_NAMESPACE_ID::Arena* arena)
-  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
+NBestSentencePieceText::NBestSentencePieceText(::PROTOBUF_NAMESPACE_ID::Arena* arena,
+                         bool is_message_owned)
+  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
   nbests_(arena) {
   SharedCtor();
-  RegisterArenaDtor(arena);
+  if (!is_message_owned) {
+    RegisterArenaDtor(arena);
+  }
   // @@protoc_insertion_point(arena_constructor:sentencepiece.NBestSentencePieceText)
 }
 NBestSentencePieceText::NBestSentencePieceText(const NBestSentencePieceText& from)
@@ -742,17 +746,17 @@ NBestSentencePieceText::NBestSentencePieceText(const NBestSentencePieceText& fro
 }
 
 void NBestSentencePieceText::SharedCtor() {
-  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NBestSentencePieceText_sentencepiece_2eproto.base);
 }
 
 NBestSentencePieceText::~NBestSentencePieceText() {
   // @@protoc_insertion_point(destructor:sentencepiece.NBestSentencePieceText)
+  if (GetArenaForAllocation() != nullptr) return;
   SharedDtor();
   _internal_metadata_.Delete<std::string>();
 }
 
-void NBestSentencePieceText::SharedDtor() {
-  GOOGLE_DCHECK(GetArena() == nullptr);
+inline void NBestSentencePieceText::SharedDtor() {
+  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
 }
 
 void NBestSentencePieceText::ArenaDtor(void* object) {
@@ -764,11 +768,6 @@ void NBestSentencePieceText::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*)
 void NBestSentencePieceText::SetCachedSize(int size) const {
   _cached_size_.Set(size);
 }
-const NBestSentencePieceText& NBestSentencePieceText::default_instance() {
-  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NBestSentencePieceText_sentencepiece_2eproto.base);
-  return *internal_default_instance();
-}
-
 
 void NBestSentencePieceText::Clear() {
 // @@protoc_insertion_point(message_clear_start:sentencepiece.NBestSentencePieceText)
@@ -785,7 +784,6 @@ const char* NBestSentencePieceText::_InternalParse(const char* ptr, ::PROTOBUF_N
   while (!ctx->Done(&ptr)) {
     ::PROTOBUF_NAMESPACE_ID::uint32 tag;
     ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
-    CHK_(ptr);
     switch (tag >> 3) {
       // repeated .sentencepiece.SentencePieceText nbests = 1;
       case 1:
@@ -797,27 +795,29 @@ const char* NBestSentencePieceText::_InternalParse(const char* ptr, ::PROTOBUF_N
             CHK_(ptr);
             if (!ctx->DataAvailable(ptr)) break;
           } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
-        } else goto handle_unusual;
-        continue;
-      default: {
-      handle_unusual:
-        if ((tag & 7) == 4 || tag == 0) {
-          ctx->SetLastTag(tag);
-          goto success;
-        }
-        ptr = UnknownFieldParse(tag,
-            _internal_metadata_.mutable_unknown_fields<std::string>(),
-            ptr, ctx);
-        CHK_(ptr != nullptr);
+        } else
+          goto handle_unusual;
         continue;
-      }
+      default:
+        goto handle_unusual;
     }  // switch
+  handle_unusual:
+    if ((tag == 0) || ((tag & 7) == 4)) {
+      CHK_(ptr);
+      ctx->SetLastTag(tag);
+      goto message_done;
+    }
+    ptr = UnknownFieldParse(
+        tag,
+        _internal_metadata_.mutable_unknown_fields<std::string>(),
+        ptr, ctx);
+    CHK_(ptr != nullptr);
   }  // while
-success:
+message_done:
   return ptr;
 failure:
   ptr = nullptr;
-  goto success;
+  goto message_done;
 #undef CHK_
 }
 
@@ -875,11 +875,11 @@ void NBestSentencePieceText::CheckTypeAndMergeFrom(
 void NBestSentencePieceText::MergeFrom(const NBestSentencePieceText& from) {
 // @@protoc_insertion_point(class_specific_merge_from_start:sentencepiece.NBestSentencePieceText)
   GOOGLE_DCHECK_NE(&from, this);
-  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
   ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
   (void) cached_has_bits;
 
   nbests_.MergeFrom(from.nbests_);
+  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
 }
 
 void NBestSentencePieceText::CopyFrom(const NBestSentencePieceText& from) {
@@ -896,7 +896,7 @@ bool NBestSentencePieceText::IsInitialized() const {
 
 void NBestSentencePieceText::InternalSwap(NBestSentencePieceText* other) {
   using std::swap;
-  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
+  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
   nbests_.InternalSwap(&other->nbests_);
 }
 
diff --git a/src/builtin_pb/sentencepiece.pb.h b/src/builtin_pb/sentencepiece.pb.h
index 24ec337..e2abed6 100644
--- a/src/builtin_pb/sentencepiece.pb.h
+++ b/src/builtin_pb/sentencepiece.pb.h
@@ -8,12 +8,12 @@
 #include <string>
 
 #include <google/protobuf/port_def.inc>
-#if PROTOBUF_VERSION < 3014000
+#if PROTOBUF_VERSION < 3018000
 #error This file was generated by a newer version of protoc which is
 #error incompatible with your Protocol Buffer headers. Please update
 #error your headers.
 #endif
-#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
+#if 3018003 < PROTOBUF_MIN_PROTOC_VERSION
 #error This file was generated by an older version of protoc which is
 #error incompatible with your Protocol Buffer headers. Please
 #error regenerate this file with a newer version of protoc.
@@ -52,13 +52,13 @@ struct TableStruct_sentencepiece_2eproto {
 };
 namespace sentencepiece {
 class NBestSentencePieceText;
-class NBestSentencePieceTextDefaultTypeInternal;
+struct NBestSentencePieceTextDefaultTypeInternal;
 extern NBestSentencePieceTextDefaultTypeInternal _NBestSentencePieceText_default_instance_;
 class SentencePieceText;
-class SentencePieceTextDefaultTypeInternal;
+struct SentencePieceTextDefaultTypeInternal;
 extern SentencePieceTextDefaultTypeInternal _SentencePieceText_default_instance_;
 class SentencePieceText_SentencePiece;
-class SentencePieceText_SentencePieceDefaultTypeInternal;
+struct SentencePieceText_SentencePieceDefaultTypeInternal;
 extern SentencePieceText_SentencePieceDefaultTypeInternal _SentencePieceText_SentencePiece_default_instance_;
 }  // namespace sentencepiece
 PROTOBUF_NAMESPACE_OPEN
@@ -70,11 +70,12 @@ namespace sentencepiece {
 
 // ===================================================================
 
-class SentencePieceText_SentencePiece PROTOBUF_FINAL :
+class SentencePieceText_SentencePiece final :
     public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sentencepiece.SentencePieceText.SentencePiece) */ {
  public:
   inline SentencePieceText_SentencePiece() : SentencePieceText_SentencePiece(nullptr) {}
-  virtual ~SentencePieceText_SentencePiece();
+  ~SentencePieceText_SentencePiece() override;
+  explicit constexpr SentencePieceText_SentencePiece(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
 
   SentencePieceText_SentencePiece(const SentencePieceText_SentencePiece& from);
   SentencePieceText_SentencePiece(SentencePieceText_SentencePiece&& from) noexcept
@@ -87,8 +88,13 @@ class SentencePieceText_SentencePiece PROTOBUF_FINAL :
     return *this;
   }
   inline SentencePieceText_SentencePiece& operator=(SentencePieceText_SentencePiece&& from) noexcept {
-    if (GetArena() == from.GetArena()) {
-      if (this != &from) InternalSwap(&from);
+    if (this == &from) return *this;
+    if (GetOwningArena() == from.GetOwningArena()
+  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
+        && GetOwningArena() != nullptr
+  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
+    ) {
+      InternalSwap(&from);
     } else {
       CopyFrom(from);
     }
@@ -102,8 +108,9 @@ class SentencePieceText_SentencePiece PROTOBUF_FINAL :
     return _internal_metadata_.mutable_unknown_fields<std::string>();
   }
 
-  static const SentencePieceText_SentencePiece& default_instance();
-
+  static const SentencePieceText_SentencePiece& default_instance() {
+    return *internal_default_instance();
+  }
   static inline const SentencePieceText_SentencePiece* internal_default_instance() {
     return reinterpret_cast<const SentencePieceText_SentencePiece*>(
                &_SentencePieceText_SentencePiece_default_instance_);
@@ -116,7 +123,7 @@ class SentencePieceText_SentencePiece PROTOBUF_FINAL :
   }
   inline void Swap(SentencePieceText_SentencePiece* other) {
     if (other == this) return;
-    if (GetArena() == other->GetArena()) {
+    if (GetOwningArena() == other->GetOwningArena()) {
       InternalSwap(other);
     } else {
       ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
@@ -124,21 +131,20 @@ class SentencePieceText_SentencePiece PROTOBUF_FINAL :
   }
   void UnsafeArenaSwap(SentencePieceText_SentencePiece* other) {
     if (other == this) return;
-    GOOGLE_DCHECK(GetArena() == other->GetArena());
+    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
     InternalSwap(other);
   }
 
   // implements Message ----------------------------------------------
 
   inline SentencePieceText_SentencePiece* New() const final {
-    return CreateMaybeMessage<SentencePieceText_SentencePiece>(nullptr);
+    return new SentencePieceText_SentencePiece();
   }
 
   SentencePieceText_SentencePiece* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
     return CreateMaybeMessage<SentencePieceText_SentencePiece>(arena);
   }
-  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
-    final;
+  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
   void CopyFrom(const SentencePieceText_SentencePiece& from);
   void MergeFrom(const SentencePieceText_SentencePiece& from);
   PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
@@ -152,8 +158,8 @@ class SentencePieceText_SentencePiece PROTOBUF_FINAL :
   int GetCachedSize() const final { return _cached_size_.Get(); }
 
   private:
-  inline void SharedCtor();
-  inline void SharedDtor();
+  void SharedCtor();
+  void SharedDtor();
   void SetCachedSize(int size) const;
   void InternalSwap(SentencePieceText_SentencePiece* other);
   friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
@@ -161,7 +167,8 @@ class SentencePieceText_SentencePiece PROTOBUF_FINAL :
     return "sentencepiece.SentencePieceText.SentencePiece";
   }
   protected:
-  explicit SentencePieceText_SentencePiece(::PROTOBUF_NAMESPACE_ID::Arena* arena);
+  explicit SentencePieceText_SentencePiece(::PROTOBUF_NAMESPACE_ID::Arena* arena,
+                       bool is_message_owned = false);
   private:
   static void ArenaDtor(void* object);
   inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
@@ -187,16 +194,14 @@ class SentencePieceText_SentencePiece PROTOBUF_FINAL :
   public:
   void clear_piece();
   const std::string& piece() const;
-  void set_piece(const std::string& value);
-  void set_piece(std::string&& value);
-  void set_piece(const char* value);
-  void set_piece(const char* value, size_t size);
+  template <typename ArgT0 = const std::string&, typename... ArgT>
+  void set_piece(ArgT0&& arg0, ArgT... args);
   std::string* mutable_piece();
-  std::string* release_piece();
+  PROTOBUF_MUST_USE_RESULT std::string* release_piece();
   void set_allocated_piece(std::string* piece);
   private:
   const std::string& _internal_piece() const;
-  void _internal_set_piece(const std::string& value);
+  inline PROTOBUF_ALWAYS_INLINE void _internal_set_piece(const std::string& value);
   std::string* _internal_mutable_piece();
   public:
 
@@ -207,16 +212,14 @@ class SentencePieceText_SentencePiece PROTOBUF_FINAL :
   public:
   void clear_surface();
   const std::string& surface() const;
-  void set_surface(const std::string& value);
-  void set_surface(std::string&& value);
-  void set_surface(const char* value);
-  void set_surface(const char* value, size_t size);
+  template <typename ArgT0 = const std::string&, typename... ArgT>
+  void set_surface(ArgT0&& arg0, ArgT... args);
   std::string* mutable_surface();
-  std::string* release_surface();
+  PROTOBUF_MUST_USE_RESULT std::string* release_surface();
   void set_allocated_surface(std::string* surface);
   private:
   const std::string& _internal_surface() const;
-  void _internal_set_surface(const std::string& value);
+  inline PROTOBUF_ALWAYS_INLINE void _internal_set_surface(const std::string& value);
   std::string* _internal_mutable_surface();
   public:
 
@@ -259,7 +262,196 @@ class SentencePieceText_SentencePiece PROTOBUF_FINAL :
   void _internal_set_end(::PROTOBUF_NAMESPACE_ID::uint32 value);
   public:
 
-  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(SentencePieceText_SentencePiece)
+
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline bool HasExtension(
+      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+          SentencePieceText_SentencePiece, _proto_TypeTraits, _field_type, _is_packed>& id) const {
+
+    return _extensions_.Has(id.number());
+  }
+
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline void ClearExtension(
+      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+          SentencePieceText_SentencePiece, _proto_TypeTraits, _field_type, _is_packed>& id) {
+    _extensions_.ClearExtension(id.number());
+
+  }
+
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline int ExtensionSize(
+      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+          SentencePieceText_SentencePiece, _proto_TypeTraits, _field_type, _is_packed>& id) const {
+
+    return _extensions_.ExtensionSize(id.number());
+  }
+
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline typename _proto_TypeTraits::Singular::ConstType GetExtension(
+      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+          SentencePieceText_SentencePiece, _proto_TypeTraits, _field_type, _is_packed>& id) const {
+
+    return _proto_TypeTraits::Get(id.number(), _extensions_,
+                                  id.default_value());
+  }
+
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline typename _proto_TypeTraits::Singular::MutableType MutableExtension(
+      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+          SentencePieceText_SentencePiece, _proto_TypeTraits, _field_type, _is_packed>& id) {
+
+    return _proto_TypeTraits::Mutable(id.number(), _field_type,
+                                      &_extensions_);
+  }
+
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline void SetExtension(
+      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+          SentencePieceText_SentencePiece, _proto_TypeTraits, _field_type, _is_packed>& id,
+      typename _proto_TypeTraits::Singular::ConstType value) {
+    _proto_TypeTraits::Set(id.number(), _field_type, value, &_extensions_);
+
+  }
+
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline void SetAllocatedExtension(
+      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+          SentencePieceText_SentencePiece, _proto_TypeTraits, _field_type, _is_packed>& id,
+      typename _proto_TypeTraits::Singular::MutableType value) {
+    _proto_TypeTraits::SetAllocated(id.number(), _field_type, value,
+                                    &_extensions_);
+
+  }
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline void UnsafeArenaSetAllocatedExtension(
+      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+          SentencePieceText_SentencePiece, _proto_TypeTraits, _field_type, _is_packed>& id,
+      typename _proto_TypeTraits::Singular::MutableType value) {
+    _proto_TypeTraits::UnsafeArenaSetAllocated(id.number(), _field_type,
+                                               value, &_extensions_);
+
+  }
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline PROTOBUF_MUST_USE_RESULT
+      typename _proto_TypeTraits::Singular::MutableType
+      ReleaseExtension(
+          const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+              SentencePieceText_SentencePiece, _proto_TypeTraits, _field_type, _is_packed>& id) {
+
+    return _proto_TypeTraits::Release(id.number(), _field_type,
+                                      &_extensions_);
+  }
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline typename _proto_TypeTraits::Singular::MutableType
+  UnsafeArenaReleaseExtension(
+      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+          SentencePieceText_SentencePiece, _proto_TypeTraits, _field_type, _is_packed>& id) {
+
+    return _proto_TypeTraits::UnsafeArenaRelease(id.number(), _field_type,
+                                                 &_extensions_);
+  }
+
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline typename _proto_TypeTraits::Repeated::ConstType GetExtension(
+      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+          SentencePieceText_SentencePiece, _proto_TypeTraits, _field_type, _is_packed>& id,
+      int index) const {
+
+    return _proto_TypeTraits::Get(id.number(), _extensions_, index);
+  }
+
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline typename _proto_TypeTraits::Repeated::MutableType MutableExtension(
+      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+          SentencePieceText_SentencePiece, _proto_TypeTraits, _field_type, _is_packed>& id,
+      int index) {
+
+    return _proto_TypeTraits::Mutable(id.number(), index, &_extensions_);
+  }
+
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline void SetExtension(
+      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+          SentencePieceText_SentencePiece, _proto_TypeTraits, _field_type, _is_packed>& id,
+      int index, typename _proto_TypeTraits::Repeated::ConstType value) {
+    _proto_TypeTraits::Set(id.number(), index, value, &_extensions_);
+
+  }
+
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline typename _proto_TypeTraits::Repeated::MutableType AddExtension(
+      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+          SentencePieceText_SentencePiece, _proto_TypeTraits, _field_type, _is_packed>& id) {
+    typename _proto_TypeTraits::Repeated::MutableType to_add =
+        _proto_TypeTraits::Add(id.number(), _field_type, &_extensions_);
+
+    return to_add;
+  }
+
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline void AddExtension(
+      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+          SentencePieceText_SentencePiece, _proto_TypeTraits, _field_type, _is_packed>& id,
+      typename _proto_TypeTraits::Repeated::ConstType value) {
+    _proto_TypeTraits::Add(id.number(), _field_type, _is_packed, value,
+                           &_extensions_);
+
+  }
+
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline const typename _proto_TypeTraits::Repeated::RepeatedFieldType&
+  GetRepeatedExtension(
+      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+          SentencePieceText_SentencePiece, _proto_TypeTraits, _field_type, _is_packed>& id) const {
+
+    return _proto_TypeTraits::GetRepeated(id.number(), _extensions_);
+  }
+
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline typename _proto_TypeTraits::Repeated::RepeatedFieldType*
+  MutableRepeatedExtension(
+      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+          SentencePieceText_SentencePiece, _proto_TypeTraits, _field_type, _is_packed>& id) {
+
+    return _proto_TypeTraits::MutableRepeated(id.number(), _field_type,
+                                              _is_packed, &_extensions_);
+  }
+
   // @@protoc_insertion_point(class_scope:sentencepiece.SentencePieceText.SentencePiece)
  private:
   class _Internal;
@@ -280,11 +472,12 @@ class SentencePieceText_SentencePiece PROTOBUF_FINAL :
 };
 // -------------------------------------------------------------------
 
-class SentencePieceText PROTOBUF_FINAL :
+class SentencePieceText final :
     public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sentencepiece.SentencePieceText) */ {
  public:
   inline SentencePieceText() : SentencePieceText(nullptr) {}
-  virtual ~SentencePieceText();
+  ~SentencePieceText() override;
+  explicit constexpr SentencePieceText(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
 
   SentencePieceText(const SentencePieceText& from);
   SentencePieceText(SentencePieceText&& from) noexcept
@@ -297,8 +490,13 @@ class SentencePieceText PROTOBUF_FINAL :
     return *this;
   }
   inline SentencePieceText& operator=(SentencePieceText&& from) noexcept {
-    if (GetArena() == from.GetArena()) {
-      if (this != &from) InternalSwap(&from);
+    if (this == &from) return *this;
+    if (GetOwningArena() == from.GetOwningArena()
+  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
+        && GetOwningArena() != nullptr
+  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
+    ) {
+      InternalSwap(&from);
     } else {
       CopyFrom(from);
     }
@@ -312,8 +510,9 @@ class SentencePieceText PROTOBUF_FINAL :
     return _internal_metadata_.mutable_unknown_fields<std::string>();
   }
 
-  static const SentencePieceText& default_instance();
-
+  static const SentencePieceText& default_instance() {
+    return *internal_default_instance();
+  }
   static inline const SentencePieceText* internal_default_instance() {
     return reinterpret_cast<const SentencePieceText*>(
                &_SentencePieceText_default_instance_);
@@ -326,7 +525,7 @@ class SentencePieceText PROTOBUF_FINAL :
   }
   inline void Swap(SentencePieceText* other) {
     if (other == this) return;
-    if (GetArena() == other->GetArena()) {
+    if (GetOwningArena() == other->GetOwningArena()) {
       InternalSwap(other);
     } else {
       ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
@@ -334,21 +533,20 @@ class SentencePieceText PROTOBUF_FINAL :
   }
   void UnsafeArenaSwap(SentencePieceText* other) {
     if (other == this) return;
-    GOOGLE_DCHECK(GetArena() == other->GetArena());
+    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
     InternalSwap(other);
   }
 
   // implements Message ----------------------------------------------
 
   inline SentencePieceText* New() const final {
-    return CreateMaybeMessage<SentencePieceText>(nullptr);
+    return new SentencePieceText();
   }
 
   SentencePieceText* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
     return CreateMaybeMessage<SentencePieceText>(arena);
   }
-  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
-    final;
+  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
   void CopyFrom(const SentencePieceText& from);
   void MergeFrom(const SentencePieceText& from);
   PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
@@ -362,8 +560,8 @@ class SentencePieceText PROTOBUF_FINAL :
   int GetCachedSize() const final { return _cached_size_.Get(); }
 
   private:
-  inline void SharedCtor();
-  inline void SharedDtor();
+  void SharedCtor();
+  void SharedDtor();
   void SetCachedSize(int size) const;
   void InternalSwap(SentencePieceText* other);
   friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
@@ -371,7 +569,8 @@ class SentencePieceText PROTOBUF_FINAL :
     return "sentencepiece.SentencePieceText";
   }
   protected:
-  explicit SentencePieceText(::PROTOBUF_NAMESPACE_ID::Arena* arena);
+  explicit SentencePieceText(::PROTOBUF_NAMESPACE_ID::Arena* arena,
+                       bool is_message_owned = false);
   private:
   static void ArenaDtor(void* object);
   inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
@@ -415,16 +614,14 @@ class SentencePieceText PROTOBUF_FINAL :
   public:
   void clear_text();
   const std::string& text() const;
-  void set_text(const std::string& value);
-  void set_text(std::string&& value);
-  void set_text(const char* value);
-  void set_text(const char* value, size_t size);
+  template <typename ArgT0 = const std::string&, typename... ArgT>
+  void set_text(ArgT0&& arg0, ArgT... args);
   std::string* mutable_text();
-  std::string* release_text();
+  PROTOBUF_MUST_USE_RESULT std::string* release_text();
   void set_allocated_text(std::string* text);
   private:
   const std::string& _internal_text() const;
-  void _internal_set_text(const std::string& value);
+  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(const std::string& value);
   std::string* _internal_mutable_text();
   public:
 
@@ -441,7 +638,196 @@ class SentencePieceText PROTOBUF_FINAL :
   void _internal_set_score(float value);
   public:
 
-  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(SentencePieceText)
+
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline bool HasExtension(
+      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+          SentencePieceText, _proto_TypeTraits, _field_type, _is_packed>& id) const {
+
+    return _extensions_.Has(id.number());
+  }
+
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline void ClearExtension(
+      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+          SentencePieceText, _proto_TypeTraits, _field_type, _is_packed>& id) {
+    _extensions_.ClearExtension(id.number());
+
+  }
+
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline int ExtensionSize(
+      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+          SentencePieceText, _proto_TypeTraits, _field_type, _is_packed>& id) const {
+
+    return _extensions_.ExtensionSize(id.number());
+  }
+
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline typename _proto_TypeTraits::Singular::ConstType GetExtension(
+      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+          SentencePieceText, _proto_TypeTraits, _field_type, _is_packed>& id) const {
+
+    return _proto_TypeTraits::Get(id.number(), _extensions_,
+                                  id.default_value());
+  }
+
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline typename _proto_TypeTraits::Singular::MutableType MutableExtension(
+      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+          SentencePieceText, _proto_TypeTraits, _field_type, _is_packed>& id) {
+
+    return _proto_TypeTraits::Mutable(id.number(), _field_type,
+                                      &_extensions_);
+  }
+
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline void SetExtension(
+      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+          SentencePieceText, _proto_TypeTraits, _field_type, _is_packed>& id,
+      typename _proto_TypeTraits::Singular::ConstType value) {
+    _proto_TypeTraits::Set(id.number(), _field_type, value, &_extensions_);
+
+  }
+
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline void SetAllocatedExtension(
+      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+          SentencePieceText, _proto_TypeTraits, _field_type, _is_packed>& id,
+      typename _proto_TypeTraits::Singular::MutableType value) {
+    _proto_TypeTraits::SetAllocated(id.number(), _field_type, value,
+                                    &_extensions_);
+
+  }
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline void UnsafeArenaSetAllocatedExtension(
+      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+          SentencePieceText, _proto_TypeTraits, _field_type, _is_packed>& id,
+      typename _proto_TypeTraits::Singular::MutableType value) {
+    _proto_TypeTraits::UnsafeArenaSetAllocated(id.number(), _field_type,
+                                               value, &_extensions_);
+
+  }
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline PROTOBUF_MUST_USE_RESULT
+      typename _proto_TypeTraits::Singular::MutableType
+      ReleaseExtension(
+          const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+              SentencePieceText, _proto_TypeTraits, _field_type, _is_packed>& id) {
+
+    return _proto_TypeTraits::Release(id.number(), _field_type,
+                                      &_extensions_);
+  }
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline typename _proto_TypeTraits::Singular::MutableType
+  UnsafeArenaReleaseExtension(
+      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+          SentencePieceText, _proto_TypeTraits, _field_type, _is_packed>& id) {
+
+    return _proto_TypeTraits::UnsafeArenaRelease(id.number(), _field_type,
+                                                 &_extensions_);
+  }
+
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline typename _proto_TypeTraits::Repeated::ConstType GetExtension(
+      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+          SentencePieceText, _proto_TypeTraits, _field_type, _is_packed>& id,
+      int index) const {
+
+    return _proto_TypeTraits::Get(id.number(), _extensions_, index);
+  }
+
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline typename _proto_TypeTraits::Repeated::MutableType MutableExtension(
+      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+          SentencePieceText, _proto_TypeTraits, _field_type, _is_packed>& id,
+      int index) {
+
+    return _proto_TypeTraits::Mutable(id.number(), index, &_extensions_);
+  }
+
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline void SetExtension(
+      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+          SentencePieceText, _proto_TypeTraits, _field_type, _is_packed>& id,
+      int index, typename _proto_TypeTraits::Repeated::ConstType value) {
+    _proto_TypeTraits::Set(id.number(), index, value, &_extensions_);
+
+  }
+
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline typename _proto_TypeTraits::Repeated::MutableType AddExtension(
+      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+          SentencePieceText, _proto_TypeTraits, _field_type, _is_packed>& id) {
+    typename _proto_TypeTraits::Repeated::MutableType to_add =
+        _proto_TypeTraits::Add(id.number(), _field_type, &_extensions_);
+
+    return to_add;
+  }
+
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline void AddExtension(
+      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+          SentencePieceText, _proto_TypeTraits, _field_type, _is_packed>& id,
+      typename _proto_TypeTraits::Repeated::ConstType value) {
+    _proto_TypeTraits::Add(id.number(), _field_type, _is_packed, value,
+                           &_extensions_);
+
+  }
+
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline const typename _proto_TypeTraits::Repeated::RepeatedFieldType&
+  GetRepeatedExtension(
+      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+          SentencePieceText, _proto_TypeTraits, _field_type, _is_packed>& id) const {
+
+    return _proto_TypeTraits::GetRepeated(id.number(), _extensions_);
+  }
+
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline typename _proto_TypeTraits::Repeated::RepeatedFieldType*
+  MutableRepeatedExtension(
+      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+          SentencePieceText, _proto_TypeTraits, _field_type, _is_packed>& id) {
+
+    return _proto_TypeTraits::MutableRepeated(id.number(), _field_type,
+                                              _is_packed, &_extensions_);
+  }
+
   // @@protoc_insertion_point(class_scope:sentencepiece.SentencePieceText)
  private:
   class _Internal;
@@ -460,11 +846,12 @@ class SentencePieceText PROTOBUF_FINAL :
 };
 // -------------------------------------------------------------------
 
-class NBestSentencePieceText PROTOBUF_FINAL :
+class NBestSentencePieceText final :
     public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sentencepiece.NBestSentencePieceText) */ {
  public:
   inline NBestSentencePieceText() : NBestSentencePieceText(nullptr) {}
-  virtual ~NBestSentencePieceText();
+  ~NBestSentencePieceText() override;
+  explicit constexpr NBestSentencePieceText(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
 
   NBestSentencePieceText(const NBestSentencePieceText& from);
   NBestSentencePieceText(NBestSentencePieceText&& from) noexcept
@@ -477,8 +864,13 @@ class NBestSentencePieceText PROTOBUF_FINAL :
     return *this;
   }
   inline NBestSentencePieceText& operator=(NBestSentencePieceText&& from) noexcept {
-    if (GetArena() == from.GetArena()) {
-      if (this != &from) InternalSwap(&from);
+    if (this == &from) return *this;
+    if (GetOwningArena() == from.GetOwningArena()
+  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
+        && GetOwningArena() != nullptr
+  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
+    ) {
+      InternalSwap(&from);
     } else {
       CopyFrom(from);
     }
@@ -492,8 +884,9 @@ class NBestSentencePieceText PROTOBUF_FINAL :
     return _internal_metadata_.mutable_unknown_fields<std::string>();
   }
 
-  static const NBestSentencePieceText& default_instance();
-
+  static const NBestSentencePieceText& default_instance() {
+    return *internal_default_instance();
+  }
   static inline const NBestSentencePieceText* internal_default_instance() {
     return reinterpret_cast<const NBestSentencePieceText*>(
                &_NBestSentencePieceText_default_instance_);
@@ -506,7 +899,7 @@ class NBestSentencePieceText PROTOBUF_FINAL :
   }
   inline void Swap(NBestSentencePieceText* other) {
     if (other == this) return;
-    if (GetArena() == other->GetArena()) {
+    if (GetOwningArena() == other->GetOwningArena()) {
       InternalSwap(other);
     } else {
       ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
@@ -514,21 +907,20 @@ class NBestSentencePieceText PROTOBUF_FINAL :
   }
   void UnsafeArenaSwap(NBestSentencePieceText* other) {
     if (other == this) return;
-    GOOGLE_DCHECK(GetArena() == other->GetArena());
+    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
     InternalSwap(other);
   }
 
   // implements Message ----------------------------------------------
 
   inline NBestSentencePieceText* New() const final {
-    return CreateMaybeMessage<NBestSentencePieceText>(nullptr);
+    return new NBestSentencePieceText();
   }
 
   NBestSentencePieceText* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
     return CreateMaybeMessage<NBestSentencePieceText>(arena);
   }
-  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
-    final;
+  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
   void CopyFrom(const NBestSentencePieceText& from);
   void MergeFrom(const NBestSentencePieceText& from);
   PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
@@ -542,8 +934,8 @@ class NBestSentencePieceText PROTOBUF_FINAL :
   int GetCachedSize() const final { return _cached_size_.Get(); }
 
   private:
-  inline void SharedCtor();
-  inline void SharedDtor();
+  void SharedCtor();
+  void SharedDtor();
   void SetCachedSize(int size) const;
   void InternalSwap(NBestSentencePieceText* other);
   friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
@@ -551,7 +943,8 @@ class NBestSentencePieceText PROTOBUF_FINAL :
     return "sentencepiece.NBestSentencePieceText";
   }
   protected:
-  explicit NBestSentencePieceText(::PROTOBUF_NAMESPACE_ID::Arena* arena);
+  explicit NBestSentencePieceText(::PROTOBUF_NAMESPACE_ID::Arena* arena,
+                       bool is_message_owned = false);
   private:
   static void ArenaDtor(void* object);
   inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
@@ -622,43 +1015,28 @@ inline const std::string& SentencePieceText_SentencePiece::piece() const {
   // @@protoc_insertion_point(field_get:sentencepiece.SentencePieceText.SentencePiece.piece)
   return _internal_piece();
 }
-inline void SentencePieceText_SentencePiece::set_piece(const std::string& value) {
-  _internal_set_piece(value);
+template <typename ArgT0, typename... ArgT>
+inline PROTOBUF_ALWAYS_INLINE
+void SentencePieceText_SentencePiece::set_piece(ArgT0&& arg0, ArgT... args) {
+ _has_bits_[0] |= 0x00000001u;
+ piece_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
   // @@protoc_insertion_point(field_set:sentencepiece.SentencePieceText.SentencePiece.piece)
 }
 inline std::string* SentencePieceText_SentencePiece::mutable_piece() {
+  std::string* _s = _internal_mutable_piece();
   // @@protoc_insertion_point(field_mutable:sentencepiece.SentencePieceText.SentencePiece.piece)
-  return _internal_mutable_piece();
+  return _s;
 }
 inline const std::string& SentencePieceText_SentencePiece::_internal_piece() const {
   return piece_.Get();
 }
 inline void SentencePieceText_SentencePiece::_internal_set_piece(const std::string& value) {
   _has_bits_[0] |= 0x00000001u;
-  piece_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
-}
-inline void SentencePieceText_SentencePiece::set_piece(std::string&& value) {
-  _has_bits_[0] |= 0x00000001u;
-  piece_.Set(
-    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
-  // @@protoc_insertion_point(field_set_rvalue:sentencepiece.SentencePieceText.SentencePiece.piece)
-}
-inline void SentencePieceText_SentencePiece::set_piece(const char* value) {
-  GOOGLE_DCHECK(value != nullptr);
-  _has_bits_[0] |= 0x00000001u;
-  piece_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
-  // @@protoc_insertion_point(field_set_char:sentencepiece.SentencePieceText.SentencePiece.piece)
-}
-inline void SentencePieceText_SentencePiece::set_piece(const char* value,
-    size_t size) {
-  _has_bits_[0] |= 0x00000001u;
-  piece_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
-      reinterpret_cast<const char*>(value), size), GetArena());
-  // @@protoc_insertion_point(field_set_pointer:sentencepiece.SentencePieceText.SentencePiece.piece)
+  piece_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
 }
 inline std::string* SentencePieceText_SentencePiece::_internal_mutable_piece() {
   _has_bits_[0] |= 0x00000001u;
-  return piece_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
+  return piece_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
 }
 inline std::string* SentencePieceText_SentencePiece::release_piece() {
   // @@protoc_insertion_point(field_release:sentencepiece.SentencePieceText.SentencePiece.piece)
@@ -666,7 +1044,7 @@ inline std::string* SentencePieceText_SentencePiece::release_piece() {
     return nullptr;
   }
   _has_bits_[0] &= ~0x00000001u;
-  return piece_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
+  return piece_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
 }
 inline void SentencePieceText_SentencePiece::set_allocated_piece(std::string* piece) {
   if (piece != nullptr) {
@@ -675,7 +1053,7 @@ inline void SentencePieceText_SentencePiece::set_allocated_piece(std::string* pi
     _has_bits_[0] &= ~0x00000001u;
   }
   piece_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), piece,
-      GetArena());
+      GetArenaForAllocation());
   // @@protoc_insertion_point(field_set_allocated:sentencepiece.SentencePieceText.SentencePiece.piece)
 }
 
@@ -723,43 +1101,28 @@ inline const std::string& SentencePieceText_SentencePiece::surface() const {
   // @@protoc_insertion_point(field_get:sentencepiece.SentencePieceText.SentencePiece.surface)
   return _internal_surface();
 }
-inline void SentencePieceText_SentencePiece::set_surface(const std::string& value) {
-  _internal_set_surface(value);
+template <typename ArgT0, typename... ArgT>
+inline PROTOBUF_ALWAYS_INLINE
+void SentencePieceText_SentencePiece::set_surface(ArgT0&& arg0, ArgT... args) {
+ _has_bits_[0] |= 0x00000002u;
+ surface_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
   // @@protoc_insertion_point(field_set:sentencepiece.SentencePieceText.SentencePiece.surface)
 }
 inline std::string* SentencePieceText_SentencePiece::mutable_surface() {
+  std::string* _s = _internal_mutable_surface();
   // @@protoc_insertion_point(field_mutable:sentencepiece.SentencePieceText.SentencePiece.surface)
-  return _internal_mutable_surface();
+  return _s;
 }
 inline const std::string& SentencePieceText_SentencePiece::_internal_surface() const {
   return surface_.Get();
 }
 inline void SentencePieceText_SentencePiece::_internal_set_surface(const std::string& value) {
   _has_bits_[0] |= 0x00000002u;
-  surface_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
-}
-inline void SentencePieceText_SentencePiece::set_surface(std::string&& value) {
-  _has_bits_[0] |= 0x00000002u;
-  surface_.Set(
-    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
-  // @@protoc_insertion_point(field_set_rvalue:sentencepiece.SentencePieceText.SentencePiece.surface)
-}
-inline void SentencePieceText_SentencePiece::set_surface(const char* value) {
-  GOOGLE_DCHECK(value != nullptr);
-  _has_bits_[0] |= 0x00000002u;
-  surface_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
-  // @@protoc_insertion_point(field_set_char:sentencepiece.SentencePieceText.SentencePiece.surface)
-}
-inline void SentencePieceText_SentencePiece::set_surface(const char* value,
-    size_t size) {
-  _has_bits_[0] |= 0x00000002u;
-  surface_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
-      reinterpret_cast<const char*>(value), size), GetArena());
-  // @@protoc_insertion_point(field_set_pointer:sentencepiece.SentencePieceText.SentencePiece.surface)
+  surface_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
 }
 inline std::string* SentencePieceText_SentencePiece::_internal_mutable_surface() {
   _has_bits_[0] |= 0x00000002u;
-  return surface_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
+  return surface_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
 }
 inline std::string* SentencePieceText_SentencePiece::release_surface() {
   // @@protoc_insertion_point(field_release:sentencepiece.SentencePieceText.SentencePiece.surface)
@@ -767,7 +1130,7 @@ inline std::string* SentencePieceText_SentencePiece::release_surface() {
     return nullptr;
   }
   _has_bits_[0] &= ~0x00000002u;
-  return surface_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
+  return surface_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
 }
 inline void SentencePieceText_SentencePiece::set_allocated_surface(std::string* surface) {
   if (surface != nullptr) {
@@ -776,7 +1139,7 @@ inline void SentencePieceText_SentencePiece::set_allocated_surface(std::string*
     _has_bits_[0] &= ~0x00000002u;
   }
   surface_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), surface,
-      GetArena());
+      GetArenaForAllocation());
   // @@protoc_insertion_point(field_set_allocated:sentencepiece.SentencePieceText.SentencePiece.surface)
 }
 
@@ -856,43 +1219,28 @@ inline const std::string& SentencePieceText::text() const {
   // @@protoc_insertion_point(field_get:sentencepiece.SentencePieceText.text)
   return _internal_text();
 }
-inline void SentencePieceText::set_text(const std::string& value) {
-  _internal_set_text(value);
+template <typename ArgT0, typename... ArgT>
+inline PROTOBUF_ALWAYS_INLINE
+void SentencePieceText::set_text(ArgT0&& arg0, ArgT... args) {
+ _has_bits_[0] |= 0x00000001u;
+ text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
   // @@protoc_insertion_point(field_set:sentencepiece.SentencePieceText.text)
 }
 inline std::string* SentencePieceText::mutable_text() {
+  std::string* _s = _internal_mutable_text();
   // @@protoc_insertion_point(field_mutable:sentencepiece.SentencePieceText.text)
-  return _internal_mutable_text();
+  return _s;
 }
 inline const std::string& SentencePieceText::_internal_text() const {
   return text_.Get();
 }
 inline void SentencePieceText::_internal_set_text(const std::string& value) {
   _has_bits_[0] |= 0x00000001u;
-  text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
-}
-inline void SentencePieceText::set_text(std::string&& value) {
-  _has_bits_[0] |= 0x00000001u;
-  text_.Set(
-    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
-  // @@protoc_insertion_point(field_set_rvalue:sentencepiece.SentencePieceText.text)
-}
-inline void SentencePieceText::set_text(const char* value) {
-  GOOGLE_DCHECK(value != nullptr);
-  _has_bits_[0] |= 0x00000001u;
-  text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
-  // @@protoc_insertion_point(field_set_char:sentencepiece.SentencePieceText.text)
-}
-inline void SentencePieceText::set_text(const char* value,
-    size_t size) {
-  _has_bits_[0] |= 0x00000001u;
-  text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
-      reinterpret_cast<const char*>(value), size), GetArena());
-  // @@protoc_insertion_point(field_set_pointer:sentencepiece.SentencePieceText.text)
+  text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
 }
 inline std::string* SentencePieceText::_internal_mutable_text() {
   _has_bits_[0] |= 0x00000001u;
-  return text_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
+  return text_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
 }
 inline std::string* SentencePieceText::release_text() {
   // @@protoc_insertion_point(field_release:sentencepiece.SentencePieceText.text)
@@ -900,7 +1248,7 @@ inline std::string* SentencePieceText::release_text() {
     return nullptr;
   }
   _has_bits_[0] &= ~0x00000001u;
-  return text_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
+  return text_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
 }
 inline void SentencePieceText::set_allocated_text(std::string* text) {
   if (text != nullptr) {
@@ -909,7 +1257,7 @@ inline void SentencePieceText::set_allocated_text(std::string* text) {
     _has_bits_[0] &= ~0x00000001u;
   }
   text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text,
-      GetArena());
+      GetArenaForAllocation());
   // @@protoc_insertion_point(field_set_allocated:sentencepiece.SentencePieceText.text)
 }
 
@@ -943,8 +1291,9 @@ inline ::sentencepiece::SentencePieceText_SentencePiece* SentencePieceText::_int
   return pieces_.Add();
 }
 inline ::sentencepiece::SentencePieceText_SentencePiece* SentencePieceText::add_pieces() {
+  ::sentencepiece::SentencePieceText_SentencePiece* _add = _internal_add_pieces();
   // @@protoc_insertion_point(field_add:sentencepiece.SentencePieceText.pieces)
-  return _internal_add_pieces();
+  return _add;
 }
 inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sentencepiece::SentencePieceText_SentencePiece >&
 SentencePieceText::pieces() const {
@@ -1014,8 +1363,9 @@ inline ::sentencepiece::SentencePieceText* NBestSentencePieceText::_internal_add
   return nbests_.Add();
 }
 inline ::sentencepiece::SentencePieceText* NBestSentencePieceText::add_nbests() {
+  ::sentencepiece::SentencePieceText* _add = _internal_add_nbests();
   // @@protoc_insertion_point(field_add:sentencepiece.NBestSentencePieceText.nbests)
-  return _internal_add_nbests();
+  return _add;
 }
 inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sentencepiece::SentencePieceText >&
 NBestSentencePieceText::nbests() const {
diff --git a/src/builtin_pb/sentencepiece_model.pb.cc b/src/builtin_pb/sentencepiece_model.pb.cc
index e913731..bc3e720 100644
--- a/src/builtin_pb/sentencepiece_model.pb.cc
+++ b/src/builtin_pb/sentencepiece_model.pb.cc
@@ -11,120 +11,136 @@
 #include <google/protobuf/io/zero_copy_stream_impl_lite.h>
 // @@protoc_insertion_point(includes)
 #include <google/protobuf/port_def.inc>
-extern PROTOBUF_INTERNAL_EXPORT_sentencepiece_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModelProto_SentencePiece_sentencepiece_5fmodel_2eproto;
-extern PROTOBUF_INTERNAL_EXPORT_sentencepiece_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NormalizerSpec_sentencepiece_5fmodel_2eproto;
-extern PROTOBUF_INTERNAL_EXPORT_sentencepiece_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SelfTestData_sentencepiece_5fmodel_2eproto;
-extern PROTOBUF_INTERNAL_EXPORT_sentencepiece_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SelfTestData_Sample_sentencepiece_5fmodel_2eproto;
-extern PROTOBUF_INTERNAL_EXPORT_sentencepiece_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrainerSpec_sentencepiece_5fmodel_2eproto;
+
+PROTOBUF_PRAGMA_INIT_SEG
 namespace sentencepiece {
-class TrainerSpecDefaultTypeInternal {
- public:
-  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrainerSpec> _instance;
-} _TrainerSpec_default_instance_;
-class NormalizerSpecDefaultTypeInternal {
- public:
-  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NormalizerSpec> _instance;
-} _NormalizerSpec_default_instance_;
-class SelfTestData_SampleDefaultTypeInternal {
- public:
-  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SelfTestData_Sample> _instance;
-} _SelfTestData_Sample_default_instance_;
-class SelfTestDataDefaultTypeInternal {
- public:
-  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SelfTestData> _instance;
-} _SelfTestData_default_instance_;
-class ModelProto_SentencePieceDefaultTypeInternal {
- public:
-  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModelProto_SentencePiece> _instance;
-} _ModelProto_SentencePiece_default_instance_;
-class ModelProtoDefaultTypeInternal {
- public:
-  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModelProto> _instance;
-} _ModelProto_default_instance_;
+constexpr TrainerSpec::TrainerSpec(
+  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
+  : input_()
+  , accept_language_()
+  , control_symbols_()
+  , user_defined_symbols_()
+  , model_prefix_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
+  , input_format_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
+  , required_chars_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
+  , unk_surface_(nullptr)
+  , unk_piece_(nullptr)
+  , bos_piece_(nullptr)
+  , eos_piece_(nullptr)
+  , pad_piece_(nullptr)
+  , self_test_sample_size_(0)
+  , mining_sentence_size_(0)
+  , input_sentence_size_(uint64_t{0u})
+  , training_sentence_size_(0)
+  , treat_whitespace_as_suffix_(false)
+  , allow_whitespace_only_pieces_(false)
+  , split_digits_(false)
+  , byte_fallback_(false)
+  , unk_id_(0)
+  , use_all_vocab_(false)
+  , train_extremely_large_corpus_(false)
+  , model_type_(1)
+
+  , vocab_size_(8000)
+  , character_coverage_(0.9995f)
+  , seed_sentencepiece_size_(1000000)
+  , shrinking_factor_(0.75f)
+  , num_threads_(16)
+  , num_sub_iterations_(2)
+  , max_sentence_length_(4192)
+  , max_sentencepiece_length_(16)
+  , shuffle_input_sentence_(true)
+  , split_by_unicode_script_(true)
+  , split_by_number_(true)
+  , split_by_whitespace_(true)
+  , vocabulary_output_piece_score_(true)
+  , hard_vocab_limit_(true)
+  , bos_id_(1)
+  , eos_id_(2)
+  , pad_id_(-1){}
+struct TrainerSpecDefaultTypeInternal {
+  constexpr TrainerSpecDefaultTypeInternal()
+    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
+  ~TrainerSpecDefaultTypeInternal() {}
+  union {
+    TrainerSpec _instance;
+  };
+};
+PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TrainerSpecDefaultTypeInternal _TrainerSpec_default_instance_;
+constexpr NormalizerSpec::NormalizerSpec(
+  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
+  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
+  , precompiled_charsmap_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
+  , normalization_rule_tsv_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
+  , add_dummy_prefix_(true)
+  , remove_extra_whitespaces_(true)
+  , escape_whitespaces_(true){}
+struct NormalizerSpecDefaultTypeInternal {
+  constexpr NormalizerSpecDefaultTypeInternal()
+    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
+  ~NormalizerSpecDefaultTypeInternal() {}
+  union {
+    NormalizerSpec _instance;
+  };
+};
+PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NormalizerSpecDefaultTypeInternal _NormalizerSpec_default_instance_;
+constexpr SelfTestData_Sample::SelfTestData_Sample(
+  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
+  : input_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
+  , expected_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
+struct SelfTestData_SampleDefaultTypeInternal {
+  constexpr SelfTestData_SampleDefaultTypeInternal()
+    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
+  ~SelfTestData_SampleDefaultTypeInternal() {}
+  union {
+    SelfTestData_Sample _instance;
+  };
+};
+PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SelfTestData_SampleDefaultTypeInternal _SelfTestData_Sample_default_instance_;
+constexpr SelfTestData::SelfTestData(
+  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
+  : samples_(){}
+struct SelfTestDataDefaultTypeInternal {
+  constexpr SelfTestDataDefaultTypeInternal()
+    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
+  ~SelfTestDataDefaultTypeInternal() {}
+  union {
+    SelfTestData _instance;
+  };
+};
+PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SelfTestDataDefaultTypeInternal _SelfTestData_default_instance_;
+constexpr ModelProto_SentencePiece::ModelProto_SentencePiece(
+  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
+  : piece_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
+  , score_(0)
+  , type_(1)
+{}
+struct ModelProto_SentencePieceDefaultTypeInternal {
+  constexpr ModelProto_SentencePieceDefaultTypeInternal()
+    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
+  ~ModelProto_SentencePieceDefaultTypeInternal() {}
+  union {
+    ModelProto_SentencePiece _instance;
+  };
+};
+PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ModelProto_SentencePieceDefaultTypeInternal _ModelProto_SentencePiece_default_instance_;
+constexpr ModelProto::ModelProto(
+  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
+  : pieces_()
+  , trainer_spec_(nullptr)
+  , normalizer_spec_(nullptr)
+  , self_test_data_(nullptr)
+  , denormalizer_spec_(nullptr){}
+struct ModelProtoDefaultTypeInternal {
+  constexpr ModelProtoDefaultTypeInternal()
+    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
+  ~ModelProtoDefaultTypeInternal() {}
+  union {
+    ModelProto _instance;
+  };
+};
+PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ModelProtoDefaultTypeInternal _ModelProto_default_instance_;
 }  // namespace sentencepiece
-static void InitDefaultsscc_info_ModelProto_sentencepiece_5fmodel_2eproto() {
-  GOOGLE_PROTOBUF_VERIFY_VERSION;
-
-  {
-    void* ptr = &::sentencepiece::_ModelProto_default_instance_;
-    new (ptr) ::sentencepiece::ModelProto();
-    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
-  }
-}
-
-::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ModelProto_sentencepiece_5fmodel_2eproto =
-    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_ModelProto_sentencepiece_5fmodel_2eproto}, {
-      &scc_info_ModelProto_SentencePiece_sentencepiece_5fmodel_2eproto.base,
-      &scc_info_TrainerSpec_sentencepiece_5fmodel_2eproto.base,
-      &scc_info_NormalizerSpec_sentencepiece_5fmodel_2eproto.base,
-      &scc_info_SelfTestData_sentencepiece_5fmodel_2eproto.base,}};
-
-static void InitDefaultsscc_info_ModelProto_SentencePiece_sentencepiece_5fmodel_2eproto() {
-  GOOGLE_PROTOBUF_VERIFY_VERSION;
-
-  {
-    void* ptr = &::sentencepiece::_ModelProto_SentencePiece_default_instance_;
-    new (ptr) ::sentencepiece::ModelProto_SentencePiece();
-    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
-  }
-}
-
-::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModelProto_SentencePiece_sentencepiece_5fmodel_2eproto =
-    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ModelProto_SentencePiece_sentencepiece_5fmodel_2eproto}, {}};
-
-static void InitDefaultsscc_info_NormalizerSpec_sentencepiece_5fmodel_2eproto() {
-  GOOGLE_PROTOBUF_VERIFY_VERSION;
-
-  {
-    void* ptr = &::sentencepiece::_NormalizerSpec_default_instance_;
-    new (ptr) ::sentencepiece::NormalizerSpec();
-    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
-  }
-}
-
-::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NormalizerSpec_sentencepiece_5fmodel_2eproto =
-    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NormalizerSpec_sentencepiece_5fmodel_2eproto}, {}};
-
-static void InitDefaultsscc_info_SelfTestData_sentencepiece_5fmodel_2eproto() {
-  GOOGLE_PROTOBUF_VERIFY_VERSION;
-
-  {
-    void* ptr = &::sentencepiece::_SelfTestData_default_instance_;
-    new (ptr) ::sentencepiece::SelfTestData();
-    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
-  }
-}
-
-::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SelfTestData_sentencepiece_5fmodel_2eproto =
-    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SelfTestData_sentencepiece_5fmodel_2eproto}, {
-      &scc_info_SelfTestData_Sample_sentencepiece_5fmodel_2eproto.base,}};
-
-static void InitDefaultsscc_info_SelfTestData_Sample_sentencepiece_5fmodel_2eproto() {
-  GOOGLE_PROTOBUF_VERIFY_VERSION;
-
-  {
-    void* ptr = &::sentencepiece::_SelfTestData_Sample_default_instance_;
-    new (ptr) ::sentencepiece::SelfTestData_Sample();
-    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
-  }
-}
-
-::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SelfTestData_Sample_sentencepiece_5fmodel_2eproto =
-    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SelfTestData_Sample_sentencepiece_5fmodel_2eproto}, {}};
-
-static void InitDefaultsscc_info_TrainerSpec_sentencepiece_5fmodel_2eproto() {
-  GOOGLE_PROTOBUF_VERIFY_VERSION;
-
-  {
-    void* ptr = &::sentencepiece::_TrainerSpec_default_instance_;
-    new (ptr) ::sentencepiece::TrainerSpec();
-    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
-  }
-}
-
-::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrainerSpec_sentencepiece_5fmodel_2eproto =
-    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TrainerSpec_sentencepiece_5fmodel_2eproto}, {}};
-
 namespace sentencepiece {
 bool TrainerSpec_ModelType_IsValid(int value) {
   switch (value) {
@@ -396,15 +412,18 @@ const ::PROTOBUF_NAMESPACE_ID::internal::LazyString TrainerSpec::_i_give_permiss
 const ::PROTOBUF_NAMESPACE_ID::internal::LazyString TrainerSpec::_i_give_permission_to_break_this_code_default_eos_piece_{{{"</s>", 4}}, {nullptr}};
 const ::PROTOBUF_NAMESPACE_ID::internal::LazyString TrainerSpec::_i_give_permission_to_break_this_code_default_pad_piece_{{{"<pad>", 5}}, {nullptr}};
 const ::PROTOBUF_NAMESPACE_ID::internal::LazyString TrainerSpec::_i_give_permission_to_break_this_code_default_unk_surface_{{{" \342\201\207 ", 5}}, {nullptr}};
-TrainerSpec::TrainerSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena)
-  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
+TrainerSpec::TrainerSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
+                         bool is_message_owned)
+  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
   _extensions_(arena),
   input_(arena),
   accept_language_(arena),
   control_symbols_(arena),
   user_defined_symbols_(arena) {
   SharedCtor();
-  RegisterArenaDtor(arena);
+  if (!is_message_owned) {
+    RegisterArenaDtor(arena);
+  }
   // @@protoc_insertion_point(arena_constructor:sentencepiece.TrainerSpec)
 }
 TrainerSpec::TrainerSpec(const TrainerSpec& from)
@@ -419,42 +438,42 @@ TrainerSpec::TrainerSpec(const TrainerSpec& from)
   model_prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
   if (from._internal_has_model_prefix()) {
     model_prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_model_prefix(), 
-      GetArena());
+      GetArenaForAllocation());
   }
   input_format_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
   if (from._internal_has_input_format()) {
     input_format_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_input_format(), 
-      GetArena());
+      GetArenaForAllocation());
   }
   required_chars_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
   if (from._internal_has_required_chars()) {
     required_chars_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_required_chars(), 
-      GetArena());
+      GetArenaForAllocation());
   }
   unk_surface_.UnsafeSetDefault(nullptr);
   if (from._internal_has_unk_surface()) {
     unk_surface_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, from._internal_unk_surface(), 
-      GetArena());
+      GetArenaForAllocation());
   }
   unk_piece_.UnsafeSetDefault(nullptr);
   if (from._internal_has_unk_piece()) {
     unk_piece_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, from._internal_unk_piece(), 
-      GetArena());
+      GetArenaForAllocation());
   }
   bos_piece_.UnsafeSetDefault(nullptr);
   if (from._internal_has_bos_piece()) {
     bos_piece_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, from._internal_bos_piece(), 
-      GetArena());
+      GetArenaForAllocation());
   }
   eos_piece_.UnsafeSetDefault(nullptr);
   if (from._internal_has_eos_piece()) {
     eos_piece_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, from._internal_eos_piece(), 
-      GetArena());
+      GetArenaForAllocation());
   }
   pad_piece_.UnsafeSetDefault(nullptr);
   if (from._internal_has_pad_piece()) {
     pad_piece_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, from._internal_pad_piece(), 
-      GetArena());
+      GetArenaForAllocation());
   }
   ::memcpy(&self_test_sample_size_, &from.self_test_sample_size_,
     static_cast<size_t>(reinterpret_cast<char*>(&pad_id_) -
@@ -463,47 +482,47 @@ TrainerSpec::TrainerSpec(const TrainerSpec& from)
 }
 
 void TrainerSpec::SharedCtor() {
-  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrainerSpec_sentencepiece_5fmodel_2eproto.base);
-  model_prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
-  input_format_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
-  required_chars_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
-  unk_surface_.UnsafeSetDefault(nullptr);
-  unk_piece_.UnsafeSetDefault(nullptr);
-  bos_piece_.UnsafeSetDefault(nullptr);
-  eos_piece_.UnsafeSetDefault(nullptr);
-  pad_piece_.UnsafeSetDefault(nullptr);
-  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
-      reinterpret_cast<char*>(&self_test_sample_size_) - reinterpret_cast<char*>(this)),
-      0, static_cast<size_t>(reinterpret_cast<char*>(&train_extremely_large_corpus_) -
-      reinterpret_cast<char*>(&self_test_sample_size_)) + sizeof(train_extremely_large_corpus_));
-  model_type_ = 1;
-  vocab_size_ = 8000;
-  character_coverage_ = 0.9995f;
-  seed_sentencepiece_size_ = 1000000;
-  shrinking_factor_ = 0.75f;
-  num_threads_ = 16;
-  num_sub_iterations_ = 2;
-  max_sentence_length_ = 4192;
-  max_sentencepiece_length_ = 16;
-  shuffle_input_sentence_ = true;
-  split_by_unicode_script_ = true;
-  split_by_number_ = true;
-  split_by_whitespace_ = true;
-  vocabulary_output_piece_score_ = true;
-  hard_vocab_limit_ = true;
-  bos_id_ = 1;
-  eos_id_ = 2;
-  pad_id_ = -1;
+model_prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
+input_format_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
+required_chars_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
+unk_surface_.UnsafeSetDefault(nullptr);
+unk_piece_.UnsafeSetDefault(nullptr);
+bos_piece_.UnsafeSetDefault(nullptr);
+eos_piece_.UnsafeSetDefault(nullptr);
+pad_piece_.UnsafeSetDefault(nullptr);
+::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
+    reinterpret_cast<char*>(&self_test_sample_size_) - reinterpret_cast<char*>(this)),
+    0, static_cast<size_t>(reinterpret_cast<char*>(&train_extremely_large_corpus_) -
+    reinterpret_cast<char*>(&self_test_sample_size_)) + sizeof(train_extremely_large_corpus_));
+model_type_ = 1;
+vocab_size_ = 8000;
+character_coverage_ = 0.9995f;
+seed_sentencepiece_size_ = 1000000;
+shrinking_factor_ = 0.75f;
+num_threads_ = 16;
+num_sub_iterations_ = 2;
+max_sentence_length_ = 4192;
+max_sentencepiece_length_ = 16;
+shuffle_input_sentence_ = true;
+split_by_unicode_script_ = true;
+split_by_number_ = true;
+split_by_whitespace_ = true;
+vocabulary_output_piece_score_ = true;
+hard_vocab_limit_ = true;
+bos_id_ = 1;
+eos_id_ = 2;
+pad_id_ = -1;
 }
 
 TrainerSpec::~TrainerSpec() {
   // @@protoc_insertion_point(destructor:sentencepiece.TrainerSpec)
+  if (GetArenaForAllocation() != nullptr) return;
   SharedDtor();
   _internal_metadata_.Delete<std::string>();
 }
 
-void TrainerSpec::SharedDtor() {
-  GOOGLE_DCHECK(GetArena() == nullptr);
+inline void TrainerSpec::SharedDtor() {
+  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
   model_prefix_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
   input_format_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
   required_chars_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
@@ -523,11 +542,6 @@ void TrainerSpec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
 void TrainerSpec::SetCachedSize(int size) const {
   _cached_size_.Set(size);
 }
-const TrainerSpec& TrainerSpec::default_instance() {
-  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrainerSpec_sentencepiece_5fmodel_2eproto.base);
-  return *internal_default_instance();
-}
-
 
 void TrainerSpec::Clear() {
 // @@protoc_insertion_point(message_clear_start:sentencepiece.TrainerSpec)
@@ -552,19 +566,19 @@ void TrainerSpec::Clear() {
       required_chars_.ClearNonDefaultToEmpty();
     }
     if (cached_has_bits & 0x00000008u) {
-      unk_surface_.ClearToDefault(::sentencepiece::TrainerSpec::_i_give_permission_to_break_this_code_default_unk_surface_, GetArena());
+      unk_surface_.ClearToDefault(::sentencepiece::TrainerSpec::_i_give_permission_to_break_this_code_default_unk_surface_, GetArenaForAllocation());
        }
     if (cached_has_bits & 0x00000010u) {
-      unk_piece_.ClearToDefault(::sentencepiece::TrainerSpec::_i_give_permission_to_break_this_code_default_unk_piece_, GetArena());
+      unk_piece_.ClearToDefault(::sentencepiece::TrainerSpec::_i_give_permission_to_break_this_code_default_unk_piece_, GetArenaForAllocation());
        }
     if (cached_has_bits & 0x00000020u) {
-      bos_piece_.ClearToDefault(::sentencepiece::TrainerSpec::_i_give_permission_to_break_this_code_default_bos_piece_, GetArena());
+      bos_piece_.ClearToDefault(::sentencepiece::TrainerSpec::_i_give_permission_to_break_this_code_default_bos_piece_, GetArenaForAllocation());
        }
     if (cached_has_bits & 0x00000040u) {
-      eos_piece_.ClearToDefault(::sentencepiece::TrainerSpec::_i_give_permission_to_break_this_code_default_eos_piece_, GetArena());
+      eos_piece_.ClearToDefault(::sentencepiece::TrainerSpec::_i_give_permission_to_break_this_code_default_eos_piece_, GetArenaForAllocation());
        }
     if (cached_has_bits & 0x00000080u) {
-      pad_piece_.ClearToDefault(::sentencepiece::TrainerSpec::_i_give_permission_to_break_this_code_default_pad_piece_, GetArena());
+      pad_piece_.ClearToDefault(::sentencepiece::TrainerSpec::_i_give_permission_to_break_this_code_default_pad_piece_, GetArenaForAllocation());
        }
   }
   if (cached_has_bits & 0x0000ff00u) {
@@ -609,7 +623,6 @@ const char* TrainerSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID
   while (!ctx->Done(&ptr)) {
     ::PROTOBUF_NAMESPACE_ID::uint32 tag;
     ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
-    CHK_(ptr);
     switch (tag >> 3) {
       // repeated string input = 1;
       case 1:
@@ -622,7 +635,8 @@ const char* TrainerSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID
             CHK_(ptr);
             if (!ctx->DataAvailable(ptr)) break;
           } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
-        } else goto handle_unusual;
+        } else
+          goto handle_unusual;
         continue;
       // optional string model_prefix = 2;
       case 2:
@@ -630,7 +644,8 @@ const char* TrainerSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID
           auto str = _internal_mutable_model_prefix();
           ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
           CHK_(ptr);
-        } else goto handle_unusual;
+        } else
+          goto handle_unusual;
         continue;
       // optional .sentencepiece.TrainerSpec.ModelType model_type = 3 [default = UNIGRAM];
       case 3:
@@ -642,7 +657,8 @@ const char* TrainerSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID
           } else {
             ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
           }
-        } else goto handle_unusual;
+        } else
+          goto handle_unusual;
         continue;
       // optional int32 vocab_size = 4 [default = 8000];
       case 4:
@@ -650,7 +666,8 @@ const char* TrainerSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID
           _Internal::set_has_vocab_size(&_has_bits_);
           vocab_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
           CHK_(ptr);
-        } else goto handle_unusual;
+        } else
+          goto handle_unusual;
         continue;
       // repeated string accept_language = 5;
       case 5:
@@ -663,7 +680,8 @@ const char* TrainerSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID
             CHK_(ptr);
             if (!ctx->DataAvailable(ptr)) break;
           } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
-        } else goto handle_unusual;
+        } else
+          goto handle_unusual;
         continue;
       // optional int32 self_test_sample_size = 6 [default = 0];
       case 6:
@@ -671,7 +689,8 @@ const char* TrainerSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID
           _Internal::set_has_self_test_sample_size(&_has_bits_);
           self_test_sample_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
           CHK_(ptr);
-        } else goto handle_unusual;
+        } else
+          goto handle_unusual;
         continue;
       // optional string input_format = 7;
       case 7:
@@ -679,7 +698,8 @@ const char* TrainerSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID
           auto str = _internal_mutable_input_format();
           ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
           CHK_(ptr);
-        } else goto handle_unusual;
+        } else
+          goto handle_unusual;
         continue;
       // optional float character_coverage = 10 [default = 0.9995];
       case 10:
@@ -687,7 +707,8 @@ const char* TrainerSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID
           _Internal::set_has_character_coverage(&_has_bits_);
           character_coverage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
           ptr += sizeof(float);
-        } else goto handle_unusual;
+        } else
+          goto handle_unusual;
         continue;
       // optional uint64 input_sentence_size = 11 [default = 0];
       case 11:
@@ -695,7 +716,8 @@ const char* TrainerSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID
           _Internal::set_has_input_sentence_size(&_has_bits_);
           input_sentence_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
           CHK_(ptr);
-        } else goto handle_unusual;
+        } else
+          goto handle_unusual;
         continue;
       // optional int32 mining_sentence_size = 12 [deprecated = true];
       case 12:
@@ -703,7 +725,8 @@ const char* TrainerSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID
           _Internal::set_has_mining_sentence_size(&_has_bits_);
           mining_sentence_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
           CHK_(ptr);
-        } else goto handle_unusual;
+        } else
+          goto handle_unusual;
         continue;
       // optional int32 training_sentence_size = 13 [deprecated = true];
       case 13:
@@ -711,7 +734,8 @@ const char* TrainerSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID
           _Internal::set_has_training_sentence_size(&_has_bits_);
           training_sentence_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
           CHK_(ptr);
-        } else goto handle_unusual;
+        } else
+          goto handle_unusual;
         continue;
       // optional int32 seed_sentencepiece_size = 14 [default = 1000000];
       case 14:
@@ -719,7 +743,8 @@ const char* TrainerSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID
           _Internal::set_has_seed_sentencepiece_size(&_has_bits_);
           seed_sentencepiece_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
           CHK_(ptr);
-        } else goto handle_unusual;
+        } else
+          goto handle_unusual;
         continue;
       // optional float shrinking_factor = 15 [default = 0.75];
       case 15:
@@ -727,7 +752,8 @@ const char* TrainerSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID
           _Internal::set_has_shrinking_factor(&_has_bits_);
           shrinking_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
           ptr += sizeof(float);
-        } else goto handle_unusual;
+        } else
+          goto handle_unusual;
         continue;
       // optional int32 num_threads = 16 [default = 16];
       case 16:
@@ -735,7 +761,8 @@ const char* TrainerSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID
           _Internal::set_has_num_threads(&_has_bits_);
           num_threads_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
           CHK_(ptr);
-        } else goto handle_unusual;
+        } else
+          goto handle_unusual;
         continue;
       // optional int32 num_sub_iterations = 17 [default = 2];
       case 17:
@@ -743,7 +770,8 @@ const char* TrainerSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID
           _Internal::set_has_num_sub_iterations(&_has_bits_);
           num_sub_iterations_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
           CHK_(ptr);
-        } else goto handle_unusual;
+        } else
+          goto handle_unusual;
         continue;
       // optional int32 max_sentence_length = 18 [default = 4192];
       case 18:
@@ -751,7 +779,8 @@ const char* TrainerSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID
           _Internal::set_has_max_sentence_length(&_has_bits_);
           max_sentence_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
           CHK_(ptr);
-        } else goto handle_unusual;
+        } else
+          goto handle_unusual;
         continue;
       // optional bool shuffle_input_sentence = 19 [default = true];
       case 19:
@@ -759,7 +788,8 @@ const char* TrainerSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID
           _Internal::set_has_shuffle_input_sentence(&_has_bits_);
           shuffle_input_sentence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
           CHK_(ptr);
-        } else goto handle_unusual;
+        } else
+          goto handle_unusual;
         continue;
       // optional int32 max_sentencepiece_length = 20 [default = 16];
       case 20:
@@ -767,7 +797,8 @@ const char* TrainerSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID
           _Internal::set_has_max_sentencepiece_length(&_has_bits_);
           max_sentencepiece_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
           CHK_(ptr);
-        } else goto handle_unusual;
+        } else
+          goto handle_unusual;
         continue;
       // optional bool split_by_unicode_script = 21 [default = true];
       case 21:
@@ -775,7 +806,8 @@ const char* TrainerSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID
           _Internal::set_has_split_by_unicode_script(&_has_bits_);
           split_by_unicode_script_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
           CHK_(ptr);
-        } else goto handle_unusual;
+        } else
+          goto handle_unusual;
         continue;
       // optional bool split_by_whitespace = 22 [default = true];
       case 22:
@@ -783,7 +815,8 @@ const char* TrainerSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID
           _Internal::set_has_split_by_whitespace(&_has_bits_);
           split_by_whitespace_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
           CHK_(ptr);
-        } else goto handle_unusual;
+        } else
+          goto handle_unusual;
         continue;
       // optional bool split_by_number = 23 [default = true];
       case 23:
@@ -791,7 +824,8 @@ const char* TrainerSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID
           _Internal::set_has_split_by_number(&_has_bits_);
           split_by_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
           CHK_(ptr);
-        } else goto handle_unusual;
+        } else
+          goto handle_unusual;
         continue;
       // optional bool treat_whitespace_as_suffix = 24 [default = false];
       case 24:
@@ -799,7 +833,8 @@ const char* TrainerSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID
           _Internal::set_has_treat_whitespace_as_suffix(&_has_bits_);
           treat_whitespace_as_suffix_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
           CHK_(ptr);
-        } else goto handle_unusual;
+        } else
+          goto handle_unusual;
         continue;
       // optional bool split_digits = 25 [default = false];
       case 25:
@@ -807,7 +842,8 @@ const char* TrainerSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID
           _Internal::set_has_split_digits(&_has_bits_);
           split_digits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
           CHK_(ptr);
-        } else goto handle_unusual;
+        } else
+          goto handle_unusual;
         continue;
       // optional bool allow_whitespace_only_pieces = 26 [default = false];
       case 26:
@@ -815,7 +851,8 @@ const char* TrainerSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID
           _Internal::set_has_allow_whitespace_only_pieces(&_has_bits_);
           allow_whitespace_only_pieces_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
           CHK_(ptr);
-        } else goto handle_unusual;
+        } else
+          goto handle_unusual;
         continue;
       // repeated string control_symbols = 30;
       case 30:
@@ -828,7 +865,8 @@ const char* TrainerSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID
             CHK_(ptr);
             if (!ctx->DataAvailable(ptr)) break;
           } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<242>(ptr));
-        } else goto handle_unusual;
+        } else
+          goto handle_unusual;
         continue;
       // repeated string user_defined_symbols = 31;
       case 31:
@@ -841,7 +879,8 @@ const char* TrainerSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID
             CHK_(ptr);
             if (!ctx->DataAvailable(ptr)) break;
           } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<250>(ptr));
-        } else goto handle_unusual;
+        } else
+          goto handle_unusual;
         continue;
       // optional bool vocabulary_output_piece_score = 32 [default = true];
       case 32:
@@ -849,7 +888,8 @@ const char* TrainerSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID
           _Internal::set_has_vocabulary_output_piece_score(&_has_bits_);
           vocabulary_output_piece_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
           CHK_(ptr);
-        } else goto handle_unusual;
+        } else
+          goto handle_unusual;
         continue;
       // optional bool hard_vocab_limit = 33 [default = true];
       case 33:
@@ -857,7 +897,8 @@ const char* TrainerSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID
           _Internal::set_has_hard_vocab_limit(&_has_bits_);
           hard_vocab_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
           CHK_(ptr);
-        } else goto handle_unusual;
+        } else
+          goto handle_unusual;
         continue;
       // optional bool use_all_vocab = 34 [default = false];
       case 34:
@@ -865,7 +906,8 @@ const char* TrainerSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID
           _Internal::set_has_use_all_vocab(&_has_bits_);
           use_all_vocab_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
           CHK_(ptr);
-        } else goto handle_unusual;
+        } else
+          goto handle_unusual;
         continue;
       // optional bool byte_fallback = 35 [default = false];
       case 35:
@@ -873,7 +915,8 @@ const char* TrainerSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID
           _Internal::set_has_byte_fallback(&_has_bits_);
           byte_fallback_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
           CHK_(ptr);
-        } else goto handle_unusual;
+        } else
+          goto handle_unusual;
         continue;
       // optional string required_chars = 36;
       case 36:
@@ -881,7 +924,8 @@ const char* TrainerSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID
           auto str = _internal_mutable_required_chars();
           ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
           CHK_(ptr);
-        } else goto handle_unusual;
+        } else
+          goto handle_unusual;
         continue;
       // optional int32 unk_id = 40 [default = 0];
       case 40:
@@ -889,7 +933,8 @@ const char* TrainerSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID
           _Internal::set_has_unk_id(&_has_bits_);
           unk_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
           CHK_(ptr);
-        } else goto handle_unusual;
+        } else
+          goto handle_unusual;
         continue;
       // optional int32 bos_id = 41 [default = 1];
       case 41:
@@ -897,7 +942,8 @@ const char* TrainerSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID
           _Internal::set_has_bos_id(&_has_bits_);
           bos_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
           CHK_(ptr);
-        } else goto handle_unusual;
+        } else
+          goto handle_unusual;
         continue;
       // optional int32 eos_id = 42 [default = 2];
       case 42:
@@ -905,7 +951,8 @@ const char* TrainerSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID
           _Internal::set_has_eos_id(&_has_bits_);
           eos_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
           CHK_(ptr);
-        } else goto handle_unusual;
+        } else
+          goto handle_unusual;
         continue;
       // optional int32 pad_id = 43 [default = -1];
       case 43:
@@ -913,7 +960,8 @@ const char* TrainerSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID
           _Internal::set_has_pad_id(&_has_bits_);
           pad_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
           CHK_(ptr);
-        } else goto handle_unusual;
+        } else
+          goto handle_unusual;
         continue;
       // optional string unk_surface = 44 [default = " \342\201\207 "];
       case 44:
@@ -921,7 +969,8 @@ const char* TrainerSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID
           auto str = _internal_mutable_unk_surface();
           ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
           CHK_(ptr);
-        } else goto handle_unusual;
+        } else
+          goto handle_unusual;
         continue;
       // optional string unk_piece = 45 [default = "<unk>"];
       case 45:
@@ -929,7 +978,8 @@ const char* TrainerSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID
           auto str = _internal_mutable_unk_piece();
           ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
           CHK_(ptr);
-        } else goto handle_unusual;
+        } else
+          goto handle_unusual;
         continue;
       // optional string bos_piece = 46 [default = "<s>"];
       case 46:
@@ -937,7 +987,8 @@ const char* TrainerSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID
           auto str = _internal_mutable_bos_piece();
           ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
           CHK_(ptr);
-        } else goto handle_unusual;
+        } else
+          goto handle_unusual;
         continue;
       // optional string eos_piece = 47 [default = "</s>"];
       case 47:
@@ -945,7 +996,8 @@ const char* TrainerSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID
           auto str = _internal_mutable_eos_piece();
           ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
           CHK_(ptr);
-        } else goto handle_unusual;
+        } else
+          goto handle_unusual;
         continue;
       // optional string pad_piece = 48 [default = "<pad>"];
       case 48:
@@ -953,7 +1005,8 @@ const char* TrainerSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID
           auto str = _internal_mutable_pad_piece();
           ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
           CHK_(ptr);
-        } else goto handle_unusual;
+        } else
+          goto handle_unusual;
         continue;
       // optional bool train_extremely_large_corpus = 49 [default = false];
       case 49:
@@ -961,33 +1014,34 @@ const char* TrainerSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID
           _Internal::set_has_train_extremely_large_corpus(&_has_bits_);
           train_extremely_large_corpus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
           CHK_(ptr);
-        } else goto handle_unusual;
-        continue;
-      default: {
-      handle_unusual:
-        if ((tag & 7) == 4 || tag == 0) {
-          ctx->SetLastTag(tag);
-          goto success;
-        }
-      if ((1600u <= tag)) {
-        ptr = _extensions_.ParseField(tag, ptr,
-            internal_default_instance(), &_internal_metadata_, ctx);
-        CHK_(ptr != nullptr);
+        } else
+          goto handle_unusual;
         continue;
-      }
-        ptr = UnknownFieldParse(tag,
-            _internal_metadata_.mutable_unknown_fields<std::string>(),
-            ptr, ctx);
-        CHK_(ptr != nullptr);
-        continue;
-      }
+      default:
+        goto handle_unusual;
     }  // switch
+  handle_unusual:
+    if ((tag == 0) || ((tag & 7) == 4)) {
+      CHK_(ptr);
+      ctx->SetLastTag(tag);
+      goto message_done;
+    }
+    if ((1600u <= tag)) {
+      ptr = _extensions_.ParseField(tag, ptr, internal_default_instance(), &_internal_metadata_, ctx);
+      CHK_(ptr != nullptr);
+      continue;
+    }
+    ptr = UnknownFieldParse(
+        tag,
+        _internal_metadata_.mutable_unknown_fields<std::string>(),
+        ptr, ctx);
+    CHK_(ptr != nullptr);
   }  // while
-success:
+message_done:
   return ptr;
 failure:
   ptr = nullptr;
-  goto success;
+  goto message_done;
 #undef CHK_
 }
 
@@ -1251,7 +1305,7 @@ failure:
 
   // Extension range [200, 536870912)
   target = _extensions_._InternalSerialize(
-      200, 536870912, target, stream);
+  internal_default_instance(), 200, 536870912, target, stream);
 
   if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
     target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
@@ -1365,30 +1419,22 @@ size_t TrainerSpec::ByteSizeLong() const {
   if (cached_has_bits & 0x0000ff00u) {
     // optional int32 self_test_sample_size = 6 [default = 0];
     if (cached_has_bits & 0x00000100u) {
-      total_size += 1 +
-        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
-          this->_internal_self_test_sample_size());
+      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_self_test_sample_size());
     }
 
     // optional int32 mining_sentence_size = 12 [deprecated = true];
     if (cached_has_bits & 0x00000200u) {
-      total_size += 1 +
-        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
-          this->_internal_mining_sentence_size());
+      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_mining_sentence_size());
     }
 
     // optional uint64 input_sentence_size = 11 [default = 0];
     if (cached_has_bits & 0x00000400u) {
-      total_size += 1 +
-        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
-          this->_internal_input_sentence_size());
+      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_input_sentence_size());
     }
 
     // optional int32 training_sentence_size = 13 [deprecated = true];
     if (cached_has_bits & 0x00000800u) {
-      total_size += 1 +
-        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
-          this->_internal_training_sentence_size());
+      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_training_sentence_size());
     }
 
     // optional bool treat_whitespace_as_suffix = 24 [default = false];
@@ -1438,9 +1484,7 @@ size_t TrainerSpec::ByteSizeLong() const {
 
     // optional int32 vocab_size = 4 [default = 8000];
     if (cached_has_bits & 0x00100000u) {
-      total_size += 1 +
-        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
-          this->_internal_vocab_size());
+      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_vocab_size());
     }
 
     // optional float character_coverage = 10 [default = 0.9995];
@@ -1450,9 +1494,7 @@ size_t TrainerSpec::ByteSizeLong() const {
 
     // optional int32 seed_sentencepiece_size = 14 [default = 1000000];
     if (cached_has_bits & 0x00400000u) {
-      total_size += 1 +
-        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
-          this->_internal_seed_sentencepiece_size());
+      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_seed_sentencepiece_size());
     }
 
     // optional float shrinking_factor = 15 [default = 0.75];
@@ -1562,8 +1604,6 @@ void TrainerSpec::CheckTypeAndMergeFrom(
 void TrainerSpec::MergeFrom(const TrainerSpec& from) {
 // @@protoc_insertion_point(class_specific_merge_from_start:sentencepiece.TrainerSpec)
   GOOGLE_DCHECK_NE(&from, this);
-  _extensions_.MergeFrom(from._extensions_);
-  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
   ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
   (void) cached_has_bits;
 
@@ -1698,6 +1738,8 @@ void TrainerSpec::MergeFrom(const TrainerSpec& from) {
     }
     _has_bits_[1] |= cached_has_bits;
   }
+  _extensions_.MergeFrom(from._extensions_);
+  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
 }
 
 void TrainerSpec::CopyFrom(const TrainerSpec& from) {
@@ -1717,22 +1759,56 @@ bool TrainerSpec::IsInitialized() const {
 
 void TrainerSpec::InternalSwap(TrainerSpec* other) {
   using std::swap;
-  _extensions_.Swap(&other->_extensions_);
-  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
+  _extensions_.InternalSwap(&other->_extensions_);
+  auto* lhs_arena = GetArenaForAllocation();
+  auto* rhs_arena = other->GetArenaForAllocation();
+  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
   swap(_has_bits_[0], other->_has_bits_[0]);
   swap(_has_bits_[1], other->_has_bits_[1]);
   input_.InternalSwap(&other->input_);
   accept_language_.InternalSwap(&other->accept_language_);
   control_symbols_.InternalSwap(&other->control_symbols_);
   user_defined_symbols_.InternalSwap(&other->user_defined_symbols_);
-  model_prefix_.Swap(&other->model_prefix_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
-  input_format_.Swap(&other->input_format_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
-  required_chars_.Swap(&other->required_chars_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
-  unk_surface_.Swap(&other->unk_surface_, nullptr, GetArena());
-  unk_piece_.Swap(&other->unk_piece_, nullptr, GetArena());
-  bos_piece_.Swap(&other->bos_piece_, nullptr, GetArena());
-  eos_piece_.Swap(&other->eos_piece_, nullptr, GetArena());
-  pad_piece_.Swap(&other->pad_piece_, nullptr, GetArena());
+  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
+      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
+      &model_prefix_, lhs_arena,
+      &other->model_prefix_, rhs_arena
+  );
+  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
+      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
+      &input_format_, lhs_arena,
+      &other->input_format_, rhs_arena
+  );
+  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
+      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
+      &required_chars_, lhs_arena,
+      &other->required_chars_, rhs_arena
+  );
+  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
+      nullptr,
+      &unk_surface_, lhs_arena,
+      &other->unk_surface_, rhs_arena
+  );
+  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
+      nullptr,
+      &unk_piece_, lhs_arena,
+      &other->unk_piece_, rhs_arena
+  );
+  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
+      nullptr,
+      &bos_piece_, lhs_arena,
+      &other->bos_piece_, rhs_arena
+  );
+  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
+      nullptr,
+      &eos_piece_, lhs_arena,
+      &other->eos_piece_, rhs_arena
+  );
+  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
+      nullptr,
+      &pad_piece_, lhs_arena,
+      &other->pad_piece_, rhs_arena
+  );
   ::PROTOBUF_NAMESPACE_ID::internal::memswap<
       PROTOBUF_FIELD_OFFSET(TrainerSpec, train_extremely_large_corpus_)
       + sizeof(TrainerSpec::train_extremely_large_corpus_)
@@ -1789,11 +1865,14 @@ class NormalizerSpec::_Internal {
   }
 };
 
-NormalizerSpec::NormalizerSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena)
-  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
+NormalizerSpec::NormalizerSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
+                         bool is_message_owned)
+  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
   _extensions_(arena) {
   SharedCtor();
-  RegisterArenaDtor(arena);
+  if (!is_message_owned) {
+    RegisterArenaDtor(arena);
+  }
   // @@protoc_insertion_point(arena_constructor:sentencepiece.NormalizerSpec)
 }
 NormalizerSpec::NormalizerSpec(const NormalizerSpec& from)
@@ -1804,17 +1883,17 @@ NormalizerSpec::NormalizerSpec(const NormalizerSpec& from)
   name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
   if (from._internal_has_name()) {
     name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
-      GetArena());
+      GetArenaForAllocation());
   }
   precompiled_charsmap_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
   if (from._internal_has_precompiled_charsmap()) {
     precompiled_charsmap_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_precompiled_charsmap(), 
-      GetArena());
+      GetArenaForAllocation());
   }
   normalization_rule_tsv_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
   if (from._internal_has_normalization_rule_tsv()) {
     normalization_rule_tsv_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_normalization_rule_tsv(), 
-      GetArena());
+      GetArenaForAllocation());
   }
   ::memcpy(&add_dummy_prefix_, &from.add_dummy_prefix_,
     static_cast<size_t>(reinterpret_cast<char*>(&escape_whitespaces_) -
@@ -1823,23 +1902,23 @@ NormalizerSpec::NormalizerSpec(const NormalizerSpec& from)
 }
 
 void NormalizerSpec::SharedCtor() {
-  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NormalizerSpec_sentencepiece_5fmodel_2eproto.base);
-  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
-  precompiled_charsmap_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
-  normalization_rule_tsv_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
-  add_dummy_prefix_ = true;
-  remove_extra_whitespaces_ = true;
-  escape_whitespaces_ = true;
+name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
+precompiled_charsmap_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
+normalization_rule_tsv_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
+add_dummy_prefix_ = true;
+remove_extra_whitespaces_ = true;
+escape_whitespaces_ = true;
 }
 
 NormalizerSpec::~NormalizerSpec() {
   // @@protoc_insertion_point(destructor:sentencepiece.NormalizerSpec)
+  if (GetArenaForAllocation() != nullptr) return;
   SharedDtor();
   _internal_metadata_.Delete<std::string>();
 }
 
-void NormalizerSpec::SharedDtor() {
-  GOOGLE_DCHECK(GetArena() == nullptr);
+inline void NormalizerSpec::SharedDtor() {
+  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
   name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
   precompiled_charsmap_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
   normalization_rule_tsv_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
@@ -1854,11 +1933,6 @@ void NormalizerSpec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
 void NormalizerSpec::SetCachedSize(int size) const {
   _cached_size_.Set(size);
 }
-const NormalizerSpec& NormalizerSpec::default_instance() {
-  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NormalizerSpec_sentencepiece_5fmodel_2eproto.base);
-  return *internal_default_instance();
-}
-
 
 void NormalizerSpec::Clear() {
 // @@protoc_insertion_point(message_clear_start:sentencepiece.NormalizerSpec)
@@ -1892,7 +1966,6 @@ const char* NormalizerSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE
   while (!ctx->Done(&ptr)) {
     ::PROTOBUF_NAMESPACE_ID::uint32 tag;
     ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
-    CHK_(ptr);
     switch (tag >> 3) {
       // optional string name = 1;
       case 1:
@@ -1900,7 +1973,8 @@ const char* NormalizerSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE
           auto str = _internal_mutable_name();
           ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
           CHK_(ptr);
-        } else goto handle_unusual;
+        } else
+          goto handle_unusual;
         continue;
       // optional bytes precompiled_charsmap = 2;
       case 2:
@@ -1908,7 +1982,8 @@ const char* NormalizerSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE
           auto str = _internal_mutable_precompiled_charsmap();
           ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
           CHK_(ptr);
-        } else goto handle_unusual;
+        } else
+          goto handle_unusual;
         continue;
       // optional bool add_dummy_prefix = 3 [default = true];
       case 3:
@@ -1916,7 +1991,8 @@ const char* NormalizerSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE
           _Internal::set_has_add_dummy_prefix(&has_bits);
           add_dummy_prefix_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
           CHK_(ptr);
-        } else goto handle_unusual;
+        } else
+          goto handle_unusual;
         continue;
       // optional bool remove_extra_whitespaces = 4 [default = true];
       case 4:
@@ -1924,7 +2000,8 @@ const char* NormalizerSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE
           _Internal::set_has_remove_extra_whitespaces(&has_bits);
           remove_extra_whitespaces_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
           CHK_(ptr);
-        } else goto handle_unusual;
+        } else
+          goto handle_unusual;
         continue;
       // optional bool escape_whitespaces = 5 [default = true];
       case 5:
@@ -1932,7 +2009,8 @@ const char* NormalizerSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE
           _Internal::set_has_escape_whitespaces(&has_bits);
           escape_whitespaces_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
           CHK_(ptr);
-        } else goto handle_unusual;
+        } else
+          goto handle_unusual;
         continue;
       // optional string normalization_rule_tsv = 6;
       case 6:
@@ -1940,34 +2018,35 @@ const char* NormalizerSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE
           auto str = _internal_mutable_normalization_rule_tsv();
           ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
           CHK_(ptr);
-        } else goto handle_unusual;
-        continue;
-      default: {
-      handle_unusual:
-        if ((tag & 7) == 4 || tag == 0) {
-          ctx->SetLastTag(tag);
-          goto success;
-        }
-      if ((1600u <= tag)) {
-        ptr = _extensions_.ParseField(tag, ptr,
-            internal_default_instance(), &_internal_metadata_, ctx);
-        CHK_(ptr != nullptr);
-        continue;
-      }
-        ptr = UnknownFieldParse(tag,
-            _internal_metadata_.mutable_unknown_fields<std::string>(),
-            ptr, ctx);
-        CHK_(ptr != nullptr);
+        } else
+          goto handle_unusual;
         continue;
-      }
+      default:
+        goto handle_unusual;
     }  // switch
+  handle_unusual:
+    if ((tag == 0) || ((tag & 7) == 4)) {
+      CHK_(ptr);
+      ctx->SetLastTag(tag);
+      goto message_done;
+    }
+    if ((1600u <= tag)) {
+      ptr = _extensions_.ParseField(tag, ptr, internal_default_instance(), &_internal_metadata_, ctx);
+      CHK_(ptr != nullptr);
+      continue;
+    }
+    ptr = UnknownFieldParse(
+        tag,
+        _internal_metadata_.mutable_unknown_fields<std::string>(),
+        ptr, ctx);
+    CHK_(ptr != nullptr);
   }  // while
-success:
+message_done:
   _has_bits_.Or(has_bits);
   return ptr;
 failure:
   ptr = nullptr;
-  goto success;
+  goto message_done;
 #undef CHK_
 }
 
@@ -2016,7 +2095,7 @@ failure:
 
   // Extension range [200, 536870912)
   target = _extensions_._InternalSerialize(
-      200, 536870912, target, stream);
+  internal_default_instance(), 200, 536870912, target, stream);
 
   if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
     target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
@@ -2092,8 +2171,6 @@ void NormalizerSpec::CheckTypeAndMergeFrom(
 void NormalizerSpec::MergeFrom(const NormalizerSpec& from) {
 // @@protoc_insertion_point(class_specific_merge_from_start:sentencepiece.NormalizerSpec)
   GOOGLE_DCHECK_NE(&from, this);
-  _extensions_.MergeFrom(from._extensions_);
-  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
   ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
   (void) cached_has_bits;
 
@@ -2119,6 +2196,8 @@ void NormalizerSpec::MergeFrom(const NormalizerSpec& from) {
     }
     _has_bits_[0] |= cached_has_bits;
   }
+  _extensions_.MergeFrom(from._extensions_);
+  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
 }
 
 void NormalizerSpec::CopyFrom(const NormalizerSpec& from) {
@@ -2138,12 +2217,26 @@ bool NormalizerSpec::IsInitialized() const {
 
 void NormalizerSpec::InternalSwap(NormalizerSpec* other) {
   using std::swap;
-  _extensions_.Swap(&other->_extensions_);
-  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
+  _extensions_.InternalSwap(&other->_extensions_);
+  auto* lhs_arena = GetArenaForAllocation();
+  auto* rhs_arena = other->GetArenaForAllocation();
+  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
   swap(_has_bits_[0], other->_has_bits_[0]);
-  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
-  precompiled_charsmap_.Swap(&other->precompiled_charsmap_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
-  normalization_rule_tsv_.Swap(&other->normalization_rule_tsv_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
+  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
+      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
+      &name_, lhs_arena,
+      &other->name_, rhs_arena
+  );
+  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
+      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
+      &precompiled_charsmap_, lhs_arena,
+      &other->precompiled_charsmap_, rhs_arena
+  );
+  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
+      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
+      &normalization_rule_tsv_, lhs_arena,
+      &other->normalization_rule_tsv_, rhs_arena
+  );
   swap(add_dummy_prefix_, other->add_dummy_prefix_);
   swap(remove_extra_whitespaces_, other->remove_extra_whitespaces_);
   swap(escape_whitespaces_, other->escape_whitespaces_);
@@ -2167,10 +2260,13 @@ class SelfTestData_Sample::_Internal {
   }
 };
 
-SelfTestData_Sample::SelfTestData_Sample(::PROTOBUF_NAMESPACE_ID::Arena* arena)
-  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
+SelfTestData_Sample::SelfTestData_Sample(::PROTOBUF_NAMESPACE_ID::Arena* arena,
+                         bool is_message_owned)
+  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
   SharedCtor();
-  RegisterArenaDtor(arena);
+  if (!is_message_owned) {
+    RegisterArenaDtor(arena);
+  }
   // @@protoc_insertion_point(arena_constructor:sentencepiece.SelfTestData.Sample)
 }
 SelfTestData_Sample::SelfTestData_Sample(const SelfTestData_Sample& from)
@@ -2180,30 +2276,30 @@ SelfTestData_Sample::SelfTestData_Sample(const SelfTestData_Sample& from)
   input_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
   if (from._internal_has_input()) {
     input_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_input(), 
-      GetArena());
+      GetArenaForAllocation());
   }
   expected_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
   if (from._internal_has_expected()) {
     expected_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_expected(), 
-      GetArena());
+      GetArenaForAllocation());
   }
   // @@protoc_insertion_point(copy_constructor:sentencepiece.SelfTestData.Sample)
 }
 
 void SelfTestData_Sample::SharedCtor() {
-  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SelfTestData_Sample_sentencepiece_5fmodel_2eproto.base);
-  input_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
-  expected_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
+input_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
+expected_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
 }
 
 SelfTestData_Sample::~SelfTestData_Sample() {
   // @@protoc_insertion_point(destructor:sentencepiece.SelfTestData.Sample)
+  if (GetArenaForAllocation() != nullptr) return;
   SharedDtor();
   _internal_metadata_.Delete<std::string>();
 }
 
-void SelfTestData_Sample::SharedDtor() {
-  GOOGLE_DCHECK(GetArena() == nullptr);
+inline void SelfTestData_Sample::SharedDtor() {
+  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
   input_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
   expected_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
 }
@@ -2217,11 +2313,6 @@ void SelfTestData_Sample::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
 void SelfTestData_Sample::SetCachedSize(int size) const {
   _cached_size_.Set(size);
 }
-const SelfTestData_Sample& SelfTestData_Sample::default_instance() {
-  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SelfTestData_Sample_sentencepiece_5fmodel_2eproto.base);
-  return *internal_default_instance();
-}
-
 
 void SelfTestData_Sample::Clear() {
 // @@protoc_insertion_point(message_clear_start:sentencepiece.SelfTestData.Sample)
@@ -2248,7 +2339,6 @@ const char* SelfTestData_Sample::_InternalParse(const char* ptr, ::PROTOBUF_NAME
   while (!ctx->Done(&ptr)) {
     ::PROTOBUF_NAMESPACE_ID::uint32 tag;
     ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
-    CHK_(ptr);
     switch (tag >> 3) {
       // optional string input = 1;
       case 1:
@@ -2256,7 +2346,8 @@ const char* SelfTestData_Sample::_InternalParse(const char* ptr, ::PROTOBUF_NAME
           auto str = _internal_mutable_input();
           ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
           CHK_(ptr);
-        } else goto handle_unusual;
+        } else
+          goto handle_unusual;
         continue;
       // optional string expected = 2;
       case 2:
@@ -2264,28 +2355,30 @@ const char* SelfTestData_Sample::_InternalParse(const char* ptr, ::PROTOBUF_NAME
           auto str = _internal_mutable_expected();
           ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
           CHK_(ptr);
-        } else goto handle_unusual;
-        continue;
-      default: {
-      handle_unusual:
-        if ((tag & 7) == 4 || tag == 0) {
-          ctx->SetLastTag(tag);
-          goto success;
-        }
-        ptr = UnknownFieldParse(tag,
-            _internal_metadata_.mutable_unknown_fields<std::string>(),
-            ptr, ctx);
-        CHK_(ptr != nullptr);
+        } else
+          goto handle_unusual;
         continue;
-      }
+      default:
+        goto handle_unusual;
     }  // switch
+  handle_unusual:
+    if ((tag == 0) || ((tag & 7) == 4)) {
+      CHK_(ptr);
+      ctx->SetLastTag(tag);
+      goto message_done;
+    }
+    ptr = UnknownFieldParse(
+        tag,
+        _internal_metadata_.mutable_unknown_fields<std::string>(),
+        ptr, ctx);
+    CHK_(ptr != nullptr);
   }  // while
-success:
+message_done:
   _has_bits_.Or(has_bits);
   return ptr;
 failure:
   ptr = nullptr;
-  goto success;
+  goto message_done;
 #undef CHK_
 }
 
@@ -2358,7 +2451,6 @@ void SelfTestData_Sample::CheckTypeAndMergeFrom(
 void SelfTestData_Sample::MergeFrom(const SelfTestData_Sample& from) {
 // @@protoc_insertion_point(class_specific_merge_from_start:sentencepiece.SelfTestData.Sample)
   GOOGLE_DCHECK_NE(&from, this);
-  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
   ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
   (void) cached_has_bits;
 
@@ -2371,6 +2463,7 @@ void SelfTestData_Sample::MergeFrom(const SelfTestData_Sample& from) {
       _internal_set_expected(from._internal_expected());
     }
   }
+  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
 }
 
 void SelfTestData_Sample::CopyFrom(const SelfTestData_Sample& from) {
@@ -2386,10 +2479,20 @@ bool SelfTestData_Sample::IsInitialized() const {
 
 void SelfTestData_Sample::InternalSwap(SelfTestData_Sample* other) {
   using std::swap;
-  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
+  auto* lhs_arena = GetArenaForAllocation();
+  auto* rhs_arena = other->GetArenaForAllocation();
+  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
   swap(_has_bits_[0], other->_has_bits_[0]);
-  input_.Swap(&other->input_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
-  expected_.Swap(&other->expected_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
+  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
+      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
+      &input_, lhs_arena,
+      &other->input_, rhs_arena
+  );
+  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
+      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
+      &expected_, lhs_arena,
+      &other->expected_, rhs_arena
+  );
 }
 
 std::string SelfTestData_Sample::GetTypeName() const {
@@ -2403,12 +2506,15 @@ class SelfTestData::_Internal {
  public:
 };
 
-SelfTestData::SelfTestData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
-  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
+SelfTestData::SelfTestData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
+                         bool is_message_owned)
+  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
   _extensions_(arena),
   samples_(arena) {
   SharedCtor();
-  RegisterArenaDtor(arena);
+  if (!is_message_owned) {
+    RegisterArenaDtor(arena);
+  }
   // @@protoc_insertion_point(arena_constructor:sentencepiece.SelfTestData)
 }
 SelfTestData::SelfTestData(const SelfTestData& from)
@@ -2420,17 +2526,17 @@ SelfTestData::SelfTestData(const SelfTestData& from)
 }
 
 void SelfTestData::SharedCtor() {
-  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SelfTestData_sentencepiece_5fmodel_2eproto.base);
 }
 
 SelfTestData::~SelfTestData() {
   // @@protoc_insertion_point(destructor:sentencepiece.SelfTestData)
+  if (GetArenaForAllocation() != nullptr) return;
   SharedDtor();
   _internal_metadata_.Delete<std::string>();
 }
 
-void SelfTestData::SharedDtor() {
-  GOOGLE_DCHECK(GetArena() == nullptr);
+inline void SelfTestData::SharedDtor() {
+  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
 }
 
 void SelfTestData::ArenaDtor(void* object) {
@@ -2442,11 +2548,6 @@ void SelfTestData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
 void SelfTestData::SetCachedSize(int size) const {
   _cached_size_.Set(size);
 }
-const SelfTestData& SelfTestData::default_instance() {
-  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SelfTestData_sentencepiece_5fmodel_2eproto.base);
-  return *internal_default_instance();
-}
-
 
 void SelfTestData::Clear() {
 // @@protoc_insertion_point(message_clear_start:sentencepiece.SelfTestData)
@@ -2464,7 +2565,6 @@ const char* SelfTestData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_I
   while (!ctx->Done(&ptr)) {
     ::PROTOBUF_NAMESPACE_ID::uint32 tag;
     ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
-    CHK_(ptr);
     switch (tag >> 3) {
       // repeated .sentencepiece.SelfTestData.Sample samples = 1;
       case 1:
@@ -2476,33 +2576,34 @@ const char* SelfTestData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_I
             CHK_(ptr);
             if (!ctx->DataAvailable(ptr)) break;
           } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
-        } else goto handle_unusual;
+        } else
+          goto handle_unusual;
         continue;
-      default: {
-      handle_unusual:
-        if ((tag & 7) == 4 || tag == 0) {
-          ctx->SetLastTag(tag);
-          goto success;
-        }
-      if ((1600u <= tag)) {
-        ptr = _extensions_.ParseField(tag, ptr,
-            internal_default_instance(), &_internal_metadata_, ctx);
-        CHK_(ptr != nullptr);
-        continue;
-      }
-        ptr = UnknownFieldParse(tag,
-            _internal_metadata_.mutable_unknown_fields<std::string>(),
-            ptr, ctx);
-        CHK_(ptr != nullptr);
-        continue;
-      }
+      default:
+        goto handle_unusual;
     }  // switch
+  handle_unusual:
+    if ((tag == 0) || ((tag & 7) == 4)) {
+      CHK_(ptr);
+      ctx->SetLastTag(tag);
+      goto message_done;
+    }
+    if ((1600u <= tag)) {
+      ptr = _extensions_.ParseField(tag, ptr, internal_default_instance(), &_internal_metadata_, ctx);
+      CHK_(ptr != nullptr);
+      continue;
+    }
+    ptr = UnknownFieldParse(
+        tag,
+        _internal_metadata_.mutable_unknown_fields<std::string>(),
+        ptr, ctx);
+    CHK_(ptr != nullptr);
   }  // while
-success:
+message_done:
   return ptr;
 failure:
   ptr = nullptr;
-  goto success;
+  goto message_done;
 #undef CHK_
 }
 
@@ -2522,7 +2623,7 @@ failure:
 
   // Extension range [200, 536870912)
   target = _extensions_._InternalSerialize(
-      200, 536870912, target, stream);
+  internal_default_instance(), 200, 536870912, target, stream);
 
   if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
     target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
@@ -2566,12 +2667,12 @@ void SelfTestData::CheckTypeAndMergeFrom(
 void SelfTestData::MergeFrom(const SelfTestData& from) {
 // @@protoc_insertion_point(class_specific_merge_from_start:sentencepiece.SelfTestData)
   GOOGLE_DCHECK_NE(&from, this);
-  _extensions_.MergeFrom(from._extensions_);
-  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
   ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
   (void) cached_has_bits;
 
   samples_.MergeFrom(from.samples_);
+  _extensions_.MergeFrom(from._extensions_);
+  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
 }
 
 void SelfTestData::CopyFrom(const SelfTestData& from) {
@@ -2591,8 +2692,8 @@ bool SelfTestData::IsInitialized() const {
 
 void SelfTestData::InternalSwap(SelfTestData* other) {
   using std::swap;
-  _extensions_.Swap(&other->_extensions_);
-  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
+  _extensions_.InternalSwap(&other->_extensions_);
+  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
   samples_.InternalSwap(&other->samples_);
 }
 
@@ -2617,11 +2718,14 @@ class ModelProto_SentencePiece::_Internal {
   }
 };
 
-ModelProto_SentencePiece::ModelProto_SentencePiece(::PROTOBUF_NAMESPACE_ID::Arena* arena)
-  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
+ModelProto_SentencePiece::ModelProto_SentencePiece(::PROTOBUF_NAMESPACE_ID::Arena* arena,
+                         bool is_message_owned)
+  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
   _extensions_(arena) {
   SharedCtor();
-  RegisterArenaDtor(arena);
+  if (!is_message_owned) {
+    RegisterArenaDtor(arena);
+  }
   // @@protoc_insertion_point(arena_constructor:sentencepiece.ModelProto.SentencePiece)
 }
 ModelProto_SentencePiece::ModelProto_SentencePiece(const ModelProto_SentencePiece& from)
@@ -2632,7 +2736,7 @@ ModelProto_SentencePiece::ModelProto_SentencePiece(const ModelProto_SentencePiec
   piece_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
   if (from._internal_has_piece()) {
     piece_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_piece(), 
-      GetArena());
+      GetArenaForAllocation());
   }
   ::memcpy(&score_, &from.score_,
     static_cast<size_t>(reinterpret_cast<char*>(&type_) -
@@ -2641,20 +2745,20 @@ ModelProto_SentencePiece::ModelProto_SentencePiece(const ModelProto_SentencePiec
 }
 
 void ModelProto_SentencePiece::SharedCtor() {
-  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ModelProto_SentencePiece_sentencepiece_5fmodel_2eproto.base);
-  piece_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
-  score_ = 0;
-  type_ = 1;
+piece_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
+score_ = 0;
+type_ = 1;
 }
 
 ModelProto_SentencePiece::~ModelProto_SentencePiece() {
   // @@protoc_insertion_point(destructor:sentencepiece.ModelProto.SentencePiece)
+  if (GetArenaForAllocation() != nullptr) return;
   SharedDtor();
   _internal_metadata_.Delete<std::string>();
 }
 
-void ModelProto_SentencePiece::SharedDtor() {
-  GOOGLE_DCHECK(GetArena() == nullptr);
+inline void ModelProto_SentencePiece::SharedDtor() {
+  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
   piece_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
 }
 
@@ -2667,11 +2771,6 @@ void ModelProto_SentencePiece::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*
 void ModelProto_SentencePiece::SetCachedSize(int size) const {
   _cached_size_.Set(size);
 }
-const ModelProto_SentencePiece& ModelProto_SentencePiece::default_instance() {
-  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModelProto_SentencePiece_sentencepiece_5fmodel_2eproto.base);
-  return *internal_default_instance();
-}
-
 
 void ModelProto_SentencePiece::Clear() {
 // @@protoc_insertion_point(message_clear_start:sentencepiece.ModelProto.SentencePiece)
@@ -2698,7 +2797,6 @@ const char* ModelProto_SentencePiece::_InternalParse(const char* ptr, ::PROTOBUF
   while (!ctx->Done(&ptr)) {
     ::PROTOBUF_NAMESPACE_ID::uint32 tag;
     ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
-    CHK_(ptr);
     switch (tag >> 3) {
       // optional string piece = 1;
       case 1:
@@ -2706,7 +2804,8 @@ const char* ModelProto_SentencePiece::_InternalParse(const char* ptr, ::PROTOBUF
           auto str = _internal_mutable_piece();
           ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
           CHK_(ptr);
-        } else goto handle_unusual;
+        } else
+          goto handle_unusual;
         continue;
       // optional float score = 2;
       case 2:
@@ -2714,7 +2813,8 @@ const char* ModelProto_SentencePiece::_InternalParse(const char* ptr, ::PROTOBUF
           _Internal::set_has_score(&has_bits);
           score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
           ptr += sizeof(float);
-        } else goto handle_unusual;
+        } else
+          goto handle_unusual;
         continue;
       // optional .sentencepiece.ModelProto.SentencePiece.Type type = 3 [default = NORMAL];
       case 3:
@@ -2726,34 +2826,35 @@ const char* ModelProto_SentencePiece::_InternalParse(const char* ptr, ::PROTOBUF
           } else {
             ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
           }
-        } else goto handle_unusual;
-        continue;
-      default: {
-      handle_unusual:
-        if ((tag & 7) == 4 || tag == 0) {
-          ctx->SetLastTag(tag);
-          goto success;
-        }
-      if ((1600u <= tag)) {
-        ptr = _extensions_.ParseField(tag, ptr,
-            internal_default_instance(), &_internal_metadata_, ctx);
-        CHK_(ptr != nullptr);
+        } else
+          goto handle_unusual;
         continue;
-      }
-        ptr = UnknownFieldParse(tag,
-            _internal_metadata_.mutable_unknown_fields<std::string>(),
-            ptr, ctx);
-        CHK_(ptr != nullptr);
-        continue;
-      }
+      default:
+        goto handle_unusual;
     }  // switch
+  handle_unusual:
+    if ((tag == 0) || ((tag & 7) == 4)) {
+      CHK_(ptr);
+      ctx->SetLastTag(tag);
+      goto message_done;
+    }
+    if ((1600u <= tag)) {
+      ptr = _extensions_.ParseField(tag, ptr, internal_default_instance(), &_internal_metadata_, ctx);
+      CHK_(ptr != nullptr);
+      continue;
+    }
+    ptr = UnknownFieldParse(
+        tag,
+        _internal_metadata_.mutable_unknown_fields<std::string>(),
+        ptr, ctx);
+    CHK_(ptr != nullptr);
   }  // while
-success:
+message_done:
   _has_bits_.Or(has_bits);
   return ptr;
 failure:
   ptr = nullptr;
-  goto success;
+  goto message_done;
 #undef CHK_
 }
 
@@ -2785,7 +2886,7 @@ failure:
 
   // Extension range [200, 536870912)
   target = _extensions_._InternalSerialize(
-      200, 536870912, target, stream);
+  internal_default_instance(), 200, 536870912, target, stream);
 
   if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
     target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
@@ -2843,8 +2944,6 @@ void ModelProto_SentencePiece::CheckTypeAndMergeFrom(
 void ModelProto_SentencePiece::MergeFrom(const ModelProto_SentencePiece& from) {
 // @@protoc_insertion_point(class_specific_merge_from_start:sentencepiece.ModelProto.SentencePiece)
   GOOGLE_DCHECK_NE(&from, this);
-  _extensions_.MergeFrom(from._extensions_);
-  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
   ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
   (void) cached_has_bits;
 
@@ -2861,6 +2960,8 @@ void ModelProto_SentencePiece::MergeFrom(const ModelProto_SentencePiece& from) {
     }
     _has_bits_[0] |= cached_has_bits;
   }
+  _extensions_.MergeFrom(from._extensions_);
+  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
 }
 
 void ModelProto_SentencePiece::CopyFrom(const ModelProto_SentencePiece& from) {
@@ -2880,10 +2981,16 @@ bool ModelProto_SentencePiece::IsInitialized() const {
 
 void ModelProto_SentencePiece::InternalSwap(ModelProto_SentencePiece* other) {
   using std::swap;
-  _extensions_.Swap(&other->_extensions_);
-  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
+  _extensions_.InternalSwap(&other->_extensions_);
+  auto* lhs_arena = GetArenaForAllocation();
+  auto* rhs_arena = other->GetArenaForAllocation();
+  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
   swap(_has_bits_[0], other->_has_bits_[0]);
-  piece_.Swap(&other->piece_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
+  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
+      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
+      &piece_, lhs_arena,
+      &other->piece_, rhs_arena
+  );
   swap(score_, other->score_);
   swap(type_, other->type_);
 }
@@ -2932,12 +3039,15 @@ const ::sentencepiece::NormalizerSpec&
 ModelProto::_Internal::denormalizer_spec(const ModelProto* msg) {
   return *msg->denormalizer_spec_;
 }
-ModelProto::ModelProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
-  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
+ModelProto::ModelProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
+                         bool is_message_owned)
+  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
   _extensions_(arena),
   pieces_(arena) {
   SharedCtor();
-  RegisterArenaDtor(arena);
+  if (!is_message_owned) {
+    RegisterArenaDtor(arena);
+  }
   // @@protoc_insertion_point(arena_constructor:sentencepiece.ModelProto)
 }
 ModelProto::ModelProto(const ModelProto& from)
@@ -2970,21 +3080,21 @@ ModelProto::ModelProto(const ModelProto& from)
 }
 
 void ModelProto::SharedCtor() {
-  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ModelProto_sentencepiece_5fmodel_2eproto.base);
-  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
-      reinterpret_cast<char*>(&trainer_spec_) - reinterpret_cast<char*>(this)),
-      0, static_cast<size_t>(reinterpret_cast<char*>(&denormalizer_spec_) -
-      reinterpret_cast<char*>(&trainer_spec_)) + sizeof(denormalizer_spec_));
+::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
+    reinterpret_cast<char*>(&trainer_spec_) - reinterpret_cast<char*>(this)),
+    0, static_cast<size_t>(reinterpret_cast<char*>(&denormalizer_spec_) -
+    reinterpret_cast<char*>(&trainer_spec_)) + sizeof(denormalizer_spec_));
 }
 
 ModelProto::~ModelProto() {
   // @@protoc_insertion_point(destructor:sentencepiece.ModelProto)
+  if (GetArenaForAllocation() != nullptr) return;
   SharedDtor();
   _internal_metadata_.Delete<std::string>();
 }
 
-void ModelProto::SharedDtor() {
-  GOOGLE_DCHECK(GetArena() == nullptr);
+inline void ModelProto::SharedDtor() {
+  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
   if (this != internal_default_instance()) delete trainer_spec_;
   if (this != internal_default_instance()) delete normalizer_spec_;
   if (this != internal_default_instance()) delete self_test_data_;
@@ -3000,11 +3110,6 @@ void ModelProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
 void ModelProto::SetCachedSize(int size) const {
   _cached_size_.Set(size);
 }
-const ModelProto& ModelProto::default_instance() {
-  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModelProto_sentencepiece_5fmodel_2eproto.base);
-  return *internal_default_instance();
-}
-
 
 void ModelProto::Clear() {
 // @@protoc_insertion_point(message_clear_start:sentencepiece.ModelProto)
@@ -3043,7 +3148,6 @@ const char* ModelProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID:
   while (!ctx->Done(&ptr)) {
     ::PROTOBUF_NAMESPACE_ID::uint32 tag;
     ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
-    CHK_(ptr);
     switch (tag >> 3) {
       // repeated .sentencepiece.ModelProto.SentencePiece pieces = 1;
       case 1:
@@ -3055,62 +3159,67 @@ const char* ModelProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID:
             CHK_(ptr);
             if (!ctx->DataAvailable(ptr)) break;
           } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
-        } else goto handle_unusual;
+        } else
+          goto handle_unusual;
         continue;
       // optional .sentencepiece.TrainerSpec trainer_spec = 2;
       case 2:
         if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
           ptr = ctx->ParseMessage(_internal_mutable_trainer_spec(), ptr);
           CHK_(ptr);
-        } else goto handle_unusual;
+        } else
+          goto handle_unusual;
         continue;
       // optional .sentencepiece.NormalizerSpec normalizer_spec = 3;
       case 3:
         if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
           ptr = ctx->ParseMessage(_internal_mutable_normalizer_spec(), ptr);
           CHK_(ptr);
-        } else goto handle_unusual;
+        } else
+          goto handle_unusual;
         continue;
       // optional .sentencepiece.SelfTestData self_test_data = 4;
       case 4:
         if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
           ptr = ctx->ParseMessage(_internal_mutable_self_test_data(), ptr);
           CHK_(ptr);
-        } else goto handle_unusual;
+        } else
+          goto handle_unusual;
         continue;
       // optional .sentencepiece.NormalizerSpec denormalizer_spec = 5;
       case 5:
         if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
           ptr = ctx->ParseMessage(_internal_mutable_denormalizer_spec(), ptr);
           CHK_(ptr);
-        } else goto handle_unusual;
-        continue;
-      default: {
-      handle_unusual:
-        if ((tag & 7) == 4 || tag == 0) {
-          ctx->SetLastTag(tag);
-          goto success;
-        }
-      if ((1600u <= tag)) {
-        ptr = _extensions_.ParseField(tag, ptr,
-            internal_default_instance(), &_internal_metadata_, ctx);
-        CHK_(ptr != nullptr);
+        } else
+          goto handle_unusual;
         continue;
-      }
-        ptr = UnknownFieldParse(tag,
-            _internal_metadata_.mutable_unknown_fields<std::string>(),
-            ptr, ctx);
-        CHK_(ptr != nullptr);
-        continue;
-      }
+      default:
+        goto handle_unusual;
     }  // switch
+  handle_unusual:
+    if ((tag == 0) || ((tag & 7) == 4)) {
+      CHK_(ptr);
+      ctx->SetLastTag(tag);
+      goto message_done;
+    }
+    if ((1600u <= tag)) {
+      ptr = _extensions_.ParseField(tag, ptr, internal_default_instance(), &_internal_metadata_, ctx);
+      CHK_(ptr != nullptr);
+      continue;
+    }
+    ptr = UnknownFieldParse(
+        tag,
+        _internal_metadata_.mutable_unknown_fields<std::string>(),
+        ptr, ctx);
+    CHK_(ptr != nullptr);
   }  // while
-success:
+message_done:
   _has_bits_.Or(has_bits);
   return ptr;
 failure:
   ptr = nullptr;
-  goto success;
+  goto message_done;
 #undef CHK_
 }
 
@@ -3163,7 +3272,7 @@ failure:
 
   // Extension range [200, 536870912)
   target = _extensions_._InternalSerialize(
-      200, 536870912, target, stream);
+  internal_default_instance(), 200, 536870912, target, stream);
 
   if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
     target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
@@ -3238,8 +3347,6 @@ void ModelProto::CheckTypeAndMergeFrom(
 void ModelProto::MergeFrom(const ModelProto& from) {
 // @@protoc_insertion_point(class_specific_merge_from_start:sentencepiece.ModelProto)
   GOOGLE_DCHECK_NE(&from, this);
-  _extensions_.MergeFrom(from._extensions_);
-  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
   ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
   (void) cached_has_bits;
 
@@ -3259,6 +3366,8 @@ void ModelProto::MergeFrom(const ModelProto& from) {
       _internal_mutable_denormalizer_spec()->::sentencepiece::NormalizerSpec::MergeFrom(from._internal_denormalizer_spec());
     }
   }
+  _extensions_.MergeFrom(from._extensions_);
+  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
 }
 
 void ModelProto::CopyFrom(const ModelProto& from) {
@@ -3291,8 +3400,8 @@ bool ModelProto::IsInitialized() const {
 
 void ModelProto::InternalSwap(ModelProto* other) {
   using std::swap;
-  _extensions_.Swap(&other->_extensions_);
-  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
+  _extensions_.InternalSwap(&other->_extensions_);
+  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
   swap(_has_bits_[0], other->_has_bits_[0]);
   pieces_.InternalSwap(&other->pieces_);
   ::PROTOBUF_NAMESPACE_ID::internal::memswap<
diff --git a/src/builtin_pb/sentencepiece_model.pb.h b/src/builtin_pb/sentencepiece_model.pb.h
index f527aa7..95cec46 100644
--- a/src/builtin_pb/sentencepiece_model.pb.h
+++ b/src/builtin_pb/sentencepiece_model.pb.h
@@ -8,12 +8,12 @@
 #include <string>
 
 #include <google/protobuf/port_def.inc>
-#if PROTOBUF_VERSION < 3014000
+#if PROTOBUF_VERSION < 3018000
 #error This file was generated by a newer version of protoc which is
 #error incompatible with your Protocol Buffer headers. Please update
 #error your headers.
 #endif
-#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
+#if 3018003 < PROTOBUF_MIN_PROTOC_VERSION
 #error This file was generated by an older version of protoc which is
 #error incompatible with your Protocol Buffer headers. Please
 #error regenerate this file with a newer version of protoc.
@@ -53,22 +53,22 @@ struct TableStruct_sentencepiece_5fmodel_2eproto {
 };
 namespace sentencepiece {
 class ModelProto;
-class ModelProtoDefaultTypeInternal;
+struct ModelProtoDefaultTypeInternal;
 extern ModelProtoDefaultTypeInternal _ModelProto_default_instance_;
 class ModelProto_SentencePiece;
-class ModelProto_SentencePieceDefaultTypeInternal;
+struct ModelProto_SentencePieceDefaultTypeInternal;
 extern ModelProto_SentencePieceDefaultTypeInternal _ModelProto_SentencePiece_default_instance_;
 class NormalizerSpec;
-class NormalizerSpecDefaultTypeInternal;
+struct NormalizerSpecDefaultTypeInternal;
 extern NormalizerSpecDefaultTypeInternal _NormalizerSpec_default_instance_;
 class SelfTestData;
-class SelfTestDataDefaultTypeInternal;
+struct SelfTestDataDefaultTypeInternal;
 extern SelfTestDataDefaultTypeInternal _SelfTestData_default_instance_;
 class SelfTestData_Sample;
-class SelfTestData_SampleDefaultTypeInternal;
+struct SelfTestData_SampleDefaultTypeInternal;
 extern SelfTestData_SampleDefaultTypeInternal _SelfTestData_Sample_default_instance_;
 class TrainerSpec;
-class TrainerSpecDefaultTypeInternal;
+struct TrainerSpecDefaultTypeInternal;
 extern TrainerSpecDefaultTypeInternal _TrainerSpec_default_instance_;
 }  // namespace sentencepiece
 PROTOBUF_NAMESPACE_OPEN
@@ -127,11 +127,12 @@ bool ModelProto_SentencePiece_Type_Parse(
     ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ModelProto_SentencePiece_Type* value);
 // ===================================================================
 
-class TrainerSpec PROTOBUF_FINAL :
+class TrainerSpec final :
     public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sentencepiece.TrainerSpec) */ {
  public:
   inline TrainerSpec() : TrainerSpec(nullptr) {}
-  virtual ~TrainerSpec();
+  ~TrainerSpec() override;
+  explicit constexpr TrainerSpec(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
 
   TrainerSpec(const TrainerSpec& from);
   TrainerSpec(TrainerSpec&& from) noexcept
@@ -144,8 +145,13 @@ class TrainerSpec PROTOBUF_FINAL :
     return *this;
   }
   inline TrainerSpec& operator=(TrainerSpec&& from) noexcept {
-    if (GetArena() == from.GetArena()) {
-      if (this != &from) InternalSwap(&from);
+    if (this == &from) return *this;
+    if (GetOwningArena() == from.GetOwningArena()
+  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
+        && GetOwningArena() != nullptr
+  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
+    ) {
+      InternalSwap(&from);
     } else {
       CopyFrom(from);
     }
@@ -159,8 +165,9 @@ class TrainerSpec PROTOBUF_FINAL :
     return _internal_metadata_.mutable_unknown_fields<std::string>();
   }
 
-  static const TrainerSpec& default_instance();
-
+  static const TrainerSpec& default_instance() {
+    return *internal_default_instance();
+  }
   static inline const TrainerSpec* internal_default_instance() {
     return reinterpret_cast<const TrainerSpec*>(
                &_TrainerSpec_default_instance_);
@@ -173,7 +180,7 @@ class TrainerSpec PROTOBUF_FINAL :
   }
   inline void Swap(TrainerSpec* other) {
     if (other == this) return;
-    if (GetArena() == other->GetArena()) {
+    if (GetOwningArena() == other->GetOwningArena()) {
       InternalSwap(other);
     } else {
       ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
@@ -181,21 +188,20 @@ class TrainerSpec PROTOBUF_FINAL :
   }
   void UnsafeArenaSwap(TrainerSpec* other) {
     if (other == this) return;
-    GOOGLE_DCHECK(GetArena() == other->GetArena());
+    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
     InternalSwap(other);
   }
 
   // implements Message ----------------------------------------------
 
   inline TrainerSpec* New() const final {
-    return CreateMaybeMessage<TrainerSpec>(nullptr);
+    return new TrainerSpec();
   }
 
   TrainerSpec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
     return CreateMaybeMessage<TrainerSpec>(arena);
   }
-  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
-    final;
+  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
   void CopyFrom(const TrainerSpec& from);
   void MergeFrom(const TrainerSpec& from);
   PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
@@ -209,8 +215,8 @@ class TrainerSpec PROTOBUF_FINAL :
   int GetCachedSize() const final { return _cached_size_.Get(); }
 
   private:
-  inline void SharedCtor();
-  inline void SharedDtor();
+  void SharedCtor();
+  void SharedDtor();
   void SetCachedSize(int size) const;
   void InternalSwap(TrainerSpec* other);
   friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
@@ -218,7 +224,8 @@ class TrainerSpec PROTOBUF_FINAL :
     return "sentencepiece.TrainerSpec";
   }
   protected:
-  explicit TrainerSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena);
+  explicit TrainerSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
+                       bool is_message_owned = false);
   private:
   static void ArenaDtor(void* object);
   inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
@@ -406,16 +413,14 @@ class TrainerSpec PROTOBUF_FINAL :
   public:
   void clear_model_prefix();
   const std::string& model_prefix() const;
-  void set_model_prefix(const std::string& value);
-  void set_model_prefix(std::string&& value);
-  void set_model_prefix(const char* value);
-  void set_model_prefix(const char* value, size_t size);
+  template <typename ArgT0 = const std::string&, typename... ArgT>
+  void set_model_prefix(ArgT0&& arg0, ArgT... args);
   std::string* mutable_model_prefix();
-  std::string* release_model_prefix();
+  PROTOBUF_MUST_USE_RESULT std::string* release_model_prefix();
   void set_allocated_model_prefix(std::string* model_prefix);
   private:
   const std::string& _internal_model_prefix() const;
-  void _internal_set_model_prefix(const std::string& value);
+  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model_prefix(const std::string& value);
   std::string* _internal_mutable_model_prefix();
   public:
 
@@ -426,16 +431,14 @@ class TrainerSpec PROTOBUF_FINAL :
   public:
   void clear_input_format();
   const std::string& input_format() const;
-  void set_input_format(const std::string& value);
-  void set_input_format(std::string&& value);
-  void set_input_format(const char* value);
-  void set_input_format(const char* value, size_t size);
+  template <typename ArgT0 = const std::string&, typename... ArgT>
+  void set_input_format(ArgT0&& arg0, ArgT... args);
   std::string* mutable_input_format();
-  std::string* release_input_format();
+  PROTOBUF_MUST_USE_RESULT std::string* release_input_format();
   void set_allocated_input_format(std::string* input_format);
   private:
   const std::string& _internal_input_format() const;
-  void _internal_set_input_format(const std::string& value);
+  inline PROTOBUF_ALWAYS_INLINE void _internal_set_input_format(const std::string& value);
   std::string* _internal_mutable_input_format();
   public:
 
@@ -446,16 +449,14 @@ class TrainerSpec PROTOBUF_FINAL :
   public:
   void clear_required_chars();
   const std::string& required_chars() const;
-  void set_required_chars(const std::string& value);
-  void set_required_chars(std::string&& value);
-  void set_required_chars(const char* value);
-  void set_required_chars(const char* value, size_t size);
+  template <typename ArgT0 = const std::string&, typename... ArgT>
+  void set_required_chars(ArgT0&& arg0, ArgT... args);
   std::string* mutable_required_chars();
-  std::string* release_required_chars();
+  PROTOBUF_MUST_USE_RESULT std::string* release_required_chars();
   void set_allocated_required_chars(std::string* required_chars);
   private:
   const std::string& _internal_required_chars() const;
-  void _internal_set_required_chars(const std::string& value);
+  inline PROTOBUF_ALWAYS_INLINE void _internal_set_required_chars(const std::string& value);
   std::string* _internal_mutable_required_chars();
   public:
 
@@ -466,16 +467,14 @@ class TrainerSpec PROTOBUF_FINAL :
   public:
   void clear_unk_surface();
   const std::string& unk_surface() const;
-  void set_unk_surface(const std::string& value);
-  void set_unk_surface(std::string&& value);
-  void set_unk_surface(const char* value);
-  void set_unk_surface(const char* value, size_t size);
+  template <typename ArgT0 = const std::string&, typename... ArgT>
+  void set_unk_surface(ArgT0&& arg0, ArgT... args);
   std::string* mutable_unk_surface();
-  std::string* release_unk_surface();
+  PROTOBUF_MUST_USE_RESULT std::string* release_unk_surface();
   void set_allocated_unk_surface(std::string* unk_surface);
   private:
   const std::string& _internal_unk_surface() const;
-  void _internal_set_unk_surface(const std::string& value);
+  inline PROTOBUF_ALWAYS_INLINE void _internal_set_unk_surface(const std::string& value);
   std::string* _internal_mutable_unk_surface();
   public:
 
@@ -486,16 +485,14 @@ class TrainerSpec PROTOBUF_FINAL :
   public:
   void clear_unk_piece();
   const std::string& unk_piece() const;
-  void set_unk_piece(const std::string& value);
-  void set_unk_piece(std::string&& value);
-  void set_unk_piece(const char* value);
-  void set_unk_piece(const char* value, size_t size);
+  template <typename ArgT0 = const std::string&, typename... ArgT>
+  void set_unk_piece(ArgT0&& arg0, ArgT... args);
   std::string* mutable_unk_piece();
-  std::string* release_unk_piece();
+  PROTOBUF_MUST_USE_RESULT std::string* release_unk_piece();
   void set_allocated_unk_piece(std::string* unk_piece);
   private:
   const std::string& _internal_unk_piece() const;
-  void _internal_set_unk_piece(const std::string& value);
+  inline PROTOBUF_ALWAYS_INLINE void _internal_set_unk_piece(const std::string& value);
   std::string* _internal_mutable_unk_piece();
   public:
 
@@ -506,16 +503,14 @@ class TrainerSpec PROTOBUF_FINAL :
   public:
   void clear_bos_piece();
   const std::string& bos_piece() const;
-  void set_bos_piece(const std::string& value);
-  void set_bos_piece(std::string&& value);
-  void set_bos_piece(const char* value);
-  void set_bos_piece(const char* value, size_t size);
+  template <typename ArgT0 = const std::string&, typename... ArgT>
+  void set_bos_piece(ArgT0&& arg0, ArgT... args);
   std::string* mutable_bos_piece();
-  std::string* release_bos_piece();
+  PROTOBUF_MUST_USE_RESULT std::string* release_bos_piece();
   void set_allocated_bos_piece(std::string* bos_piece);
   private:
   const std::string& _internal_bos_piece() const;
-  void _internal_set_bos_piece(const std::string& value);
+  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bos_piece(const std::string& value);
   std::string* _internal_mutable_bos_piece();
   public:
 
@@ -526,16 +521,14 @@ class TrainerSpec PROTOBUF_FINAL :
   public:
   void clear_eos_piece();
   const std::string& eos_piece() const;
-  void set_eos_piece(const std::string& value);
-  void set_eos_piece(std::string&& value);
-  void set_eos_piece(const char* value);
-  void set_eos_piece(const char* value, size_t size);
+  template <typename ArgT0 = const std::string&, typename... ArgT>
+  void set_eos_piece(ArgT0&& arg0, ArgT... args);
   std::string* mutable_eos_piece();
-  std::string* release_eos_piece();
+  PROTOBUF_MUST_USE_RESULT std::string* release_eos_piece();
   void set_allocated_eos_piece(std::string* eos_piece);
   private:
   const std::string& _internal_eos_piece() const;
-  void _internal_set_eos_piece(const std::string& value);
+  inline PROTOBUF_ALWAYS_INLINE void _internal_set_eos_piece(const std::string& value);
   std::string* _internal_mutable_eos_piece();
   public:
 
@@ -546,16 +539,14 @@ class TrainerSpec PROTOBUF_FINAL :
   public:
   void clear_pad_piece();
   const std::string& pad_piece() const;
-  void set_pad_piece(const std::string& value);
-  void set_pad_piece(std::string&& value);
-  void set_pad_piece(const char* value);
-  void set_pad_piece(const char* value, size_t size);
+  template <typename ArgT0 = const std::string&, typename... ArgT>
+  void set_pad_piece(ArgT0&& arg0, ArgT... args);
   std::string* mutable_pad_piece();
-  std::string* release_pad_piece();
+  PROTOBUF_MUST_USE_RESULT std::string* release_pad_piece();
   void set_allocated_pad_piece(std::string* pad_piece);
   private:
   const std::string& _internal_pad_piece() const;
-  void _internal_set_pad_piece(const std::string& value);
+  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pad_piece(const std::string& value);
   std::string* _internal_mutable_pad_piece();
   public:
 
@@ -936,7 +927,196 @@ class TrainerSpec PROTOBUF_FINAL :
   void _internal_set_pad_id(::PROTOBUF_NAMESPACE_ID::int32 value);
   public:
 
-  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(TrainerSpec)
+
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline bool HasExtension(
+      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+          TrainerSpec, _proto_TypeTraits, _field_type, _is_packed>& id) const {
+
+    return _extensions_.Has(id.number());
+  }
+
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline void ClearExtension(
+      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+          TrainerSpec, _proto_TypeTraits, _field_type, _is_packed>& id) {
+    _extensions_.ClearExtension(id.number());
+
+  }
+
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline int ExtensionSize(
+      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+          TrainerSpec, _proto_TypeTraits, _field_type, _is_packed>& id) const {
+
+    return _extensions_.ExtensionSize(id.number());
+  }
+
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline typename _proto_TypeTraits::Singular::ConstType GetExtension(
+      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+          TrainerSpec, _proto_TypeTraits, _field_type, _is_packed>& id) const {
+
+    return _proto_TypeTraits::Get(id.number(), _extensions_,
+                                  id.default_value());
+  }
+
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline typename _proto_TypeTraits::Singular::MutableType MutableExtension(
+      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+          TrainerSpec, _proto_TypeTraits, _field_type, _is_packed>& id) {
+
+    return _proto_TypeTraits::Mutable(id.number(), _field_type,
+                                      &_extensions_);
+  }
+
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline void SetExtension(
+      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+          TrainerSpec, _proto_TypeTraits, _field_type, _is_packed>& id,
+      typename _proto_TypeTraits::Singular::ConstType value) {
+    _proto_TypeTraits::Set(id.number(), _field_type, value, &_extensions_);
+
+  }
+
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline void SetAllocatedExtension(
+      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+          TrainerSpec, _proto_TypeTraits, _field_type, _is_packed>& id,
+      typename _proto_TypeTraits::Singular::MutableType value) {
+    _proto_TypeTraits::SetAllocated(id.number(), _field_type, value,
+                                    &_extensions_);
+
+  }
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline void UnsafeArenaSetAllocatedExtension(
+      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+          TrainerSpec, _proto_TypeTraits, _field_type, _is_packed>& id,
+      typename _proto_TypeTraits::Singular::MutableType value) {
+    _proto_TypeTraits::UnsafeArenaSetAllocated(id.number(), _field_type,
+                                               value, &_extensions_);
+
+  }
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline PROTOBUF_MUST_USE_RESULT
+      typename _proto_TypeTraits::Singular::MutableType
+      ReleaseExtension(
+          const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+              TrainerSpec, _proto_TypeTraits, _field_type, _is_packed>& id) {
+
+    return _proto_TypeTraits::Release(id.number(), _field_type,
+                                      &_extensions_);
+  }
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline typename _proto_TypeTraits::Singular::MutableType
+  UnsafeArenaReleaseExtension(
+      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+          TrainerSpec, _proto_TypeTraits, _field_type, _is_packed>& id) {
+
+    return _proto_TypeTraits::UnsafeArenaRelease(id.number(), _field_type,
+                                                 &_extensions_);
+  }
+
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline typename _proto_TypeTraits::Repeated::ConstType GetExtension(
+      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+          TrainerSpec, _proto_TypeTraits, _field_type, _is_packed>& id,
+      int index) const {
+
+    return _proto_TypeTraits::Get(id.number(), _extensions_, index);
+  }
+
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline typename _proto_TypeTraits::Repeated::MutableType MutableExtension(
+      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+          TrainerSpec, _proto_TypeTraits, _field_type, _is_packed>& id,
+      int index) {
+
+    return _proto_TypeTraits::Mutable(id.number(), index, &_extensions_);
+  }
+
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline void SetExtension(
+      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+          TrainerSpec, _proto_TypeTraits, _field_type, _is_packed>& id,
+      int index, typename _proto_TypeTraits::Repeated::ConstType value) {
+    _proto_TypeTraits::Set(id.number(), index, value, &_extensions_);
+
+  }
+
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline typename _proto_TypeTraits::Repeated::MutableType AddExtension(
+      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+          TrainerSpec, _proto_TypeTraits, _field_type, _is_packed>& id) {
+    typename _proto_TypeTraits::Repeated::MutableType to_add =
+        _proto_TypeTraits::Add(id.number(), _field_type, &_extensions_);
+
+    return to_add;
+  }
+
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline void AddExtension(
+      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+          TrainerSpec, _proto_TypeTraits, _field_type, _is_packed>& id,
+      typename _proto_TypeTraits::Repeated::ConstType value) {
+    _proto_TypeTraits::Add(id.number(), _field_type, _is_packed, value,
+                           &_extensions_);
+
+  }
+
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline const typename _proto_TypeTraits::Repeated::RepeatedFieldType&
+  GetRepeatedExtension(
+      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+          TrainerSpec, _proto_TypeTraits, _field_type, _is_packed>& id) const {
+
+    return _proto_TypeTraits::GetRepeated(id.number(), _extensions_);
+  }
+
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline typename _proto_TypeTraits::Repeated::RepeatedFieldType*
+  MutableRepeatedExtension(
+      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+          TrainerSpec, _proto_TypeTraits, _field_type, _is_packed>& id) {
+
+    return _proto_TypeTraits::MutableRepeated(id.number(), _field_type,
+                                              _is_packed, &_extensions_);
+  }
+
   // @@protoc_insertion_point(class_scope:sentencepiece.TrainerSpec)
  private:
   class _Internal;
@@ -998,11 +1178,12 @@ class TrainerSpec PROTOBUF_FINAL :
 };
 // -------------------------------------------------------------------
 
-class NormalizerSpec PROTOBUF_FINAL :
+class NormalizerSpec final :
     public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sentencepiece.NormalizerSpec) */ {
  public:
   inline NormalizerSpec() : NormalizerSpec(nullptr) {}
-  virtual ~NormalizerSpec();
+  ~NormalizerSpec() override;
+  explicit constexpr NormalizerSpec(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
 
   NormalizerSpec(const NormalizerSpec& from);
   NormalizerSpec(NormalizerSpec&& from) noexcept
@@ -1015,8 +1196,13 @@ class NormalizerSpec PROTOBUF_FINAL :
     return *this;
   }
   inline NormalizerSpec& operator=(NormalizerSpec&& from) noexcept {
-    if (GetArena() == from.GetArena()) {
-      if (this != &from) InternalSwap(&from);
+    if (this == &from) return *this;
+    if (GetOwningArena() == from.GetOwningArena()
+  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
+        && GetOwningArena() != nullptr
+  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
+    ) {
+      InternalSwap(&from);
     } else {
       CopyFrom(from);
     }
@@ -1030,8 +1216,9 @@ class NormalizerSpec PROTOBUF_FINAL :
     return _internal_metadata_.mutable_unknown_fields<std::string>();
   }
 
-  static const NormalizerSpec& default_instance();
-
+  static const NormalizerSpec& default_instance() {
+    return *internal_default_instance();
+  }
   static inline const NormalizerSpec* internal_default_instance() {
     return reinterpret_cast<const NormalizerSpec*>(
                &_NormalizerSpec_default_instance_);
@@ -1044,7 +1231,7 @@ class NormalizerSpec PROTOBUF_FINAL :
   }
   inline void Swap(NormalizerSpec* other) {
     if (other == this) return;
-    if (GetArena() == other->GetArena()) {
+    if (GetOwningArena() == other->GetOwningArena()) {
       InternalSwap(other);
     } else {
       ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
@@ -1052,21 +1239,20 @@ class NormalizerSpec PROTOBUF_FINAL :
   }
   void UnsafeArenaSwap(NormalizerSpec* other) {
     if (other == this) return;
-    GOOGLE_DCHECK(GetArena() == other->GetArena());
+    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
     InternalSwap(other);
   }
 
   // implements Message ----------------------------------------------
 
   inline NormalizerSpec* New() const final {
-    return CreateMaybeMessage<NormalizerSpec>(nullptr);
+    return new NormalizerSpec();
   }
 
   NormalizerSpec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
     return CreateMaybeMessage<NormalizerSpec>(arena);
   }
-  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
-    final;
+  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
   void CopyFrom(const NormalizerSpec& from);
   void MergeFrom(const NormalizerSpec& from);
   PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
@@ -1080,8 +1266,8 @@ class NormalizerSpec PROTOBUF_FINAL :
   int GetCachedSize() const final { return _cached_size_.Get(); }
 
   private:
-  inline void SharedCtor();
-  inline void SharedDtor();
+  void SharedCtor();
+  void SharedDtor();
   void SetCachedSize(int size) const;
   void InternalSwap(NormalizerSpec* other);
   friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
@@ -1089,7 +1275,8 @@ class NormalizerSpec PROTOBUF_FINAL :
     return "sentencepiece.NormalizerSpec";
   }
   protected:
-  explicit NormalizerSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena);
+  explicit NormalizerSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
+                       bool is_message_owned = false);
   private:
   static void ArenaDtor(void* object);
   inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
@@ -1116,16 +1303,14 @@ class NormalizerSpec PROTOBUF_FINAL :
   public:
   void clear_name();
   const std::string& name() const;
-  void set_name(const std::string& value);
-  void set_name(std::string&& value);
-  void set_name(const char* value);
-  void set_name(const char* value, size_t size);
+  template <typename ArgT0 = const std::string&, typename... ArgT>
+  void set_name(ArgT0&& arg0, ArgT... args);
   std::string* mutable_name();
-  std::string* release_name();
+  PROTOBUF_MUST_USE_RESULT std::string* release_name();
   void set_allocated_name(std::string* name);
   private:
   const std::string& _internal_name() const;
-  void _internal_set_name(const std::string& value);
+  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
   std::string* _internal_mutable_name();
   public:
 
@@ -1136,16 +1321,14 @@ class NormalizerSpec PROTOBUF_FINAL :
   public:
   void clear_precompiled_charsmap();
   const std::string& precompiled_charsmap() const;
-  void set_precompiled_charsmap(const std::string& value);
-  void set_precompiled_charsmap(std::string&& value);
-  void set_precompiled_charsmap(const char* value);
-  void set_precompiled_charsmap(const void* value, size_t size);
+  template <typename ArgT0 = const std::string&, typename... ArgT>
+  void set_precompiled_charsmap(ArgT0&& arg0, ArgT... args);
   std::string* mutable_precompiled_charsmap();
-  std::string* release_precompiled_charsmap();
+  PROTOBUF_MUST_USE_RESULT std::string* release_precompiled_charsmap();
   void set_allocated_precompiled_charsmap(std::string* precompiled_charsmap);
   private:
   const std::string& _internal_precompiled_charsmap() const;
-  void _internal_set_precompiled_charsmap(const std::string& value);
+  inline PROTOBUF_ALWAYS_INLINE void _internal_set_precompiled_charsmap(const std::string& value);
   std::string* _internal_mutable_precompiled_charsmap();
   public:
 
@@ -1156,16 +1339,14 @@ class NormalizerSpec PROTOBUF_FINAL :
   public:
   void clear_normalization_rule_tsv();
   const std::string& normalization_rule_tsv() const;
-  void set_normalization_rule_tsv(const std::string& value);
-  void set_normalization_rule_tsv(std::string&& value);
-  void set_normalization_rule_tsv(const char* value);
-  void set_normalization_rule_tsv(const char* value, size_t size);
+  template <typename ArgT0 = const std::string&, typename... ArgT>
+  void set_normalization_rule_tsv(ArgT0&& arg0, ArgT... args);
   std::string* mutable_normalization_rule_tsv();
-  std::string* release_normalization_rule_tsv();
+  PROTOBUF_MUST_USE_RESULT std::string* release_normalization_rule_tsv();
   void set_allocated_normalization_rule_tsv(std::string* normalization_rule_tsv);
   private:
   const std::string& _internal_normalization_rule_tsv() const;
-  void _internal_set_normalization_rule_tsv(const std::string& value);
+  inline PROTOBUF_ALWAYS_INLINE void _internal_set_normalization_rule_tsv(const std::string& value);
   std::string* _internal_mutable_normalization_rule_tsv();
   public:
 
@@ -1208,7 +1389,196 @@ class NormalizerSpec PROTOBUF_FINAL :
   void _internal_set_escape_whitespaces(bool value);
   public:
 
-  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(NormalizerSpec)
+
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline bool HasExtension(
+      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+          NormalizerSpec, _proto_TypeTraits, _field_type, _is_packed>& id) const {
+
+    return _extensions_.Has(id.number());
+  }
+
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline void ClearExtension(
+      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+          NormalizerSpec, _proto_TypeTraits, _field_type, _is_packed>& id) {
+    _extensions_.ClearExtension(id.number());
+
+  }
+
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline int ExtensionSize(
+      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+          NormalizerSpec, _proto_TypeTraits, _field_type, _is_packed>& id) const {
+
+    return _extensions_.ExtensionSize(id.number());
+  }
+
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline typename _proto_TypeTraits::Singular::ConstType GetExtension(
+      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+          NormalizerSpec, _proto_TypeTraits, _field_type, _is_packed>& id) const {
+
+    return _proto_TypeTraits::Get(id.number(), _extensions_,
+                                  id.default_value());
+  }
+
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline typename _proto_TypeTraits::Singular::MutableType MutableExtension(
+      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+          NormalizerSpec, _proto_TypeTraits, _field_type, _is_packed>& id) {
+
+    return _proto_TypeTraits::Mutable(id.number(), _field_type,
+                                      &_extensions_);
+  }
+
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline void SetExtension(
+      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+          NormalizerSpec, _proto_TypeTraits, _field_type, _is_packed>& id,
+      typename _proto_TypeTraits::Singular::ConstType value) {
+    _proto_TypeTraits::Set(id.number(), _field_type, value, &_extensions_);
+
+  }
+
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline void SetAllocatedExtension(
+      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+          NormalizerSpec, _proto_TypeTraits, _field_type, _is_packed>& id,
+      typename _proto_TypeTraits::Singular::MutableType value) {
+    _proto_TypeTraits::SetAllocated(id.number(), _field_type, value,
+                                    &_extensions_);
+
+  }
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline void UnsafeArenaSetAllocatedExtension(
+      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+          NormalizerSpec, _proto_TypeTraits, _field_type, _is_packed>& id,
+      typename _proto_TypeTraits::Singular::MutableType value) {
+    _proto_TypeTraits::UnsafeArenaSetAllocated(id.number(), _field_type,
+                                               value, &_extensions_);
+
+  }
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline PROTOBUF_MUST_USE_RESULT
+      typename _proto_TypeTraits::Singular::MutableType
+      ReleaseExtension(
+          const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+              NormalizerSpec, _proto_TypeTraits, _field_type, _is_packed>& id) {
+
+    return _proto_TypeTraits::Release(id.number(), _field_type,
+                                      &_extensions_);
+  }
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline typename _proto_TypeTraits::Singular::MutableType
+  UnsafeArenaReleaseExtension(
+      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+          NormalizerSpec, _proto_TypeTraits, _field_type, _is_packed>& id) {
+
+    return _proto_TypeTraits::UnsafeArenaRelease(id.number(), _field_type,
+                                                 &_extensions_);
+  }
+
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline typename _proto_TypeTraits::Repeated::ConstType GetExtension(
+      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+          NormalizerSpec, _proto_TypeTraits, _field_type, _is_packed>& id,
+      int index) const {
+
+    return _proto_TypeTraits::Get(id.number(), _extensions_, index);
+  }
+
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline typename _proto_TypeTraits::Repeated::MutableType MutableExtension(
+      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+          NormalizerSpec, _proto_TypeTraits, _field_type, _is_packed>& id,
+      int index) {
+
+    return _proto_TypeTraits::Mutable(id.number(), index, &_extensions_);
+  }
+
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline void SetExtension(
+      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+          NormalizerSpec, _proto_TypeTraits, _field_type, _is_packed>& id,
+      int index, typename _proto_TypeTraits::Repeated::ConstType value) {
+    _proto_TypeTraits::Set(id.number(), index, value, &_extensions_);
+
+  }
+
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline typename _proto_TypeTraits::Repeated::MutableType AddExtension(
+      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+          NormalizerSpec, _proto_TypeTraits, _field_type, _is_packed>& id) {
+    typename _proto_TypeTraits::Repeated::MutableType to_add =
+        _proto_TypeTraits::Add(id.number(), _field_type, &_extensions_);
+
+    return to_add;
+  }
+
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline void AddExtension(
+      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+          NormalizerSpec, _proto_TypeTraits, _field_type, _is_packed>& id,
+      typename _proto_TypeTraits::Repeated::ConstType value) {
+    _proto_TypeTraits::Add(id.number(), _field_type, _is_packed, value,
+                           &_extensions_);
+
+  }
+
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline const typename _proto_TypeTraits::Repeated::RepeatedFieldType&
+  GetRepeatedExtension(
+      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+          NormalizerSpec, _proto_TypeTraits, _field_type, _is_packed>& id) const {
+
+    return _proto_TypeTraits::GetRepeated(id.number(), _extensions_);
+  }
+
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline typename _proto_TypeTraits::Repeated::RepeatedFieldType*
+  MutableRepeatedExtension(
+      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+          NormalizerSpec, _proto_TypeTraits, _field_type, _is_packed>& id) {
+
+    return _proto_TypeTraits::MutableRepeated(id.number(), _field_type,
+                                              _is_packed, &_extensions_);
+  }
+
   // @@protoc_insertion_point(class_scope:sentencepiece.NormalizerSpec)
  private:
   class _Internal;
@@ -1230,11 +1600,12 @@ class NormalizerSpec PROTOBUF_FINAL :
 };
 // -------------------------------------------------------------------
 
-class SelfTestData_Sample PROTOBUF_FINAL :
+class SelfTestData_Sample final :
     public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sentencepiece.SelfTestData.Sample) */ {
  public:
   inline SelfTestData_Sample() : SelfTestData_Sample(nullptr) {}
-  virtual ~SelfTestData_Sample();
+  ~SelfTestData_Sample() override;
+  explicit constexpr SelfTestData_Sample(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
 
   SelfTestData_Sample(const SelfTestData_Sample& from);
   SelfTestData_Sample(SelfTestData_Sample&& from) noexcept
@@ -1247,8 +1618,13 @@ class SelfTestData_Sample PROTOBUF_FINAL :
     return *this;
   }
   inline SelfTestData_Sample& operator=(SelfTestData_Sample&& from) noexcept {
-    if (GetArena() == from.GetArena()) {
-      if (this != &from) InternalSwap(&from);
+    if (this == &from) return *this;
+    if (GetOwningArena() == from.GetOwningArena()
+  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
+        && GetOwningArena() != nullptr
+  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
+    ) {
+      InternalSwap(&from);
     } else {
       CopyFrom(from);
     }
@@ -1262,8 +1638,9 @@ class SelfTestData_Sample PROTOBUF_FINAL :
     return _internal_metadata_.mutable_unknown_fields<std::string>();
   }
 
-  static const SelfTestData_Sample& default_instance();
-
+  static const SelfTestData_Sample& default_instance() {
+    return *internal_default_instance();
+  }
   static inline const SelfTestData_Sample* internal_default_instance() {
     return reinterpret_cast<const SelfTestData_Sample*>(
                &_SelfTestData_Sample_default_instance_);
@@ -1276,7 +1653,7 @@ class SelfTestData_Sample PROTOBUF_FINAL :
   }
   inline void Swap(SelfTestData_Sample* other) {
     if (other == this) return;
-    if (GetArena() == other->GetArena()) {
+    if (GetOwningArena() == other->GetOwningArena()) {
       InternalSwap(other);
     } else {
       ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
@@ -1284,21 +1661,20 @@ class SelfTestData_Sample PROTOBUF_FINAL :
   }
   void UnsafeArenaSwap(SelfTestData_Sample* other) {
     if (other == this) return;
-    GOOGLE_DCHECK(GetArena() == other->GetArena());
+    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
     InternalSwap(other);
   }
 
   // implements Message ----------------------------------------------
 
   inline SelfTestData_Sample* New() const final {
-    return CreateMaybeMessage<SelfTestData_Sample>(nullptr);
+    return new SelfTestData_Sample();
   }
 
   SelfTestData_Sample* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
     return CreateMaybeMessage<SelfTestData_Sample>(arena);
   }
-  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
-    final;
+  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
   void CopyFrom(const SelfTestData_Sample& from);
   void MergeFrom(const SelfTestData_Sample& from);
   PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
@@ -1312,8 +1688,8 @@ class SelfTestData_Sample PROTOBUF_FINAL :
   int GetCachedSize() const final { return _cached_size_.Get(); }
 
   private:
-  inline void SharedCtor();
-  inline void SharedDtor();
+  void SharedCtor();
+  void SharedDtor();
   void SetCachedSize(int size) const;
   void InternalSwap(SelfTestData_Sample* other);
   friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
@@ -1321,7 +1697,8 @@ class SelfTestData_Sample PROTOBUF_FINAL :
     return "sentencepiece.SelfTestData.Sample";
   }
   protected:
-  explicit SelfTestData_Sample(::PROTOBUF_NAMESPACE_ID::Arena* arena);
+  explicit SelfTestData_Sample(::PROTOBUF_NAMESPACE_ID::Arena* arena,
+                       bool is_message_owned = false);
   private:
   static void ArenaDtor(void* object);
   inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
@@ -1344,16 +1721,14 @@ class SelfTestData_Sample PROTOBUF_FINAL :
   public:
   void clear_input();
   const std::string& input() const;
-  void set_input(const std::string& value);
-  void set_input(std::string&& value);
-  void set_input(const char* value);
-  void set_input(const char* value, size_t size);
+  template <typename ArgT0 = const std::string&, typename... ArgT>
+  void set_input(ArgT0&& arg0, ArgT... args);
   std::string* mutable_input();
-  std::string* release_input();
+  PROTOBUF_MUST_USE_RESULT std::string* release_input();
   void set_allocated_input(std::string* input);
   private:
   const std::string& _internal_input() const;
-  void _internal_set_input(const std::string& value);
+  inline PROTOBUF_ALWAYS_INLINE void _internal_set_input(const std::string& value);
   std::string* _internal_mutable_input();
   public:
 
@@ -1364,16 +1739,14 @@ class SelfTestData_Sample PROTOBUF_FINAL :
   public:
   void clear_expected();
   const std::string& expected() const;
-  void set_expected(const std::string& value);
-  void set_expected(std::string&& value);
-  void set_expected(const char* value);
-  void set_expected(const char* value, size_t size);
+  template <typename ArgT0 = const std::string&, typename... ArgT>
+  void set_expected(ArgT0&& arg0, ArgT... args);
   std::string* mutable_expected();
-  std::string* release_expected();
+  PROTOBUF_MUST_USE_RESULT std::string* release_expected();
   void set_allocated_expected(std::string* expected);
   private:
   const std::string& _internal_expected() const;
-  void _internal_set_expected(const std::string& value);
+  inline PROTOBUF_ALWAYS_INLINE void _internal_set_expected(const std::string& value);
   std::string* _internal_mutable_expected();
   public:
 
@@ -1392,11 +1765,12 @@ class SelfTestData_Sample PROTOBUF_FINAL :
 };
 // -------------------------------------------------------------------
 
-class SelfTestData PROTOBUF_FINAL :
+class SelfTestData final :
     public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sentencepiece.SelfTestData) */ {
  public:
   inline SelfTestData() : SelfTestData(nullptr) {}
-  virtual ~SelfTestData();
+  ~SelfTestData() override;
+  explicit constexpr SelfTestData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
 
   SelfTestData(const SelfTestData& from);
   SelfTestData(SelfTestData&& from) noexcept
@@ -1409,8 +1783,13 @@ class SelfTestData PROTOBUF_FINAL :
     return *this;
   }
   inline SelfTestData& operator=(SelfTestData&& from) noexcept {
-    if (GetArena() == from.GetArena()) {
-      if (this != &from) InternalSwap(&from);
+    if (this == &from) return *this;
+    if (GetOwningArena() == from.GetOwningArena()
+  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
+        && GetOwningArena() != nullptr
+  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
+    ) {
+      InternalSwap(&from);
     } else {
       CopyFrom(from);
     }
@@ -1424,8 +1803,9 @@ class SelfTestData PROTOBUF_FINAL :
     return _internal_metadata_.mutable_unknown_fields<std::string>();
   }
 
-  static const SelfTestData& default_instance();
-
+  static const SelfTestData& default_instance() {
+    return *internal_default_instance();
+  }
   static inline const SelfTestData* internal_default_instance() {
     return reinterpret_cast<const SelfTestData*>(
                &_SelfTestData_default_instance_);
@@ -1438,7 +1818,7 @@ class SelfTestData PROTOBUF_FINAL :
   }
   inline void Swap(SelfTestData* other) {
     if (other == this) return;
-    if (GetArena() == other->GetArena()) {
+    if (GetOwningArena() == other->GetOwningArena()) {
       InternalSwap(other);
     } else {
       ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
@@ -1446,21 +1826,20 @@ class SelfTestData PROTOBUF_FINAL :
   }
   void UnsafeArenaSwap(SelfTestData* other) {
     if (other == this) return;
-    GOOGLE_DCHECK(GetArena() == other->GetArena());
+    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
     InternalSwap(other);
   }
 
   // implements Message ----------------------------------------------
 
   inline SelfTestData* New() const final {
-    return CreateMaybeMessage<SelfTestData>(nullptr);
+    return new SelfTestData();
   }
 
   SelfTestData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
     return CreateMaybeMessage<SelfTestData>(arena);
   }
-  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
-    final;
+  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
   void CopyFrom(const SelfTestData& from);
   void MergeFrom(const SelfTestData& from);
   PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
@@ -1474,8 +1853,8 @@ class SelfTestData PROTOBUF_FINAL :
   int GetCachedSize() const final { return _cached_size_.Get(); }
 
   private:
-  inline void SharedCtor();
-  inline void SharedDtor();
+  void SharedCtor();
+  void SharedDtor();
   void SetCachedSize(int size) const;
   void InternalSwap(SelfTestData* other);
   friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
@@ -1483,7 +1862,8 @@ class SelfTestData PROTOBUF_FINAL :
     return "sentencepiece.SelfTestData";
   }
   protected:
-  explicit SelfTestData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
+  explicit SelfTestData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
+                       bool is_message_owned = false);
   private:
   static void ArenaDtor(void* object);
   inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
@@ -1518,7 +1898,196 @@ class SelfTestData PROTOBUF_FINAL :
   const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sentencepiece::SelfTestData_Sample >&
       samples() const;
 
-  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(SelfTestData)
+
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline bool HasExtension(
+      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+          SelfTestData, _proto_TypeTraits, _field_type, _is_packed>& id) const {
+
+    return _extensions_.Has(id.number());
+  }
+
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline void ClearExtension(
+      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+          SelfTestData, _proto_TypeTraits, _field_type, _is_packed>& id) {
+    _extensions_.ClearExtension(id.number());
+
+  }
+
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline int ExtensionSize(
+      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+          SelfTestData, _proto_TypeTraits, _field_type, _is_packed>& id) const {
+
+    return _extensions_.ExtensionSize(id.number());
+  }
+
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline typename _proto_TypeTraits::Singular::ConstType GetExtension(
+      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+          SelfTestData, _proto_TypeTraits, _field_type, _is_packed>& id) const {
+
+    return _proto_TypeTraits::Get(id.number(), _extensions_,
+                                  id.default_value());
+  }
+
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline typename _proto_TypeTraits::Singular::MutableType MutableExtension(
+      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+          SelfTestData, _proto_TypeTraits, _field_type, _is_packed>& id) {
+
+    return _proto_TypeTraits::Mutable(id.number(), _field_type,
+                                      &_extensions_);
+  }
+
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline void SetExtension(
+      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+          SelfTestData, _proto_TypeTraits, _field_type, _is_packed>& id,
+      typename _proto_TypeTraits::Singular::ConstType value) {
+    _proto_TypeTraits::Set(id.number(), _field_type, value, &_extensions_);
+
+  }
+
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline void SetAllocatedExtension(
+      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+          SelfTestData, _proto_TypeTraits, _field_type, _is_packed>& id,
+      typename _proto_TypeTraits::Singular::MutableType value) {
+    _proto_TypeTraits::SetAllocated(id.number(), _field_type, value,
+                                    &_extensions_);
+
+  }
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline void UnsafeArenaSetAllocatedExtension(
+      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+          SelfTestData, _proto_TypeTraits, _field_type, _is_packed>& id,
+      typename _proto_TypeTraits::Singular::MutableType value) {
+    _proto_TypeTraits::UnsafeArenaSetAllocated(id.number(), _field_type,
+                                               value, &_extensions_);
+
+  }
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline PROTOBUF_MUST_USE_RESULT
+      typename _proto_TypeTraits::Singular::MutableType
+      ReleaseExtension(
+          const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+              SelfTestData, _proto_TypeTraits, _field_type, _is_packed>& id) {
+
+    return _proto_TypeTraits::Release(id.number(), _field_type,
+                                      &_extensions_);
+  }
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline typename _proto_TypeTraits::Singular::MutableType
+  UnsafeArenaReleaseExtension(
+      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+          SelfTestData, _proto_TypeTraits, _field_type, _is_packed>& id) {
+
+    return _proto_TypeTraits::UnsafeArenaRelease(id.number(), _field_type,
+                                                 &_extensions_);
+  }
+
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline typename _proto_TypeTraits::Repeated::ConstType GetExtension(
+      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+          SelfTestData, _proto_TypeTraits, _field_type, _is_packed>& id,
+      int index) const {
+
+    return _proto_TypeTraits::Get(id.number(), _extensions_, index);
+  }
+
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline typename _proto_TypeTraits::Repeated::MutableType MutableExtension(
+      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+          SelfTestData, _proto_TypeTraits, _field_type, _is_packed>& id,
+      int index) {
+
+    return _proto_TypeTraits::Mutable(id.number(), index, &_extensions_);
+  }
+
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline void SetExtension(
+      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+          SelfTestData, _proto_TypeTraits, _field_type, _is_packed>& id,
+      int index, typename _proto_TypeTraits::Repeated::ConstType value) {
+    _proto_TypeTraits::Set(id.number(), index, value, &_extensions_);
+
+  }
+
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline typename _proto_TypeTraits::Repeated::MutableType AddExtension(
+      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+          SelfTestData, _proto_TypeTraits, _field_type, _is_packed>& id) {
+    typename _proto_TypeTraits::Repeated::MutableType to_add =
+        _proto_TypeTraits::Add(id.number(), _field_type, &_extensions_);
+
+    return to_add;
+  }
+
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline void AddExtension(
+      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+          SelfTestData, _proto_TypeTraits, _field_type, _is_packed>& id,
+      typename _proto_TypeTraits::Repeated::ConstType value) {
+    _proto_TypeTraits::Add(id.number(), _field_type, _is_packed, value,
+                           &_extensions_);
+
+  }
+
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline const typename _proto_TypeTraits::Repeated::RepeatedFieldType&
+  GetRepeatedExtension(
+      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+          SelfTestData, _proto_TypeTraits, _field_type, _is_packed>& id) const {
+
+    return _proto_TypeTraits::GetRepeated(id.number(), _extensions_);
+  }
+
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline typename _proto_TypeTraits::Repeated::RepeatedFieldType*
+  MutableRepeatedExtension(
+      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+          SelfTestData, _proto_TypeTraits, _field_type, _is_packed>& id) {
+
+    return _proto_TypeTraits::MutableRepeated(id.number(), _field_type,
+                                              _is_packed, &_extensions_);
+  }
+
   // @@protoc_insertion_point(class_scope:sentencepiece.SelfTestData)
  private:
   class _Internal;
@@ -1534,11 +2103,12 @@ class SelfTestData PROTOBUF_FINAL :
 };
 // -------------------------------------------------------------------
 
-class ModelProto_SentencePiece PROTOBUF_FINAL :
+class ModelProto_SentencePiece final :
     public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sentencepiece.ModelProto.SentencePiece) */ {
  public:
   inline ModelProto_SentencePiece() : ModelProto_SentencePiece(nullptr) {}
-  virtual ~ModelProto_SentencePiece();
+  ~ModelProto_SentencePiece() override;
+  explicit constexpr ModelProto_SentencePiece(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
 
   ModelProto_SentencePiece(const ModelProto_SentencePiece& from);
   ModelProto_SentencePiece(ModelProto_SentencePiece&& from) noexcept
@@ -1551,8 +2121,13 @@ class ModelProto_SentencePiece PROTOBUF_FINAL :
     return *this;
   }
   inline ModelProto_SentencePiece& operator=(ModelProto_SentencePiece&& from) noexcept {
-    if (GetArena() == from.GetArena()) {
-      if (this != &from) InternalSwap(&from);
+    if (this == &from) return *this;
+    if (GetOwningArena() == from.GetOwningArena()
+  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
+        && GetOwningArena() != nullptr
+  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
+    ) {
+      InternalSwap(&from);
     } else {
       CopyFrom(from);
     }
@@ -1566,8 +2141,9 @@ class ModelProto_SentencePiece PROTOBUF_FINAL :
     return _internal_metadata_.mutable_unknown_fields<std::string>();
   }
 
-  static const ModelProto_SentencePiece& default_instance();
-
+  static const ModelProto_SentencePiece& default_instance() {
+    return *internal_default_instance();
+  }
   static inline const ModelProto_SentencePiece* internal_default_instance() {
     return reinterpret_cast<const ModelProto_SentencePiece*>(
                &_ModelProto_SentencePiece_default_instance_);
@@ -1580,7 +2156,7 @@ class ModelProto_SentencePiece PROTOBUF_FINAL :
   }
   inline void Swap(ModelProto_SentencePiece* other) {
     if (other == this) return;
-    if (GetArena() == other->GetArena()) {
+    if (GetOwningArena() == other->GetOwningArena()) {
       InternalSwap(other);
     } else {
       ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
@@ -1588,21 +2164,20 @@ class ModelProto_SentencePiece PROTOBUF_FINAL :
   }
   void UnsafeArenaSwap(ModelProto_SentencePiece* other) {
     if (other == this) return;
-    GOOGLE_DCHECK(GetArena() == other->GetArena());
+    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
     InternalSwap(other);
   }
 
   // implements Message ----------------------------------------------
 
   inline ModelProto_SentencePiece* New() const final {
-    return CreateMaybeMessage<ModelProto_SentencePiece>(nullptr);
+    return new ModelProto_SentencePiece();
   }
 
   ModelProto_SentencePiece* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
     return CreateMaybeMessage<ModelProto_SentencePiece>(arena);
   }
-  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
-    final;
+  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
   void CopyFrom(const ModelProto_SentencePiece& from);
   void MergeFrom(const ModelProto_SentencePiece& from);
   PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
@@ -1616,8 +2191,8 @@ class ModelProto_SentencePiece PROTOBUF_FINAL :
   int GetCachedSize() const final { return _cached_size_.Get(); }
 
   private:
-  inline void SharedCtor();
-  inline void SharedDtor();
+  void SharedCtor();
+  void SharedDtor();
   void SetCachedSize(int size) const;
   void InternalSwap(ModelProto_SentencePiece* other);
   friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
@@ -1625,7 +2200,8 @@ class ModelProto_SentencePiece PROTOBUF_FINAL :
     return "sentencepiece.ModelProto.SentencePiece";
   }
   protected:
-  explicit ModelProto_SentencePiece(::PROTOBUF_NAMESPACE_ID::Arena* arena);
+  explicit ModelProto_SentencePiece(::PROTOBUF_NAMESPACE_ID::Arena* arena,
+                       bool is_message_owned = false);
   private:
   static void ArenaDtor(void* object);
   inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
@@ -1683,16 +2259,14 @@ class ModelProto_SentencePiece PROTOBUF_FINAL :
   public:
   void clear_piece();
   const std::string& piece() const;
-  void set_piece(const std::string& value);
-  void set_piece(std::string&& value);
-  void set_piece(const char* value);
-  void set_piece(const char* value, size_t size);
+  template <typename ArgT0 = const std::string&, typename... ArgT>
+  void set_piece(ArgT0&& arg0, ArgT... args);
   std::string* mutable_piece();
-  std::string* release_piece();
+  PROTOBUF_MUST_USE_RESULT std::string* release_piece();
   void set_allocated_piece(std::string* piece);
   private:
   const std::string& _internal_piece() const;
-  void _internal_set_piece(const std::string& value);
+  inline PROTOBUF_ALWAYS_INLINE void _internal_set_piece(const std::string& value);
   std::string* _internal_mutable_piece();
   public:
 
@@ -1722,7 +2296,196 @@ class ModelProto_SentencePiece PROTOBUF_FINAL :
   void _internal_set_type(::sentencepiece::ModelProto_SentencePiece_Type value);
   public:
 
-  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(ModelProto_SentencePiece)
+
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline bool HasExtension(
+      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+          ModelProto_SentencePiece, _proto_TypeTraits, _field_type, _is_packed>& id) const {
+
+    return _extensions_.Has(id.number());
+  }
+
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline void ClearExtension(
+      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+          ModelProto_SentencePiece, _proto_TypeTraits, _field_type, _is_packed>& id) {
+    _extensions_.ClearExtension(id.number());
+
+  }
+
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline int ExtensionSize(
+      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+          ModelProto_SentencePiece, _proto_TypeTraits, _field_type, _is_packed>& id) const {
+
+    return _extensions_.ExtensionSize(id.number());
+  }
+
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline typename _proto_TypeTraits::Singular::ConstType GetExtension(
+      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+          ModelProto_SentencePiece, _proto_TypeTraits, _field_type, _is_packed>& id) const {
+
+    return _proto_TypeTraits::Get(id.number(), _extensions_,
+                                  id.default_value());
+  }
+
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline typename _proto_TypeTraits::Singular::MutableType MutableExtension(
+      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+          ModelProto_SentencePiece, _proto_TypeTraits, _field_type, _is_packed>& id) {
+
+    return _proto_TypeTraits::Mutable(id.number(), _field_type,
+                                      &_extensions_);
+  }
+
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline void SetExtension(
+      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+          ModelProto_SentencePiece, _proto_TypeTraits, _field_type, _is_packed>& id,
+      typename _proto_TypeTraits::Singular::ConstType value) {
+    _proto_TypeTraits::Set(id.number(), _field_type, value, &_extensions_);
+
+  }
+
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline void SetAllocatedExtension(
+      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+          ModelProto_SentencePiece, _proto_TypeTraits, _field_type, _is_packed>& id,
+      typename _proto_TypeTraits::Singular::MutableType value) {
+    _proto_TypeTraits::SetAllocated(id.number(), _field_type, value,
+                                    &_extensions_);
+
+  }
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline void UnsafeArenaSetAllocatedExtension(
+      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+          ModelProto_SentencePiece, _proto_TypeTraits, _field_type, _is_packed>& id,
+      typename _proto_TypeTraits::Singular::MutableType value) {
+    _proto_TypeTraits::UnsafeArenaSetAllocated(id.number(), _field_type,
+                                               value, &_extensions_);
+
+  }
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline PROTOBUF_MUST_USE_RESULT
+      typename _proto_TypeTraits::Singular::MutableType
+      ReleaseExtension(
+          const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+              ModelProto_SentencePiece, _proto_TypeTraits, _field_type, _is_packed>& id) {
+
+    return _proto_TypeTraits::Release(id.number(), _field_type,
+                                      &_extensions_);
+  }
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline typename _proto_TypeTraits::Singular::MutableType
+  UnsafeArenaReleaseExtension(
+      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+          ModelProto_SentencePiece, _proto_TypeTraits, _field_type, _is_packed>& id) {
+
+    return _proto_TypeTraits::UnsafeArenaRelease(id.number(), _field_type,
+                                                 &_extensions_);
+  }
+
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline typename _proto_TypeTraits::Repeated::ConstType GetExtension(
+      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+          ModelProto_SentencePiece, _proto_TypeTraits, _field_type, _is_packed>& id,
+      int index) const {
+
+    return _proto_TypeTraits::Get(id.number(), _extensions_, index);
+  }
+
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline typename _proto_TypeTraits::Repeated::MutableType MutableExtension(
+      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+          ModelProto_SentencePiece, _proto_TypeTraits, _field_type, _is_packed>& id,
+      int index) {
+
+    return _proto_TypeTraits::Mutable(id.number(), index, &_extensions_);
+  }
+
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline void SetExtension(
+      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+          ModelProto_SentencePiece, _proto_TypeTraits, _field_type, _is_packed>& id,
+      int index, typename _proto_TypeTraits::Repeated::ConstType value) {
+    _proto_TypeTraits::Set(id.number(), index, value, &_extensions_);
+
+  }
+
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline typename _proto_TypeTraits::Repeated::MutableType AddExtension(
+      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+          ModelProto_SentencePiece, _proto_TypeTraits, _field_type, _is_packed>& id) {
+    typename _proto_TypeTraits::Repeated::MutableType to_add =
+        _proto_TypeTraits::Add(id.number(), _field_type, &_extensions_);
+
+    return to_add;
+  }
+
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline void AddExtension(
+      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+          ModelProto_SentencePiece, _proto_TypeTraits, _field_type, _is_packed>& id,
+      typename _proto_TypeTraits::Repeated::ConstType value) {
+    _proto_TypeTraits::Add(id.number(), _field_type, _is_packed, value,
+                           &_extensions_);
+
+  }
+
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline const typename _proto_TypeTraits::Repeated::RepeatedFieldType&
+  GetRepeatedExtension(
+      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+          ModelProto_SentencePiece, _proto_TypeTraits, _field_type, _is_packed>& id) const {
+
+    return _proto_TypeTraits::GetRepeated(id.number(), _extensions_);
+  }
+
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline typename _proto_TypeTraits::Repeated::RepeatedFieldType*
+  MutableRepeatedExtension(
+      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+          ModelProto_SentencePiece, _proto_TypeTraits, _field_type, _is_packed>& id) {
+
+    return _proto_TypeTraits::MutableRepeated(id.number(), _field_type,
+                                              _is_packed, &_extensions_);
+  }
+
   // @@protoc_insertion_point(class_scope:sentencepiece.ModelProto.SentencePiece)
  private:
   class _Internal;
@@ -1741,11 +2504,12 @@ class ModelProto_SentencePiece PROTOBUF_FINAL :
 };
 // -------------------------------------------------------------------
 
-class ModelProto PROTOBUF_FINAL :
+class ModelProto final :
     public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sentencepiece.ModelProto) */ {
  public:
   inline ModelProto() : ModelProto(nullptr) {}
-  virtual ~ModelProto();
+  ~ModelProto() override;
+  explicit constexpr ModelProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
 
   ModelProto(const ModelProto& from);
   ModelProto(ModelProto&& from) noexcept
@@ -1758,8 +2522,13 @@ class ModelProto PROTOBUF_FINAL :
     return *this;
   }
   inline ModelProto& operator=(ModelProto&& from) noexcept {
-    if (GetArena() == from.GetArena()) {
-      if (this != &from) InternalSwap(&from);
+    if (this == &from) return *this;
+    if (GetOwningArena() == from.GetOwningArena()
+  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
+        && GetOwningArena() != nullptr
+  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
+    ) {
+      InternalSwap(&from);
     } else {
       CopyFrom(from);
     }
@@ -1773,8 +2542,9 @@ class ModelProto PROTOBUF_FINAL :
     return _internal_metadata_.mutable_unknown_fields<std::string>();
   }
 
-  static const ModelProto& default_instance();
-
+  static const ModelProto& default_instance() {
+    return *internal_default_instance();
+  }
   static inline const ModelProto* internal_default_instance() {
     return reinterpret_cast<const ModelProto*>(
                &_ModelProto_default_instance_);
@@ -1787,7 +2557,7 @@ class ModelProto PROTOBUF_FINAL :
   }
   inline void Swap(ModelProto* other) {
     if (other == this) return;
-    if (GetArena() == other->GetArena()) {
+    if (GetOwningArena() == other->GetOwningArena()) {
       InternalSwap(other);
     } else {
       ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
@@ -1795,21 +2565,20 @@ class ModelProto PROTOBUF_FINAL :
   }
   void UnsafeArenaSwap(ModelProto* other) {
     if (other == this) return;
-    GOOGLE_DCHECK(GetArena() == other->GetArena());
+    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
     InternalSwap(other);
   }
 
   // implements Message ----------------------------------------------
 
   inline ModelProto* New() const final {
-    return CreateMaybeMessage<ModelProto>(nullptr);
+    return new ModelProto();
   }
 
   ModelProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
     return CreateMaybeMessage<ModelProto>(arena);
   }
-  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
-    final;
+  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
   void CopyFrom(const ModelProto& from);
   void MergeFrom(const ModelProto& from);
   PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
@@ -1823,8 +2592,8 @@ class ModelProto PROTOBUF_FINAL :
   int GetCachedSize() const final { return _cached_size_.Get(); }
 
   private:
-  inline void SharedCtor();
-  inline void SharedDtor();
+  void SharedCtor();
+  void SharedDtor();
   void SetCachedSize(int size) const;
   void InternalSwap(ModelProto* other);
   friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
@@ -1832,7 +2601,8 @@ class ModelProto PROTOBUF_FINAL :
     return "sentencepiece.ModelProto";
   }
   protected:
-  explicit ModelProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
+  explicit ModelProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
+                       bool is_message_owned = false);
   private:
   static void ArenaDtor(void* object);
   inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
@@ -1878,7 +2648,7 @@ class ModelProto PROTOBUF_FINAL :
   public:
   void clear_trainer_spec();
   const ::sentencepiece::TrainerSpec& trainer_spec() const;
-  ::sentencepiece::TrainerSpec* release_trainer_spec();
+  PROTOBUF_MUST_USE_RESULT ::sentencepiece::TrainerSpec* release_trainer_spec();
   ::sentencepiece::TrainerSpec* mutable_trainer_spec();
   void set_allocated_trainer_spec(::sentencepiece::TrainerSpec* trainer_spec);
   private:
@@ -1896,7 +2666,7 @@ class ModelProto PROTOBUF_FINAL :
   public:
   void clear_normalizer_spec();
   const ::sentencepiece::NormalizerSpec& normalizer_spec() const;
-  ::sentencepiece::NormalizerSpec* release_normalizer_spec();
+  PROTOBUF_MUST_USE_RESULT ::sentencepiece::NormalizerSpec* release_normalizer_spec();
   ::sentencepiece::NormalizerSpec* mutable_normalizer_spec();
   void set_allocated_normalizer_spec(::sentencepiece::NormalizerSpec* normalizer_spec);
   private:
@@ -1914,7 +2684,7 @@ class ModelProto PROTOBUF_FINAL :
   public:
   void clear_self_test_data();
   const ::sentencepiece::SelfTestData& self_test_data() const;
-  ::sentencepiece::SelfTestData* release_self_test_data();
+  PROTOBUF_MUST_USE_RESULT ::sentencepiece::SelfTestData* release_self_test_data();
   ::sentencepiece::SelfTestData* mutable_self_test_data();
   void set_allocated_self_test_data(::sentencepiece::SelfTestData* self_test_data);
   private:
@@ -1932,7 +2702,7 @@ class ModelProto PROTOBUF_FINAL :
   public:
   void clear_denormalizer_spec();
   const ::sentencepiece::NormalizerSpec& denormalizer_spec() const;
-  ::sentencepiece::NormalizerSpec* release_denormalizer_spec();
+  PROTOBUF_MUST_USE_RESULT ::sentencepiece::NormalizerSpec* release_denormalizer_spec();
   ::sentencepiece::NormalizerSpec* mutable_denormalizer_spec();
   void set_allocated_denormalizer_spec(::sentencepiece::NormalizerSpec* denormalizer_spec);
   private:
@@ -1943,7 +2713,196 @@ class ModelProto PROTOBUF_FINAL :
       ::sentencepiece::NormalizerSpec* denormalizer_spec);
   ::sentencepiece::NormalizerSpec* unsafe_arena_release_denormalizer_spec();
 
-  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(ModelProto)
+
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline bool HasExtension(
+      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+          ModelProto, _proto_TypeTraits, _field_type, _is_packed>& id) const {
+
+    return _extensions_.Has(id.number());
+  }
+
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline void ClearExtension(
+      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+          ModelProto, _proto_TypeTraits, _field_type, _is_packed>& id) {
+    _extensions_.ClearExtension(id.number());
+
+  }
+
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline int ExtensionSize(
+      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+          ModelProto, _proto_TypeTraits, _field_type, _is_packed>& id) const {
+
+    return _extensions_.ExtensionSize(id.number());
+  }
+
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline typename _proto_TypeTraits::Singular::ConstType GetExtension(
+      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+          ModelProto, _proto_TypeTraits, _field_type, _is_packed>& id) const {
+
+    return _proto_TypeTraits::Get(id.number(), _extensions_,
+                                  id.default_value());
+  }
+
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline typename _proto_TypeTraits::Singular::MutableType MutableExtension(
+      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+          ModelProto, _proto_TypeTraits, _field_type, _is_packed>& id) {
+
+    return _proto_TypeTraits::Mutable(id.number(), _field_type,
+                                      &_extensions_);
+  }
+
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline void SetExtension(
+      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+          ModelProto, _proto_TypeTraits, _field_type, _is_packed>& id,
+      typename _proto_TypeTraits::Singular::ConstType value) {
+    _proto_TypeTraits::Set(id.number(), _field_type, value, &_extensions_);
+
+  }
+
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline void SetAllocatedExtension(
+      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+          ModelProto, _proto_TypeTraits, _field_type, _is_packed>& id,
+      typename _proto_TypeTraits::Singular::MutableType value) {
+    _proto_TypeTraits::SetAllocated(id.number(), _field_type, value,
+                                    &_extensions_);
+
+  }
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline void UnsafeArenaSetAllocatedExtension(
+      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+          ModelProto, _proto_TypeTraits, _field_type, _is_packed>& id,
+      typename _proto_TypeTraits::Singular::MutableType value) {
+    _proto_TypeTraits::UnsafeArenaSetAllocated(id.number(), _field_type,
+                                               value, &_extensions_);
+
+  }
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline PROTOBUF_MUST_USE_RESULT
+      typename _proto_TypeTraits::Singular::MutableType
+      ReleaseExtension(
+          const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+              ModelProto, _proto_TypeTraits, _field_type, _is_packed>& id) {
+
+    return _proto_TypeTraits::Release(id.number(), _field_type,
+                                      &_extensions_);
+  }
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline typename _proto_TypeTraits::Singular::MutableType
+  UnsafeArenaReleaseExtension(
+      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+          ModelProto, _proto_TypeTraits, _field_type, _is_packed>& id) {
+
+    return _proto_TypeTraits::UnsafeArenaRelease(id.number(), _field_type,
+                                                 &_extensions_);
+  }
+
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline typename _proto_TypeTraits::Repeated::ConstType GetExtension(
+      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+          ModelProto, _proto_TypeTraits, _field_type, _is_packed>& id,
+      int index) const {
+
+    return _proto_TypeTraits::Get(id.number(), _extensions_, index);
+  }
+
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline typename _proto_TypeTraits::Repeated::MutableType MutableExtension(
+      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+          ModelProto, _proto_TypeTraits, _field_type, _is_packed>& id,
+      int index) {
+
+    return _proto_TypeTraits::Mutable(id.number(), index, &_extensions_);
+  }
+
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline void SetExtension(
+      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+          ModelProto, _proto_TypeTraits, _field_type, _is_packed>& id,
+      int index, typename _proto_TypeTraits::Repeated::ConstType value) {
+    _proto_TypeTraits::Set(id.number(), index, value, &_extensions_);
+
+  }
+
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline typename _proto_TypeTraits::Repeated::MutableType AddExtension(
+      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+          ModelProto, _proto_TypeTraits, _field_type, _is_packed>& id) {
+    typename _proto_TypeTraits::Repeated::MutableType to_add =
+        _proto_TypeTraits::Add(id.number(), _field_type, &_extensions_);
+
+    return to_add;
+  }
+
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline void AddExtension(
+      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+          ModelProto, _proto_TypeTraits, _field_type, _is_packed>& id,
+      typename _proto_TypeTraits::Repeated::ConstType value) {
+    _proto_TypeTraits::Add(id.number(), _field_type, _is_packed, value,
+                           &_extensions_);
+
+  }
+
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline const typename _proto_TypeTraits::Repeated::RepeatedFieldType&
+  GetRepeatedExtension(
+      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+          ModelProto, _proto_TypeTraits, _field_type, _is_packed>& id) const {
+
+    return _proto_TypeTraits::GetRepeated(id.number(), _extensions_);
+  }
+
+  template <typename _proto_TypeTraits,
+            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
+            bool _is_packed>
+  inline typename _proto_TypeTraits::Repeated::RepeatedFieldType*
+  MutableRepeatedExtension(
+      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
+          ModelProto, _proto_TypeTraits, _field_type, _is_packed>& id) {
+
+    return _proto_TypeTraits::MutableRepeated(id.number(), _field_type,
+                                              _is_packed, &_extensions_);
+  }
+
   // @@protoc_insertion_point(class_scope:sentencepiece.ModelProto)
  private:
   class _Internal;
@@ -1984,8 +2943,9 @@ inline void TrainerSpec::clear_input() {
   input_.Clear();
 }
 inline std::string* TrainerSpec::add_input() {
+  std::string* _s = _internal_add_input();
   // @@protoc_insertion_point(field_add_mutable:sentencepiece.TrainerSpec.input)
-  return _internal_add_input();
+  return _s;
 }
 inline const std::string& TrainerSpec::_internal_input(int index) const {
   return input_.Get(index);
@@ -1999,12 +2959,12 @@ inline std::string* TrainerSpec::mutable_input(int index) {
   return input_.Mutable(index);
 }
 inline void TrainerSpec::set_input(int index, const std::string& value) {
-  // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.input)
   input_.Mutable(index)->assign(value);
+  // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.input)
 }
 inline void TrainerSpec::set_input(int index, std::string&& value) {
-  // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.input)
   input_.Mutable(index)->assign(std::move(value));
+  // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.input)
 }
 inline void TrainerSpec::set_input(int index, const char* value) {
   GOOGLE_DCHECK(value != nullptr);
@@ -2063,43 +3023,28 @@ inline const std::string& TrainerSpec::input_format() const {
   // @@protoc_insertion_point(field_get:sentencepiece.TrainerSpec.input_format)
   return _internal_input_format();
 }
-inline void TrainerSpec::set_input_format(const std::string& value) {
-  _internal_set_input_format(value);
+template <typename ArgT0, typename... ArgT>
+inline PROTOBUF_ALWAYS_INLINE
+void TrainerSpec::set_input_format(ArgT0&& arg0, ArgT... args) {
+ _has_bits_[0] |= 0x00000002u;
+ input_format_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
   // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.input_format)
 }
 inline std::string* TrainerSpec::mutable_input_format() {
+  std::string* _s = _internal_mutable_input_format();
   // @@protoc_insertion_point(field_mutable:sentencepiece.TrainerSpec.input_format)
-  return _internal_mutable_input_format();
+  return _s;
 }
 inline const std::string& TrainerSpec::_internal_input_format() const {
   return input_format_.Get();
 }
 inline void TrainerSpec::_internal_set_input_format(const std::string& value) {
   _has_bits_[0] |= 0x00000002u;
-  input_format_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
-}
-inline void TrainerSpec::set_input_format(std::string&& value) {
-  _has_bits_[0] |= 0x00000002u;
-  input_format_.Set(
-    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
-  // @@protoc_insertion_point(field_set_rvalue:sentencepiece.TrainerSpec.input_format)
-}
-inline void TrainerSpec::set_input_format(const char* value) {
-  GOOGLE_DCHECK(value != nullptr);
-  _has_bits_[0] |= 0x00000002u;
-  input_format_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
-  // @@protoc_insertion_point(field_set_char:sentencepiece.TrainerSpec.input_format)
-}
-inline void TrainerSpec::set_input_format(const char* value,
-    size_t size) {
-  _has_bits_[0] |= 0x00000002u;
-  input_format_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
-      reinterpret_cast<const char*>(value), size), GetArena());
-  // @@protoc_insertion_point(field_set_pointer:sentencepiece.TrainerSpec.input_format)
+  input_format_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
 }
 inline std::string* TrainerSpec::_internal_mutable_input_format() {
   _has_bits_[0] |= 0x00000002u;
-  return input_format_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
+  return input_format_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
 }
 inline std::string* TrainerSpec::release_input_format() {
   // @@protoc_insertion_point(field_release:sentencepiece.TrainerSpec.input_format)
@@ -2107,7 +3052,7 @@ inline std::string* TrainerSpec::release_input_format() {
     return nullptr;
   }
   _has_bits_[0] &= ~0x00000002u;
-  return input_format_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
+  return input_format_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
 }
 inline void TrainerSpec::set_allocated_input_format(std::string* input_format) {
   if (input_format != nullptr) {
@@ -2116,7 +3061,7 @@ inline void TrainerSpec::set_allocated_input_format(std::string* input_format) {
     _has_bits_[0] &= ~0x00000002u;
   }
   input_format_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), input_format,
-      GetArena());
+      GetArenaForAllocation());
   // @@protoc_insertion_point(field_set_allocated:sentencepiece.TrainerSpec.input_format)
 }
 
@@ -2136,43 +3081,28 @@ inline const std::string& TrainerSpec::model_prefix() const {
   // @@protoc_insertion_point(field_get:sentencepiece.TrainerSpec.model_prefix)
   return _internal_model_prefix();
 }
-inline void TrainerSpec::set_model_prefix(const std::string& value) {
-  _internal_set_model_prefix(value);
+template <typename ArgT0, typename... ArgT>
+inline PROTOBUF_ALWAYS_INLINE
+void TrainerSpec::set_model_prefix(ArgT0&& arg0, ArgT... args) {
+ _has_bits_[0] |= 0x00000001u;
+ model_prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
   // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.model_prefix)
 }
 inline std::string* TrainerSpec::mutable_model_prefix() {
+  std::string* _s = _internal_mutable_model_prefix();
   // @@protoc_insertion_point(field_mutable:sentencepiece.TrainerSpec.model_prefix)
-  return _internal_mutable_model_prefix();
+  return _s;
 }
 inline const std::string& TrainerSpec::_internal_model_prefix() const {
   return model_prefix_.Get();
 }
 inline void TrainerSpec::_internal_set_model_prefix(const std::string& value) {
   _has_bits_[0] |= 0x00000001u;
-  model_prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
-}
-inline void TrainerSpec::set_model_prefix(std::string&& value) {
-  _has_bits_[0] |= 0x00000001u;
-  model_prefix_.Set(
-    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
-  // @@protoc_insertion_point(field_set_rvalue:sentencepiece.TrainerSpec.model_prefix)
-}
-inline void TrainerSpec::set_model_prefix(const char* value) {
-  GOOGLE_DCHECK(value != nullptr);
-  _has_bits_[0] |= 0x00000001u;
-  model_prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
-  // @@protoc_insertion_point(field_set_char:sentencepiece.TrainerSpec.model_prefix)
-}
-inline void TrainerSpec::set_model_prefix(const char* value,
-    size_t size) {
-  _has_bits_[0] |= 0x00000001u;
-  model_prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
-      reinterpret_cast<const char*>(value), size), GetArena());
-  // @@protoc_insertion_point(field_set_pointer:sentencepiece.TrainerSpec.model_prefix)
+  model_prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
 }
 inline std::string* TrainerSpec::_internal_mutable_model_prefix() {
   _has_bits_[0] |= 0x00000001u;
-  return model_prefix_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
+  return model_prefix_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
 }
 inline std::string* TrainerSpec::release_model_prefix() {
   // @@protoc_insertion_point(field_release:sentencepiece.TrainerSpec.model_prefix)
@@ -2180,7 +3110,7 @@ inline std::string* TrainerSpec::release_model_prefix() {
     return nullptr;
   }
   _has_bits_[0] &= ~0x00000001u;
-  return model_prefix_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
+  return model_prefix_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
 }
 inline void TrainerSpec::set_allocated_model_prefix(std::string* model_prefix) {
   if (model_prefix != nullptr) {
@@ -2189,7 +3119,7 @@ inline void TrainerSpec::set_allocated_model_prefix(std::string* model_prefix) {
     _has_bits_[0] &= ~0x00000001u;
   }
   model_prefix_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_prefix,
-      GetArena());
+      GetArenaForAllocation());
   // @@protoc_insertion_point(field_set_allocated:sentencepiece.TrainerSpec.model_prefix)
 }
 
@@ -2261,8 +3191,9 @@ inline void TrainerSpec::clear_accept_language() {
   accept_language_.Clear();
 }
 inline std::string* TrainerSpec::add_accept_language() {
+  std::string* _s = _internal_add_accept_language();
   // @@protoc_insertion_point(field_add_mutable:sentencepiece.TrainerSpec.accept_language)
-  return _internal_add_accept_language();
+  return _s;
 }
 inline const std::string& TrainerSpec::_internal_accept_language(int index) const {
   return accept_language_.Get(index);
@@ -2276,12 +3207,12 @@ inline std::string* TrainerSpec::mutable_accept_language(int index) {
   return accept_language_.Mutable(index);
 }
 inline void TrainerSpec::set_accept_language(int index, const std::string& value) {
-  // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.accept_language)
   accept_language_.Mutable(index)->assign(value);
+  // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.accept_language)
 }
 inline void TrainerSpec::set_accept_language(int index, std::string&& value) {
-  // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.accept_language)
   accept_language_.Mutable(index)->assign(std::move(value));
+  // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.accept_language)
 }
 inline void TrainerSpec::set_accept_language(int index, const char* value) {
   GOOGLE_DCHECK(value != nullptr);
@@ -2389,7 +3320,7 @@ inline bool TrainerSpec::has_input_sentence_size() const {
   return _internal_has_input_sentence_size();
 }
 inline void TrainerSpec::clear_input_sentence_size() {
-  input_sentence_size_ = PROTOBUF_ULONGLONG(0);
+  input_sentence_size_ = uint64_t{0u};
   _has_bits_[0] &= ~0x00000400u;
 }
 inline ::PROTOBUF_NAMESPACE_ID::uint64 TrainerSpec::_internal_input_sentence_size() const {
@@ -2839,8 +3770,9 @@ inline void TrainerSpec::clear_control_symbols() {
   control_symbols_.Clear();
 }
 inline std::string* TrainerSpec::add_control_symbols() {
+  std::string* _s = _internal_add_control_symbols();
   // @@protoc_insertion_point(field_add_mutable:sentencepiece.TrainerSpec.control_symbols)
-  return _internal_add_control_symbols();
+  return _s;
 }
 inline const std::string& TrainerSpec::_internal_control_symbols(int index) const {
   return control_symbols_.Get(index);
@@ -2854,12 +3786,12 @@ inline std::string* TrainerSpec::mutable_control_symbols(int index) {
   return control_symbols_.Mutable(index);
 }
 inline void TrainerSpec::set_control_symbols(int index, const std::string& value) {
-  // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.control_symbols)
   control_symbols_.Mutable(index)->assign(value);
+  // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.control_symbols)
 }
 inline void TrainerSpec::set_control_symbols(int index, std::string&& value) {
-  // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.control_symbols)
   control_symbols_.Mutable(index)->assign(std::move(value));
+  // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.control_symbols)
 }
 inline void TrainerSpec::set_control_symbols(int index, const char* value) {
   GOOGLE_DCHECK(value != nullptr);
@@ -2913,8 +3845,9 @@ inline void TrainerSpec::clear_user_defined_symbols() {
   user_defined_symbols_.Clear();
 }
 inline std::string* TrainerSpec::add_user_defined_symbols() {
+  std::string* _s = _internal_add_user_defined_symbols();
   // @@protoc_insertion_point(field_add_mutable:sentencepiece.TrainerSpec.user_defined_symbols)
-  return _internal_add_user_defined_symbols();
+  return _s;
 }
 inline const std::string& TrainerSpec::_internal_user_defined_symbols(int index) const {
   return user_defined_symbols_.Get(index);
@@ -2928,12 +3861,12 @@ inline std::string* TrainerSpec::mutable_user_defined_symbols(int index) {
   return user_defined_symbols_.Mutable(index);
 }
 inline void TrainerSpec::set_user_defined_symbols(int index, const std::string& value) {
-  // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.user_defined_symbols)
   user_defined_symbols_.Mutable(index)->assign(value);
+  // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.user_defined_symbols)
 }
 inline void TrainerSpec::set_user_defined_symbols(int index, std::string&& value) {
-  // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.user_defined_symbols)
   user_defined_symbols_.Mutable(index)->assign(std::move(value));
+  // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.user_defined_symbols)
 }
 inline void TrainerSpec::set_user_defined_symbols(int index, const char* value) {
   GOOGLE_DCHECK(value != nullptr);
@@ -2992,43 +3925,28 @@ inline const std::string& TrainerSpec::required_chars() const {
   // @@protoc_insertion_point(field_get:sentencepiece.TrainerSpec.required_chars)
   return _internal_required_chars();
 }
-inline void TrainerSpec::set_required_chars(const std::string& value) {
-  _internal_set_required_chars(value);
+template <typename ArgT0, typename... ArgT>
+inline PROTOBUF_ALWAYS_INLINE
+void TrainerSpec::set_required_chars(ArgT0&& arg0, ArgT... args) {
+ _has_bits_[0] |= 0x00000004u;
+ required_chars_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
   // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.required_chars)
 }
 inline std::string* TrainerSpec::mutable_required_chars() {
+  std::string* _s = _internal_mutable_required_chars();
   // @@protoc_insertion_point(field_mutable:sentencepiece.TrainerSpec.required_chars)
-  return _internal_mutable_required_chars();
+  return _s;
 }
 inline const std::string& TrainerSpec::_internal_required_chars() const {
   return required_chars_.Get();
 }
 inline void TrainerSpec::_internal_set_required_chars(const std::string& value) {
   _has_bits_[0] |= 0x00000004u;
-  required_chars_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
-}
-inline void TrainerSpec::set_required_chars(std::string&& value) {
-  _has_bits_[0] |= 0x00000004u;
-  required_chars_.Set(
-    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
-  // @@protoc_insertion_point(field_set_rvalue:sentencepiece.TrainerSpec.required_chars)
-}
-inline void TrainerSpec::set_required_chars(const char* value) {
-  GOOGLE_DCHECK(value != nullptr);
-  _has_bits_[0] |= 0x00000004u;
-  required_chars_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
-  // @@protoc_insertion_point(field_set_char:sentencepiece.TrainerSpec.required_chars)
-}
-inline void TrainerSpec::set_required_chars(const char* value,
-    size_t size) {
-  _has_bits_[0] |= 0x00000004u;
-  required_chars_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
-      reinterpret_cast<const char*>(value), size), GetArena());
-  // @@protoc_insertion_point(field_set_pointer:sentencepiece.TrainerSpec.required_chars)
+  required_chars_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
 }
 inline std::string* TrainerSpec::_internal_mutable_required_chars() {
   _has_bits_[0] |= 0x00000004u;
-  return required_chars_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
+  return required_chars_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
 }
 inline std::string* TrainerSpec::release_required_chars() {
   // @@protoc_insertion_point(field_release:sentencepiece.TrainerSpec.required_chars)
@@ -3036,7 +3954,7 @@ inline std::string* TrainerSpec::release_required_chars() {
     return nullptr;
   }
   _has_bits_[0] &= ~0x00000004u;
-  return required_chars_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
+  return required_chars_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
 }
 inline void TrainerSpec::set_allocated_required_chars(std::string* required_chars) {
   if (required_chars != nullptr) {
@@ -3045,7 +3963,7 @@ inline void TrainerSpec::set_allocated_required_chars(std::string* required_char
     _has_bits_[0] &= ~0x00000004u;
   }
   required_chars_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), required_chars,
-      GetArena());
+      GetArenaForAllocation());
   // @@protoc_insertion_point(field_set_allocated:sentencepiece.TrainerSpec.required_chars)
 }
 
@@ -3282,7 +4200,7 @@ inline bool TrainerSpec::has_unk_piece() const {
   return _internal_has_unk_piece();
 }
 inline void TrainerSpec::clear_unk_piece() {
-  unk_piece_.ClearToDefault(::sentencepiece::TrainerSpec::_i_give_permission_to_break_this_code_default_unk_piece_, GetArena());
+  unk_piece_.ClearToDefault(::sentencepiece::TrainerSpec::_i_give_permission_to_break_this_code_default_unk_piece_, GetArenaForAllocation());
   _has_bits_[0] &= ~0x00000010u;
 }
 inline const std::string& TrainerSpec::unk_piece() const {
@@ -3290,43 +4208,28 @@ inline const std::string& TrainerSpec::unk_piece() const {
   if (unk_piece_.IsDefault(nullptr)) return _i_give_permission_to_break_this_code_default_unk_piece_.get();
   return _internal_unk_piece();
 }
-inline void TrainerSpec::set_unk_piece(const std::string& value) {
-  _internal_set_unk_piece(value);
+template <typename ArgT0, typename... ArgT>
+inline PROTOBUF_ALWAYS_INLINE
+void TrainerSpec::set_unk_piece(ArgT0&& arg0, ArgT... args) {
+ _has_bits_[0] |= 0x00000010u;
+ unk_piece_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
   // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.unk_piece)
 }
 inline std::string* TrainerSpec::mutable_unk_piece() {
+  std::string* _s = _internal_mutable_unk_piece();
   // @@protoc_insertion_point(field_mutable:sentencepiece.TrainerSpec.unk_piece)
-  return _internal_mutable_unk_piece();
+  return _s;
 }
 inline const std::string& TrainerSpec::_internal_unk_piece() const {
   return unk_piece_.Get();
 }
 inline void TrainerSpec::_internal_set_unk_piece(const std::string& value) {
   _has_bits_[0] |= 0x00000010u;
-  unk_piece_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, value, GetArena());
-}
-inline void TrainerSpec::set_unk_piece(std::string&& value) {
-  _has_bits_[0] |= 0x00000010u;
-  unk_piece_.Set(
-    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, ::std::move(value), GetArena());
-  // @@protoc_insertion_point(field_set_rvalue:sentencepiece.TrainerSpec.unk_piece)
-}
-inline void TrainerSpec::set_unk_piece(const char* value) {
-  GOOGLE_DCHECK(value != nullptr);
-  _has_bits_[0] |= 0x00000010u;
-  unk_piece_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, ::std::string(value), GetArena());
-  // @@protoc_insertion_point(field_set_char:sentencepiece.TrainerSpec.unk_piece)
-}
-inline void TrainerSpec::set_unk_piece(const char* value,
-    size_t size) {
-  _has_bits_[0] |= 0x00000010u;
-  unk_piece_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, ::std::string(
-      reinterpret_cast<const char*>(value), size), GetArena());
-  // @@protoc_insertion_point(field_set_pointer:sentencepiece.TrainerSpec.unk_piece)
+  unk_piece_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, value, GetArenaForAllocation());
 }
 inline std::string* TrainerSpec::_internal_mutable_unk_piece() {
   _has_bits_[0] |= 0x00000010u;
-  return unk_piece_.Mutable(::sentencepiece::TrainerSpec::_i_give_permission_to_break_this_code_default_unk_piece_, GetArena());
+  return unk_piece_.Mutable(::sentencepiece::TrainerSpec::_i_give_permission_to_break_this_code_default_unk_piece_, GetArenaForAllocation());
 }
 inline std::string* TrainerSpec::release_unk_piece() {
   // @@protoc_insertion_point(field_release:sentencepiece.TrainerSpec.unk_piece)
@@ -3334,7 +4237,7 @@ inline std::string* TrainerSpec::release_unk_piece() {
     return nullptr;
   }
   _has_bits_[0] &= ~0x00000010u;
-  return unk_piece_.ReleaseNonDefault(nullptr, GetArena());
+  return unk_piece_.ReleaseNonDefault(nullptr, GetArenaForAllocation());
 }
 inline void TrainerSpec::set_allocated_unk_piece(std::string* unk_piece) {
   if (unk_piece != nullptr) {
@@ -3343,7 +4246,7 @@ inline void TrainerSpec::set_allocated_unk_piece(std::string* unk_piece) {
     _has_bits_[0] &= ~0x00000010u;
   }
   unk_piece_.SetAllocated(nullptr, unk_piece,
-      GetArena());
+      GetArenaForAllocation());
   // @@protoc_insertion_point(field_set_allocated:sentencepiece.TrainerSpec.unk_piece)
 }
 
@@ -3356,7 +4259,7 @@ inline bool TrainerSpec::has_bos_piece() const {
   return _internal_has_bos_piece();
 }
 inline void TrainerSpec::clear_bos_piece() {
-  bos_piece_.ClearToDefault(::sentencepiece::TrainerSpec::_i_give_permission_to_break_this_code_default_bos_piece_, GetArena());
+  bos_piece_.ClearToDefault(::sentencepiece::TrainerSpec::_i_give_permission_to_break_this_code_default_bos_piece_, GetArenaForAllocation());
   _has_bits_[0] &= ~0x00000020u;
 }
 inline const std::string& TrainerSpec::bos_piece() const {
@@ -3364,43 +4267,28 @@ inline const std::string& TrainerSpec::bos_piece() const {
   if (bos_piece_.IsDefault(nullptr)) return _i_give_permission_to_break_this_code_default_bos_piece_.get();
   return _internal_bos_piece();
 }
-inline void TrainerSpec::set_bos_piece(const std::string& value) {
-  _internal_set_bos_piece(value);
+template <typename ArgT0, typename... ArgT>
+inline PROTOBUF_ALWAYS_INLINE
+void TrainerSpec::set_bos_piece(ArgT0&& arg0, ArgT... args) {
+ _has_bits_[0] |= 0x00000020u;
+ bos_piece_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
   // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.bos_piece)
 }
 inline std::string* TrainerSpec::mutable_bos_piece() {
+  std::string* _s = _internal_mutable_bos_piece();
   // @@protoc_insertion_point(field_mutable:sentencepiece.TrainerSpec.bos_piece)
-  return _internal_mutable_bos_piece();
+  return _s;
 }
 inline const std::string& TrainerSpec::_internal_bos_piece() const {
   return bos_piece_.Get();
 }
 inline void TrainerSpec::_internal_set_bos_piece(const std::string& value) {
   _has_bits_[0] |= 0x00000020u;
-  bos_piece_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, value, GetArena());
-}
-inline void TrainerSpec::set_bos_piece(std::string&& value) {
-  _has_bits_[0] |= 0x00000020u;
-  bos_piece_.Set(
-    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, ::std::move(value), GetArena());
-  // @@protoc_insertion_point(field_set_rvalue:sentencepiece.TrainerSpec.bos_piece)
-}
-inline void TrainerSpec::set_bos_piece(const char* value) {
-  GOOGLE_DCHECK(value != nullptr);
-  _has_bits_[0] |= 0x00000020u;
-  bos_piece_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, ::std::string(value), GetArena());
-  // @@protoc_insertion_point(field_set_char:sentencepiece.TrainerSpec.bos_piece)
-}
-inline void TrainerSpec::set_bos_piece(const char* value,
-    size_t size) {
-  _has_bits_[0] |= 0x00000020u;
-  bos_piece_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, ::std::string(
-      reinterpret_cast<const char*>(value), size), GetArena());
-  // @@protoc_insertion_point(field_set_pointer:sentencepiece.TrainerSpec.bos_piece)
+  bos_piece_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, value, GetArenaForAllocation());
 }
 inline std::string* TrainerSpec::_internal_mutable_bos_piece() {
   _has_bits_[0] |= 0x00000020u;
-  return bos_piece_.Mutable(::sentencepiece::TrainerSpec::_i_give_permission_to_break_this_code_default_bos_piece_, GetArena());
+  return bos_piece_.Mutable(::sentencepiece::TrainerSpec::_i_give_permission_to_break_this_code_default_bos_piece_, GetArenaForAllocation());
 }
 inline std::string* TrainerSpec::release_bos_piece() {
   // @@protoc_insertion_point(field_release:sentencepiece.TrainerSpec.bos_piece)
@@ -3408,7 +4296,7 @@ inline std::string* TrainerSpec::release_bos_piece() {
     return nullptr;
   }
   _has_bits_[0] &= ~0x00000020u;
-  return bos_piece_.ReleaseNonDefault(nullptr, GetArena());
+  return bos_piece_.ReleaseNonDefault(nullptr, GetArenaForAllocation());
 }
 inline void TrainerSpec::set_allocated_bos_piece(std::string* bos_piece) {
   if (bos_piece != nullptr) {
@@ -3417,7 +4305,7 @@ inline void TrainerSpec::set_allocated_bos_piece(std::string* bos_piece) {
     _has_bits_[0] &= ~0x00000020u;
   }
   bos_piece_.SetAllocated(nullptr, bos_piece,
-      GetArena());
+      GetArenaForAllocation());
   // @@protoc_insertion_point(field_set_allocated:sentencepiece.TrainerSpec.bos_piece)
 }
 
@@ -3430,7 +4318,7 @@ inline bool TrainerSpec::has_eos_piece() const {
   return _internal_has_eos_piece();
 }
 inline void TrainerSpec::clear_eos_piece() {
-  eos_piece_.ClearToDefault(::sentencepiece::TrainerSpec::_i_give_permission_to_break_this_code_default_eos_piece_, GetArena());
+  eos_piece_.ClearToDefault(::sentencepiece::TrainerSpec::_i_give_permission_to_break_this_code_default_eos_piece_, GetArenaForAllocation());
   _has_bits_[0] &= ~0x00000040u;
 }
 inline const std::string& TrainerSpec::eos_piece() const {
@@ -3438,43 +4326,28 @@ inline const std::string& TrainerSpec::eos_piece() const {
   if (eos_piece_.IsDefault(nullptr)) return _i_give_permission_to_break_this_code_default_eos_piece_.get();
   return _internal_eos_piece();
 }
-inline void TrainerSpec::set_eos_piece(const std::string& value) {
-  _internal_set_eos_piece(value);
+template <typename ArgT0, typename... ArgT>
+inline PROTOBUF_ALWAYS_INLINE
+void TrainerSpec::set_eos_piece(ArgT0&& arg0, ArgT... args) {
+ _has_bits_[0] |= 0x00000040u;
+ eos_piece_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
   // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.eos_piece)
 }
 inline std::string* TrainerSpec::mutable_eos_piece() {
+  std::string* _s = _internal_mutable_eos_piece();
   // @@protoc_insertion_point(field_mutable:sentencepiece.TrainerSpec.eos_piece)
-  return _internal_mutable_eos_piece();
+  return _s;
 }
 inline const std::string& TrainerSpec::_internal_eos_piece() const {
   return eos_piece_.Get();
 }
 inline void TrainerSpec::_internal_set_eos_piece(const std::string& value) {
   _has_bits_[0] |= 0x00000040u;
-  eos_piece_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, value, GetArena());
-}
-inline void TrainerSpec::set_eos_piece(std::string&& value) {
-  _has_bits_[0] |= 0x00000040u;
-  eos_piece_.Set(
-    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, ::std::move(value), GetArena());
-  // @@protoc_insertion_point(field_set_rvalue:sentencepiece.TrainerSpec.eos_piece)
-}
-inline void TrainerSpec::set_eos_piece(const char* value) {
-  GOOGLE_DCHECK(value != nullptr);
-  _has_bits_[0] |= 0x00000040u;
-  eos_piece_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, ::std::string(value), GetArena());
-  // @@protoc_insertion_point(field_set_char:sentencepiece.TrainerSpec.eos_piece)
-}
-inline void TrainerSpec::set_eos_piece(const char* value,
-    size_t size) {
-  _has_bits_[0] |= 0x00000040u;
-  eos_piece_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, ::std::string(
-      reinterpret_cast<const char*>(value), size), GetArena());
-  // @@protoc_insertion_point(field_set_pointer:sentencepiece.TrainerSpec.eos_piece)
+  eos_piece_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, value, GetArenaForAllocation());
 }
 inline std::string* TrainerSpec::_internal_mutable_eos_piece() {
   _has_bits_[0] |= 0x00000040u;
-  return eos_piece_.Mutable(::sentencepiece::TrainerSpec::_i_give_permission_to_break_this_code_default_eos_piece_, GetArena());
+  return eos_piece_.Mutable(::sentencepiece::TrainerSpec::_i_give_permission_to_break_this_code_default_eos_piece_, GetArenaForAllocation());
 }
 inline std::string* TrainerSpec::release_eos_piece() {
   // @@protoc_insertion_point(field_release:sentencepiece.TrainerSpec.eos_piece)
@@ -3482,7 +4355,7 @@ inline std::string* TrainerSpec::release_eos_piece() {
     return nullptr;
   }
   _has_bits_[0] &= ~0x00000040u;
-  return eos_piece_.ReleaseNonDefault(nullptr, GetArena());
+  return eos_piece_.ReleaseNonDefault(nullptr, GetArenaForAllocation());
 }
 inline void TrainerSpec::set_allocated_eos_piece(std::string* eos_piece) {
   if (eos_piece != nullptr) {
@@ -3491,7 +4364,7 @@ inline void TrainerSpec::set_allocated_eos_piece(std::string* eos_piece) {
     _has_bits_[0] &= ~0x00000040u;
   }
   eos_piece_.SetAllocated(nullptr, eos_piece,
-      GetArena());
+      GetArenaForAllocation());
   // @@protoc_insertion_point(field_set_allocated:sentencepiece.TrainerSpec.eos_piece)
 }
 
@@ -3504,7 +4377,7 @@ inline bool TrainerSpec::has_pad_piece() const {
   return _internal_has_pad_piece();
 }
 inline void TrainerSpec::clear_pad_piece() {
-  pad_piece_.ClearToDefault(::sentencepiece::TrainerSpec::_i_give_permission_to_break_this_code_default_pad_piece_, GetArena());
+  pad_piece_.ClearToDefault(::sentencepiece::TrainerSpec::_i_give_permission_to_break_this_code_default_pad_piece_, GetArenaForAllocation());
   _has_bits_[0] &= ~0x00000080u;
 }
 inline const std::string& TrainerSpec::pad_piece() const {
@@ -3512,43 +4385,28 @@ inline const std::string& TrainerSpec::pad_piece() const {
   if (pad_piece_.IsDefault(nullptr)) return _i_give_permission_to_break_this_code_default_pad_piece_.get();
   return _internal_pad_piece();
 }
-inline void TrainerSpec::set_pad_piece(const std::string& value) {
-  _internal_set_pad_piece(value);
+template <typename ArgT0, typename... ArgT>
+inline PROTOBUF_ALWAYS_INLINE
+void TrainerSpec::set_pad_piece(ArgT0&& arg0, ArgT... args) {
+ _has_bits_[0] |= 0x00000080u;
+ pad_piece_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
   // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.pad_piece)
 }
 inline std::string* TrainerSpec::mutable_pad_piece() {
+  std::string* _s = _internal_mutable_pad_piece();
   // @@protoc_insertion_point(field_mutable:sentencepiece.TrainerSpec.pad_piece)
-  return _internal_mutable_pad_piece();
+  return _s;
 }
 inline const std::string& TrainerSpec::_internal_pad_piece() const {
   return pad_piece_.Get();
 }
 inline void TrainerSpec::_internal_set_pad_piece(const std::string& value) {
   _has_bits_[0] |= 0x00000080u;
-  pad_piece_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, value, GetArena());
-}
-inline void TrainerSpec::set_pad_piece(std::string&& value) {
-  _has_bits_[0] |= 0x00000080u;
-  pad_piece_.Set(
-    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, ::std::move(value), GetArena());
-  // @@protoc_insertion_point(field_set_rvalue:sentencepiece.TrainerSpec.pad_piece)
-}
-inline void TrainerSpec::set_pad_piece(const char* value) {
-  GOOGLE_DCHECK(value != nullptr);
-  _has_bits_[0] |= 0x00000080u;
-  pad_piece_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, ::std::string(value), GetArena());
-  // @@protoc_insertion_point(field_set_char:sentencepiece.TrainerSpec.pad_piece)
-}
-inline void TrainerSpec::set_pad_piece(const char* value,
-    size_t size) {
-  _has_bits_[0] |= 0x00000080u;
-  pad_piece_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, ::std::string(
-      reinterpret_cast<const char*>(value), size), GetArena());
-  // @@protoc_insertion_point(field_set_pointer:sentencepiece.TrainerSpec.pad_piece)
+  pad_piece_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, value, GetArenaForAllocation());
 }
 inline std::string* TrainerSpec::_internal_mutable_pad_piece() {
   _has_bits_[0] |= 0x00000080u;
-  return pad_piece_.Mutable(::sentencepiece::TrainerSpec::_i_give_permission_to_break_this_code_default_pad_piece_, GetArena());
+  return pad_piece_.Mutable(::sentencepiece::TrainerSpec::_i_give_permission_to_break_this_code_default_pad_piece_, GetArenaForAllocation());
 }
 inline std::string* TrainerSpec::release_pad_piece() {
   // @@protoc_insertion_point(field_release:sentencepiece.TrainerSpec.pad_piece)
@@ -3556,7 +4414,7 @@ inline std::string* TrainerSpec::release_pad_piece() {
     return nullptr;
   }
   _has_bits_[0] &= ~0x00000080u;
-  return pad_piece_.ReleaseNonDefault(nullptr, GetArena());
+  return pad_piece_.ReleaseNonDefault(nullptr, GetArenaForAllocation());
 }
 inline void TrainerSpec::set_allocated_pad_piece(std::string* pad_piece) {
   if (pad_piece != nullptr) {
@@ -3565,7 +4423,7 @@ inline void TrainerSpec::set_allocated_pad_piece(std::string* pad_piece) {
     _has_bits_[0] &= ~0x00000080u;
   }
   pad_piece_.SetAllocated(nullptr, pad_piece,
-      GetArena());
+      GetArenaForAllocation());
   // @@protoc_insertion_point(field_set_allocated:sentencepiece.TrainerSpec.pad_piece)
 }
 
@@ -3578,7 +4436,7 @@ inline bool TrainerSpec::has_unk_surface() const {
   return _internal_has_unk_surface();
 }
 inline void TrainerSpec::clear_unk_surface() {
-  unk_surface_.ClearToDefault(::sentencepiece::TrainerSpec::_i_give_permission_to_break_this_code_default_unk_surface_, GetArena());
+  unk_surface_.ClearToDefault(::sentencepiece::TrainerSpec::_i_give_permission_to_break_this_code_default_unk_surface_, GetArenaForAllocation());
   _has_bits_[0] &= ~0x00000008u;
 }
 inline const std::string& TrainerSpec::unk_surface() const {
@@ -3586,43 +4444,28 @@ inline const std::string& TrainerSpec::unk_surface() const {
   if (unk_surface_.IsDefault(nullptr)) return _i_give_permission_to_break_this_code_default_unk_surface_.get();
   return _internal_unk_surface();
 }
-inline void TrainerSpec::set_unk_surface(const std::string& value) {
-  _internal_set_unk_surface(value);
+template <typename ArgT0, typename... ArgT>
+inline PROTOBUF_ALWAYS_INLINE
+void TrainerSpec::set_unk_surface(ArgT0&& arg0, ArgT... args) {
+ _has_bits_[0] |= 0x00000008u;
+ unk_surface_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
   // @@protoc_insertion_point(field_set:sentencepiece.TrainerSpec.unk_surface)
 }
 inline std::string* TrainerSpec::mutable_unk_surface() {
+  std::string* _s = _internal_mutable_unk_surface();
   // @@protoc_insertion_point(field_mutable:sentencepiece.TrainerSpec.unk_surface)
-  return _internal_mutable_unk_surface();
+  return _s;
 }
 inline const std::string& TrainerSpec::_internal_unk_surface() const {
   return unk_surface_.Get();
 }
 inline void TrainerSpec::_internal_set_unk_surface(const std::string& value) {
   _has_bits_[0] |= 0x00000008u;
-  unk_surface_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, value, GetArena());
-}
-inline void TrainerSpec::set_unk_surface(std::string&& value) {
-  _has_bits_[0] |= 0x00000008u;
-  unk_surface_.Set(
-    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, ::std::move(value), GetArena());
-  // @@protoc_insertion_point(field_set_rvalue:sentencepiece.TrainerSpec.unk_surface)
-}
-inline void TrainerSpec::set_unk_surface(const char* value) {
-  GOOGLE_DCHECK(value != nullptr);
-  _has_bits_[0] |= 0x00000008u;
-  unk_surface_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, ::std::string(value), GetArena());
-  // @@protoc_insertion_point(field_set_char:sentencepiece.TrainerSpec.unk_surface)
-}
-inline void TrainerSpec::set_unk_surface(const char* value,
-    size_t size) {
-  _has_bits_[0] |= 0x00000008u;
-  unk_surface_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, ::std::string(
-      reinterpret_cast<const char*>(value), size), GetArena());
-  // @@protoc_insertion_point(field_set_pointer:sentencepiece.TrainerSpec.unk_surface)
+  unk_surface_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, value, GetArenaForAllocation());
 }
 inline std::string* TrainerSpec::_internal_mutable_unk_surface() {
   _has_bits_[0] |= 0x00000008u;
-  return unk_surface_.Mutable(::sentencepiece::TrainerSpec::_i_give_permission_to_break_this_code_default_unk_surface_, GetArena());
+  return unk_surface_.Mutable(::sentencepiece::TrainerSpec::_i_give_permission_to_break_this_code_default_unk_surface_, GetArenaForAllocation());
 }
 inline std::string* TrainerSpec::release_unk_surface() {
   // @@protoc_insertion_point(field_release:sentencepiece.TrainerSpec.unk_surface)
@@ -3630,7 +4473,7 @@ inline std::string* TrainerSpec::release_unk_surface() {
     return nullptr;
   }
   _has_bits_[0] &= ~0x00000008u;
-  return unk_surface_.ReleaseNonDefault(nullptr, GetArena());
+  return unk_surface_.ReleaseNonDefault(nullptr, GetArenaForAllocation());
 }
 inline void TrainerSpec::set_allocated_unk_surface(std::string* unk_surface) {
   if (unk_surface != nullptr) {
@@ -3639,7 +4482,7 @@ inline void TrainerSpec::set_allocated_unk_surface(std::string* unk_surface) {
     _has_bits_[0] &= ~0x00000008u;
   }
   unk_surface_.SetAllocated(nullptr, unk_surface,
-      GetArena());
+      GetArenaForAllocation());
   // @@protoc_insertion_point(field_set_allocated:sentencepiece.TrainerSpec.unk_surface)
 }
 
@@ -3691,43 +4534,28 @@ inline const std::string& NormalizerSpec::name() const {
   // @@protoc_insertion_point(field_get:sentencepiece.NormalizerSpec.name)
   return _internal_name();
 }
-inline void NormalizerSpec::set_name(const std::string& value) {
-  _internal_set_name(value);
+template <typename ArgT0, typename... ArgT>
+inline PROTOBUF_ALWAYS_INLINE
+void NormalizerSpec::set_name(ArgT0&& arg0, ArgT... args) {
+ _has_bits_[0] |= 0x00000001u;
+ name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
   // @@protoc_insertion_point(field_set:sentencepiece.NormalizerSpec.name)
 }
 inline std::string* NormalizerSpec::mutable_name() {
+  std::string* _s = _internal_mutable_name();
   // @@protoc_insertion_point(field_mutable:sentencepiece.NormalizerSpec.name)
-  return _internal_mutable_name();
+  return _s;
 }
 inline const std::string& NormalizerSpec::_internal_name() const {
   return name_.Get();
 }
 inline void NormalizerSpec::_internal_set_name(const std::string& value) {
   _has_bits_[0] |= 0x00000001u;
-  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
-}
-inline void NormalizerSpec::set_name(std::string&& value) {
-  _has_bits_[0] |= 0x00000001u;
-  name_.Set(
-    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
-  // @@protoc_insertion_point(field_set_rvalue:sentencepiece.NormalizerSpec.name)
-}
-inline void NormalizerSpec::set_name(const char* value) {
-  GOOGLE_DCHECK(value != nullptr);
-  _has_bits_[0] |= 0x00000001u;
-  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
-  // @@protoc_insertion_point(field_set_char:sentencepiece.NormalizerSpec.name)
-}
-inline void NormalizerSpec::set_name(const char* value,
-    size_t size) {
-  _has_bits_[0] |= 0x00000001u;
-  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
-      reinterpret_cast<const char*>(value), size), GetArena());
-  // @@protoc_insertion_point(field_set_pointer:sentencepiece.NormalizerSpec.name)
+  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
 }
 inline std::string* NormalizerSpec::_internal_mutable_name() {
   _has_bits_[0] |= 0x00000001u;
-  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
+  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
 }
 inline std::string* NormalizerSpec::release_name() {
   // @@protoc_insertion_point(field_release:sentencepiece.NormalizerSpec.name)
@@ -3735,7 +4563,7 @@ inline std::string* NormalizerSpec::release_name() {
     return nullptr;
   }
   _has_bits_[0] &= ~0x00000001u;
-  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
+  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
 }
 inline void NormalizerSpec::set_allocated_name(std::string* name) {
   if (name != nullptr) {
@@ -3744,7 +4572,7 @@ inline void NormalizerSpec::set_allocated_name(std::string* name) {
     _has_bits_[0] &= ~0x00000001u;
   }
   name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
-      GetArena());
+      GetArenaForAllocation());
   // @@protoc_insertion_point(field_set_allocated:sentencepiece.NormalizerSpec.name)
 }
 
@@ -3764,43 +4592,28 @@ inline const std::string& NormalizerSpec::precompiled_charsmap() const {
   // @@protoc_insertion_point(field_get:sentencepiece.NormalizerSpec.precompiled_charsmap)
   return _internal_precompiled_charsmap();
 }
-inline void NormalizerSpec::set_precompiled_charsmap(const std::string& value) {
-  _internal_set_precompiled_charsmap(value);
+template <typename ArgT0, typename... ArgT>
+inline PROTOBUF_ALWAYS_INLINE
+void NormalizerSpec::set_precompiled_charsmap(ArgT0&& arg0, ArgT... args) {
+ _has_bits_[0] |= 0x00000002u;
+ precompiled_charsmap_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
   // @@protoc_insertion_point(field_set:sentencepiece.NormalizerSpec.precompiled_charsmap)
 }
 inline std::string* NormalizerSpec::mutable_precompiled_charsmap() {
+  std::string* _s = _internal_mutable_precompiled_charsmap();
   // @@protoc_insertion_point(field_mutable:sentencepiece.NormalizerSpec.precompiled_charsmap)
-  return _internal_mutable_precompiled_charsmap();
+  return _s;
 }
 inline const std::string& NormalizerSpec::_internal_precompiled_charsmap() const {
   return precompiled_charsmap_.Get();
 }
 inline void NormalizerSpec::_internal_set_precompiled_charsmap(const std::string& value) {
   _has_bits_[0] |= 0x00000002u;
-  precompiled_charsmap_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
-}
-inline void NormalizerSpec::set_precompiled_charsmap(std::string&& value) {
-  _has_bits_[0] |= 0x00000002u;
-  precompiled_charsmap_.Set(
-    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
-  // @@protoc_insertion_point(field_set_rvalue:sentencepiece.NormalizerSpec.precompiled_charsmap)
-}
-inline void NormalizerSpec::set_precompiled_charsmap(const char* value) {
-  GOOGLE_DCHECK(value != nullptr);
-  _has_bits_[0] |= 0x00000002u;
-  precompiled_charsmap_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
-  // @@protoc_insertion_point(field_set_char:sentencepiece.NormalizerSpec.precompiled_charsmap)
-}
-inline void NormalizerSpec::set_precompiled_charsmap(const void* value,
-    size_t size) {
-  _has_bits_[0] |= 0x00000002u;
-  precompiled_charsmap_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
-      reinterpret_cast<const char*>(value), size), GetArena());
-  // @@protoc_insertion_point(field_set_pointer:sentencepiece.NormalizerSpec.precompiled_charsmap)
+  precompiled_charsmap_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
 }
 inline std::string* NormalizerSpec::_internal_mutable_precompiled_charsmap() {
   _has_bits_[0] |= 0x00000002u;
-  return precompiled_charsmap_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
+  return precompiled_charsmap_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
 }
 inline std::string* NormalizerSpec::release_precompiled_charsmap() {
   // @@protoc_insertion_point(field_release:sentencepiece.NormalizerSpec.precompiled_charsmap)
@@ -3808,7 +4621,7 @@ inline std::string* NormalizerSpec::release_precompiled_charsmap() {
     return nullptr;
   }
   _has_bits_[0] &= ~0x00000002u;
-  return precompiled_charsmap_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
+  return precompiled_charsmap_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
 }
 inline void NormalizerSpec::set_allocated_precompiled_charsmap(std::string* precompiled_charsmap) {
   if (precompiled_charsmap != nullptr) {
@@ -3817,7 +4630,7 @@ inline void NormalizerSpec::set_allocated_precompiled_charsmap(std::string* prec
     _has_bits_[0] &= ~0x00000002u;
   }
   precompiled_charsmap_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), precompiled_charsmap,
-      GetArena());
+      GetArenaForAllocation());
   // @@protoc_insertion_point(field_set_allocated:sentencepiece.NormalizerSpec.precompiled_charsmap)
 }
 
@@ -3921,43 +4734,28 @@ inline const std::string& NormalizerSpec::normalization_rule_tsv() const {
   // @@protoc_insertion_point(field_get:sentencepiece.NormalizerSpec.normalization_rule_tsv)
   return _internal_normalization_rule_tsv();
 }
-inline void NormalizerSpec::set_normalization_rule_tsv(const std::string& value) {
-  _internal_set_normalization_rule_tsv(value);
+template <typename ArgT0, typename... ArgT>
+inline PROTOBUF_ALWAYS_INLINE
+void NormalizerSpec::set_normalization_rule_tsv(ArgT0&& arg0, ArgT... args) {
+ _has_bits_[0] |= 0x00000004u;
+ normalization_rule_tsv_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
   // @@protoc_insertion_point(field_set:sentencepiece.NormalizerSpec.normalization_rule_tsv)
 }
 inline std::string* NormalizerSpec::mutable_normalization_rule_tsv() {
+  std::string* _s = _internal_mutable_normalization_rule_tsv();
   // @@protoc_insertion_point(field_mutable:sentencepiece.NormalizerSpec.normalization_rule_tsv)
-  return _internal_mutable_normalization_rule_tsv();
+  return _s;
 }
 inline const std::string& NormalizerSpec::_internal_normalization_rule_tsv() const {
   return normalization_rule_tsv_.Get();
 }
 inline void NormalizerSpec::_internal_set_normalization_rule_tsv(const std::string& value) {
   _has_bits_[0] |= 0x00000004u;
-  normalization_rule_tsv_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
-}
-inline void NormalizerSpec::set_normalization_rule_tsv(std::string&& value) {
-  _has_bits_[0] |= 0x00000004u;
-  normalization_rule_tsv_.Set(
-    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
-  // @@protoc_insertion_point(field_set_rvalue:sentencepiece.NormalizerSpec.normalization_rule_tsv)
-}
-inline void NormalizerSpec::set_normalization_rule_tsv(const char* value) {
-  GOOGLE_DCHECK(value != nullptr);
-  _has_bits_[0] |= 0x00000004u;
-  normalization_rule_tsv_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
-  // @@protoc_insertion_point(field_set_char:sentencepiece.NormalizerSpec.normalization_rule_tsv)
-}
-inline void NormalizerSpec::set_normalization_rule_tsv(const char* value,
-    size_t size) {
-  _has_bits_[0] |= 0x00000004u;
-  normalization_rule_tsv_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
-      reinterpret_cast<const char*>(value), size), GetArena());
-  // @@protoc_insertion_point(field_set_pointer:sentencepiece.NormalizerSpec.normalization_rule_tsv)
+  normalization_rule_tsv_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
 }
 inline std::string* NormalizerSpec::_internal_mutable_normalization_rule_tsv() {
   _has_bits_[0] |= 0x00000004u;
-  return normalization_rule_tsv_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
+  return normalization_rule_tsv_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
 }
 inline std::string* NormalizerSpec::release_normalization_rule_tsv() {
   // @@protoc_insertion_point(field_release:sentencepiece.NormalizerSpec.normalization_rule_tsv)
@@ -3965,7 +4763,7 @@ inline std::string* NormalizerSpec::release_normalization_rule_tsv() {
     return nullptr;
   }
   _has_bits_[0] &= ~0x00000004u;
-  return normalization_rule_tsv_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
+  return normalization_rule_tsv_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
 }
 inline void NormalizerSpec::set_allocated_normalization_rule_tsv(std::string* normalization_rule_tsv) {
   if (normalization_rule_tsv != nullptr) {
@@ -3974,7 +4772,7 @@ inline void NormalizerSpec::set_allocated_normalization_rule_tsv(std::string* no
     _has_bits_[0] &= ~0x00000004u;
   }
   normalization_rule_tsv_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), normalization_rule_tsv,
-      GetArena());
+      GetArenaForAllocation());
   // @@protoc_insertion_point(field_set_allocated:sentencepiece.NormalizerSpec.normalization_rule_tsv)
 }
 
@@ -3998,43 +4796,28 @@ inline const std::string& SelfTestData_Sample::input() const {
   // @@protoc_insertion_point(field_get:sentencepiece.SelfTestData.Sample.input)
   return _internal_input();
 }
-inline void SelfTestData_Sample::set_input(const std::string& value) {
-  _internal_set_input(value);
+template <typename ArgT0, typename... ArgT>
+inline PROTOBUF_ALWAYS_INLINE
+void SelfTestData_Sample::set_input(ArgT0&& arg0, ArgT... args) {
+ _has_bits_[0] |= 0x00000001u;
+ input_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
   // @@protoc_insertion_point(field_set:sentencepiece.SelfTestData.Sample.input)
 }
 inline std::string* SelfTestData_Sample::mutable_input() {
+  std::string* _s = _internal_mutable_input();
   // @@protoc_insertion_point(field_mutable:sentencepiece.SelfTestData.Sample.input)
-  return _internal_mutable_input();
+  return _s;
 }
 inline const std::string& SelfTestData_Sample::_internal_input() const {
   return input_.Get();
 }
 inline void SelfTestData_Sample::_internal_set_input(const std::string& value) {
   _has_bits_[0] |= 0x00000001u;
-  input_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
-}
-inline void SelfTestData_Sample::set_input(std::string&& value) {
-  _has_bits_[0] |= 0x00000001u;
-  input_.Set(
-    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
-  // @@protoc_insertion_point(field_set_rvalue:sentencepiece.SelfTestData.Sample.input)
-}
-inline void SelfTestData_Sample::set_input(const char* value) {
-  GOOGLE_DCHECK(value != nullptr);
-  _has_bits_[0] |= 0x00000001u;
-  input_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
-  // @@protoc_insertion_point(field_set_char:sentencepiece.SelfTestData.Sample.input)
-}
-inline void SelfTestData_Sample::set_input(const char* value,
-    size_t size) {
-  _has_bits_[0] |= 0x00000001u;
-  input_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
-      reinterpret_cast<const char*>(value), size), GetArena());
-  // @@protoc_insertion_point(field_set_pointer:sentencepiece.SelfTestData.Sample.input)
+  input_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
 }
 inline std::string* SelfTestData_Sample::_internal_mutable_input() {
   _has_bits_[0] |= 0x00000001u;
-  return input_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
+  return input_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
 }
 inline std::string* SelfTestData_Sample::release_input() {
   // @@protoc_insertion_point(field_release:sentencepiece.SelfTestData.Sample.input)
@@ -4042,7 +4825,7 @@ inline std::string* SelfTestData_Sample::release_input() {
     return nullptr;
   }
   _has_bits_[0] &= ~0x00000001u;
-  return input_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
+  return input_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
 }
 inline void SelfTestData_Sample::set_allocated_input(std::string* input) {
   if (input != nullptr) {
@@ -4051,7 +4834,7 @@ inline void SelfTestData_Sample::set_allocated_input(std::string* input) {
     _has_bits_[0] &= ~0x00000001u;
   }
   input_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), input,
-      GetArena());
+      GetArenaForAllocation());
   // @@protoc_insertion_point(field_set_allocated:sentencepiece.SelfTestData.Sample.input)
 }
 
@@ -4071,43 +4854,28 @@ inline const std::string& SelfTestData_Sample::expected() const {
   // @@protoc_insertion_point(field_get:sentencepiece.SelfTestData.Sample.expected)
   return _internal_expected();
 }
-inline void SelfTestData_Sample::set_expected(const std::string& value) {
-  _internal_set_expected(value);
+template <typename ArgT0, typename... ArgT>
+inline PROTOBUF_ALWAYS_INLINE
+void SelfTestData_Sample::set_expected(ArgT0&& arg0, ArgT... args) {
+ _has_bits_[0] |= 0x00000002u;
+ expected_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
   // @@protoc_insertion_point(field_set:sentencepiece.SelfTestData.Sample.expected)
 }
 inline std::string* SelfTestData_Sample::mutable_expected() {
+  std::string* _s = _internal_mutable_expected();
   // @@protoc_insertion_point(field_mutable:sentencepiece.SelfTestData.Sample.expected)
-  return _internal_mutable_expected();
+  return _s;
 }
 inline const std::string& SelfTestData_Sample::_internal_expected() const {
   return expected_.Get();
 }
 inline void SelfTestData_Sample::_internal_set_expected(const std::string& value) {
   _has_bits_[0] |= 0x00000002u;
-  expected_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
-}
-inline void SelfTestData_Sample::set_expected(std::string&& value) {
-  _has_bits_[0] |= 0x00000002u;
-  expected_.Set(
-    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
-  // @@protoc_insertion_point(field_set_rvalue:sentencepiece.SelfTestData.Sample.expected)
-}
-inline void SelfTestData_Sample::set_expected(const char* value) {
-  GOOGLE_DCHECK(value != nullptr);
-  _has_bits_[0] |= 0x00000002u;
-  expected_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
-  // @@protoc_insertion_point(field_set_char:sentencepiece.SelfTestData.Sample.expected)
-}
-inline void SelfTestData_Sample::set_expected(const char* value,
-    size_t size) {
-  _has_bits_[0] |= 0x00000002u;
-  expected_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
-      reinterpret_cast<const char*>(value), size), GetArena());
-  // @@protoc_insertion_point(field_set_pointer:sentencepiece.SelfTestData.Sample.expected)
+  expected_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
 }
 inline std::string* SelfTestData_Sample::_internal_mutable_expected() {
   _has_bits_[0] |= 0x00000002u;
-  return expected_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
+  return expected_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
 }
 inline std::string* SelfTestData_Sample::release_expected() {
   // @@protoc_insertion_point(field_release:sentencepiece.SelfTestData.Sample.expected)
@@ -4115,7 +4883,7 @@ inline std::string* SelfTestData_Sample::release_expected() {
     return nullptr;
   }
   _has_bits_[0] &= ~0x00000002u;
-  return expected_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
+  return expected_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
 }
 inline void SelfTestData_Sample::set_allocated_expected(std::string* expected) {
   if (expected != nullptr) {
@@ -4124,7 +4892,7 @@ inline void SelfTestData_Sample::set_allocated_expected(std::string* expected) {
     _has_bits_[0] &= ~0x00000002u;
   }
   expected_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), expected,
-      GetArena());
+      GetArenaForAllocation());
   // @@protoc_insertion_point(field_set_allocated:sentencepiece.SelfTestData.Sample.expected)
 }
 
@@ -4162,8 +4930,9 @@ inline ::sentencepiece::SelfTestData_Sample* SelfTestData::_internal_add_samples
   return samples_.Add();
 }
 inline ::sentencepiece::SelfTestData_Sample* SelfTestData::add_samples() {
+  ::sentencepiece::SelfTestData_Sample* _add = _internal_add_samples();
   // @@protoc_insertion_point(field_add:sentencepiece.SelfTestData.samples)
-  return _internal_add_samples();
+  return _add;
 }
 inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sentencepiece::SelfTestData_Sample >&
 SelfTestData::samples() const {
@@ -4191,43 +4960,28 @@ inline const std::string& ModelProto_SentencePiece::piece() const {
   // @@protoc_insertion_point(field_get:sentencepiece.ModelProto.SentencePiece.piece)
   return _internal_piece();
 }
-inline void ModelProto_SentencePiece::set_piece(const std::string& value) {
-  _internal_set_piece(value);
+template <typename ArgT0, typename... ArgT>
+inline PROTOBUF_ALWAYS_INLINE
+void ModelProto_SentencePiece::set_piece(ArgT0&& arg0, ArgT... args) {
+ _has_bits_[0] |= 0x00000001u;
+ piece_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
   // @@protoc_insertion_point(field_set:sentencepiece.ModelProto.SentencePiece.piece)
 }
 inline std::string* ModelProto_SentencePiece::mutable_piece() {
+  std::string* _s = _internal_mutable_piece();
   // @@protoc_insertion_point(field_mutable:sentencepiece.ModelProto.SentencePiece.piece)
-  return _internal_mutable_piece();
+  return _s;
 }
 inline const std::string& ModelProto_SentencePiece::_internal_piece() const {
   return piece_.Get();
 }
 inline void ModelProto_SentencePiece::_internal_set_piece(const std::string& value) {
   _has_bits_[0] |= 0x00000001u;
-  piece_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
-}
-inline void ModelProto_SentencePiece::set_piece(std::string&& value) {
-  _has_bits_[0] |= 0x00000001u;
-  piece_.Set(
-    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
-  // @@protoc_insertion_point(field_set_rvalue:sentencepiece.ModelProto.SentencePiece.piece)
-}
-inline void ModelProto_SentencePiece::set_piece(const char* value) {
-  GOOGLE_DCHECK(value != nullptr);
-  _has_bits_[0] |= 0x00000001u;
-  piece_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
-  // @@protoc_insertion_point(field_set_char:sentencepiece.ModelProto.SentencePiece.piece)
-}
-inline void ModelProto_SentencePiece::set_piece(const char* value,
-    size_t size) {
-  _has_bits_[0] |= 0x00000001u;
-  piece_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
-      reinterpret_cast<const char*>(value), size), GetArena());
-  // @@protoc_insertion_point(field_set_pointer:sentencepiece.ModelProto.SentencePiece.piece)
+  piece_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
 }
 inline std::string* ModelProto_SentencePiece::_internal_mutable_piece() {
   _has_bits_[0] |= 0x00000001u;
-  return piece_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
+  return piece_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
 }
 inline std::string* ModelProto_SentencePiece::release_piece() {
   // @@protoc_insertion_point(field_release:sentencepiece.ModelProto.SentencePiece.piece)
@@ -4235,7 +4989,7 @@ inline std::string* ModelProto_SentencePiece::release_piece() {
     return nullptr;
   }
   _has_bits_[0] &= ~0x00000001u;
-  return piece_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
+  return piece_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
 }
 inline void ModelProto_SentencePiece::set_allocated_piece(std::string* piece) {
   if (piece != nullptr) {
@@ -4244,7 +4998,7 @@ inline void ModelProto_SentencePiece::set_allocated_piece(std::string* piece) {
     _has_bits_[0] &= ~0x00000001u;
   }
   piece_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), piece,
-      GetArena());
+      GetArenaForAllocation());
   // @@protoc_insertion_point(field_set_allocated:sentencepiece.ModelProto.SentencePiece.piece)
 }
 
@@ -4339,8 +5093,9 @@ inline ::sentencepiece::ModelProto_SentencePiece* ModelProto::_internal_add_piec
   return pieces_.Add();
 }
 inline ::sentencepiece::ModelProto_SentencePiece* ModelProto::add_pieces() {
+  ::sentencepiece::ModelProto_SentencePiece* _add = _internal_add_pieces();
   // @@protoc_insertion_point(field_add:sentencepiece.ModelProto.pieces)
-  return _internal_add_pieces();
+  return _add;
 }
 inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sentencepiece::ModelProto_SentencePiece >&
 ModelProto::pieces() const {
@@ -4372,7 +5127,7 @@ inline const ::sentencepiece::TrainerSpec& ModelProto::trainer_spec() const {
 }
 inline void ModelProto::unsafe_arena_set_allocated_trainer_spec(
     ::sentencepiece::TrainerSpec* trainer_spec) {
-  if (GetArena() == nullptr) {
+  if (GetArenaForAllocation() == nullptr) {
     delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(trainer_spec_);
   }
   trainer_spec_ = trainer_spec;
@@ -4387,9 +5142,15 @@ inline ::sentencepiece::TrainerSpec* ModelProto::release_trainer_spec() {
   _has_bits_[0] &= ~0x00000001u;
   ::sentencepiece::TrainerSpec* temp = trainer_spec_;
   trainer_spec_ = nullptr;
-  if (GetArena() != nullptr) {
+#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
+  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
+  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
+  if (GetArenaForAllocation() == nullptr) { delete old; }
+#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
+  if (GetArenaForAllocation() != nullptr) {
     temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
   }
+#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
   return temp;
 }
 inline ::sentencepiece::TrainerSpec* ModelProto::unsafe_arena_release_trainer_spec() {
@@ -4402,23 +5163,24 @@ inline ::sentencepiece::TrainerSpec* ModelProto::unsafe_arena_release_trainer_sp
 inline ::sentencepiece::TrainerSpec* ModelProto::_internal_mutable_trainer_spec() {
   _has_bits_[0] |= 0x00000001u;
   if (trainer_spec_ == nullptr) {
-    auto* p = CreateMaybeMessage<::sentencepiece::TrainerSpec>(GetArena());
+    auto* p = CreateMaybeMessage<::sentencepiece::TrainerSpec>(GetArenaForAllocation());
     trainer_spec_ = p;
   }
   return trainer_spec_;
 }
 inline ::sentencepiece::TrainerSpec* ModelProto::mutable_trainer_spec() {
+  ::sentencepiece::TrainerSpec* _msg = _internal_mutable_trainer_spec();
   // @@protoc_insertion_point(field_mutable:sentencepiece.ModelProto.trainer_spec)
-  return _internal_mutable_trainer_spec();
+  return _msg;
 }
 inline void ModelProto::set_allocated_trainer_spec(::sentencepiece::TrainerSpec* trainer_spec) {
-  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
+  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
   if (message_arena == nullptr) {
     delete trainer_spec_;
   }
   if (trainer_spec) {
     ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
-      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(trainer_spec);
+        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::sentencepiece::TrainerSpec>::GetOwningArena(trainer_spec);
     if (message_arena != submessage_arena) {
       trainer_spec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
           message_arena, trainer_spec, submessage_arena);
@@ -4455,7 +5217,7 @@ inline const ::sentencepiece::NormalizerSpec& ModelProto::normalizer_spec() cons
 }
 inline void ModelProto::unsafe_arena_set_allocated_normalizer_spec(
     ::sentencepiece::NormalizerSpec* normalizer_spec) {
-  if (GetArena() == nullptr) {
+  if (GetArenaForAllocation() == nullptr) {
     delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(normalizer_spec_);
   }
   normalizer_spec_ = normalizer_spec;
@@ -4470,9 +5232,15 @@ inline ::sentencepiece::NormalizerSpec* ModelProto::release_normalizer_spec() {
   _has_bits_[0] &= ~0x00000002u;
   ::sentencepiece::NormalizerSpec* temp = normalizer_spec_;
   normalizer_spec_ = nullptr;
-  if (GetArena() != nullptr) {
+#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
+  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
+  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
+  if (GetArenaForAllocation() == nullptr) { delete old; }
+#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
+  if (GetArenaForAllocation() != nullptr) {
     temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
   }
+#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
   return temp;
 }
 inline ::sentencepiece::NormalizerSpec* ModelProto::unsafe_arena_release_normalizer_spec() {
@@ -4485,23 +5253,24 @@ inline ::sentencepiece::NormalizerSpec* ModelProto::unsafe_arena_release_normali
 inline ::sentencepiece::NormalizerSpec* ModelProto::_internal_mutable_normalizer_spec() {
   _has_bits_[0] |= 0x00000002u;
   if (normalizer_spec_ == nullptr) {
-    auto* p = CreateMaybeMessage<::sentencepiece::NormalizerSpec>(GetArena());
+    auto* p = CreateMaybeMessage<::sentencepiece::NormalizerSpec>(GetArenaForAllocation());
     normalizer_spec_ = p;
   }
   return normalizer_spec_;
 }
 inline ::sentencepiece::NormalizerSpec* ModelProto::mutable_normalizer_spec() {
+  ::sentencepiece::NormalizerSpec* _msg = _internal_mutable_normalizer_spec();
   // @@protoc_insertion_point(field_mutable:sentencepiece.ModelProto.normalizer_spec)
-  return _internal_mutable_normalizer_spec();
+  return _msg;
 }
 inline void ModelProto::set_allocated_normalizer_spec(::sentencepiece::NormalizerSpec* normalizer_spec) {
-  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
+  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
   if (message_arena == nullptr) {
     delete normalizer_spec_;
   }
   if (normalizer_spec) {
     ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
-      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(normalizer_spec);
+        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::sentencepiece::NormalizerSpec>::GetOwningArena(normalizer_spec);
     if (message_arena != submessage_arena) {
       normalizer_spec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
           message_arena, normalizer_spec, submessage_arena);
@@ -4538,7 +5307,7 @@ inline const ::sentencepiece::SelfTestData& ModelProto::self_test_data() const {
 }
 inline void ModelProto::unsafe_arena_set_allocated_self_test_data(
     ::sentencepiece::SelfTestData* self_test_data) {
-  if (GetArena() == nullptr) {
+  if (GetArenaForAllocation() == nullptr) {
     delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(self_test_data_);
   }
   self_test_data_ = self_test_data;
@@ -4553,9 +5322,15 @@ inline ::sentencepiece::SelfTestData* ModelProto::release_self_test_data() {
   _has_bits_[0] &= ~0x00000004u;
   ::sentencepiece::SelfTestData* temp = self_test_data_;
   self_test_data_ = nullptr;
-  if (GetArena() != nullptr) {
+#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
+  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
+  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
+  if (GetArenaForAllocation() == nullptr) { delete old; }
+#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
+  if (GetArenaForAllocation() != nullptr) {
     temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
   }
+#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
   return temp;
 }
 inline ::sentencepiece::SelfTestData* ModelProto::unsafe_arena_release_self_test_data() {
@@ -4568,23 +5343,24 @@ inline ::sentencepiece::SelfTestData* ModelProto::unsafe_arena_release_self_test
 inline ::sentencepiece::SelfTestData* ModelProto::_internal_mutable_self_test_data() {
   _has_bits_[0] |= 0x00000004u;
   if (self_test_data_ == nullptr) {
-    auto* p = CreateMaybeMessage<::sentencepiece::SelfTestData>(GetArena());
+    auto* p = CreateMaybeMessage<::sentencepiece::SelfTestData>(GetArenaForAllocation());
     self_test_data_ = p;
   }
   return self_test_data_;
 }
 inline ::sentencepiece::SelfTestData* ModelProto::mutable_self_test_data() {
+  ::sentencepiece::SelfTestData* _msg = _internal_mutable_self_test_data();
   // @@protoc_insertion_point(field_mutable:sentencepiece.ModelProto.self_test_data)
-  return _internal_mutable_self_test_data();
+  return _msg;
 }
 inline void ModelProto::set_allocated_self_test_data(::sentencepiece::SelfTestData* self_test_data) {
-  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
+  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
   if (message_arena == nullptr) {
     delete self_test_data_;
   }
   if (self_test_data) {
     ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
-      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(self_test_data);
+        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::sentencepiece::SelfTestData>::GetOwningArena(self_test_data);
     if (message_arena != submessage_arena) {
       self_test_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
           message_arena, self_test_data, submessage_arena);
@@ -4621,7 +5397,7 @@ inline const ::sentencepiece::NormalizerSpec& ModelProto::denormalizer_spec() co
 }
 inline void ModelProto::unsafe_arena_set_allocated_denormalizer_spec(
     ::sentencepiece::NormalizerSpec* denormalizer_spec) {
-  if (GetArena() == nullptr) {
+  if (GetArenaForAllocation() == nullptr) {
     delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(denormalizer_spec_);
   }
   denormalizer_spec_ = denormalizer_spec;
@@ -4636,9 +5412,15 @@ inline ::sentencepiece::NormalizerSpec* ModelProto::release_denormalizer_spec()
   _has_bits_[0] &= ~0x00000008u;
   ::sentencepiece::NormalizerSpec* temp = denormalizer_spec_;
   denormalizer_spec_ = nullptr;
-  if (GetArena() != nullptr) {
+#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
+  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
+  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
+  if (GetArenaForAllocation() == nullptr) { delete old; }
+#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
+  if (GetArenaForAllocation() != nullptr) {
     temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
   }
+#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
   return temp;
 }
 inline ::sentencepiece::NormalizerSpec* ModelProto::unsafe_arena_release_denormalizer_spec() {
@@ -4651,23 +5433,24 @@ inline ::sentencepiece::NormalizerSpec* ModelProto::unsafe_arena_release_denorma
 inline ::sentencepiece::NormalizerSpec* ModelProto::_internal_mutable_denormalizer_spec() {
   _has_bits_[0] |= 0x00000008u;
   if (denormalizer_spec_ == nullptr) {
-    auto* p = CreateMaybeMessage<::sentencepiece::NormalizerSpec>(GetArena());
+    auto* p = CreateMaybeMessage<::sentencepiece::NormalizerSpec>(GetArenaForAllocation());
     denormalizer_spec_ = p;
   }
   return denormalizer_spec_;
 }
 inline ::sentencepiece::NormalizerSpec* ModelProto::mutable_denormalizer_spec() {
+  ::sentencepiece::NormalizerSpec* _msg = _internal_mutable_denormalizer_spec();
   // @@protoc_insertion_point(field_mutable:sentencepiece.ModelProto.denormalizer_spec)
-  return _internal_mutable_denormalizer_spec();
+  return _msg;
 }
 inline void ModelProto::set_allocated_denormalizer_spec(::sentencepiece::NormalizerSpec* denormalizer_spec) {
-  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
+  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
   if (message_arena == nullptr) {
     delete denormalizer_spec_;
   }
   if (denormalizer_spec) {
     ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
-      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(denormalizer_spec);
+        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::sentencepiece::NormalizerSpec>::GetOwningArena(denormalizer_spec);
     if (message_arena != submessage_arena) {
       denormalizer_spec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
           message_arena, denormalizer_spec, submessage_arena);
