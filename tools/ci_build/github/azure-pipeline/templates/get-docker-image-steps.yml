# calls tools/utils/get_docker_image.py

parameters:
- name: Dockerfile
  type: string
- name: Context
  type: string
- name: DockerBuildArgs
  type: string
  default: ""
- name: Repository
  type: string
- name: UseImageCacheContainerRegistry
  type: boolean
  default: true
- name: UsePipelineCache
  type: boolean
  default: false
- name: ScriptName
  type: string
  default: "tools/utils/get_docker_image.py"
- name: UpdateDepsTxt
  type: boolean
  default: true
- name: IMAGE_CACHE_DIR
  type: string
  default: $(Agent.TempDirectory)/docker

steps:

- ${{ if contains(parameters.Dockerfile, 'manylinux') }}:
    - checkout: manylinux
    - script: |
        set -e -x
        mv manylinux onnxruntime-extensions
        mv onnxruntime-extensions ..
        cd ..
        rmdir $(Build.SourcesDirectory)
        mv onnxruntime-extensions $(Build.SourcesDirectory)
      displayName: "Move Manylinux source code to ORT-Extensions folder"
    # It makes the files in context keep consistent before and after docker build step.
    - task: PythonScript@0
      inputs:
        scriptPath: $(Build.SourcesDirectory)/tools/ci_build/patch_manylinux.py
        arguments: --dockerfile "${{ parameters.Dockerfile }}" --context "${{ parameters.Context }}"
        pythonInterpreter: /usr/bin/python3
      displayName: patch manylinux

- script: |
    docker image ls
    docker system df
  displayName: Check Docker Images

- template: with-container-registry-steps.yml
  parameters:
    Steps:
    - script: |
        python ${{ parameters.ScriptName }} \
          --dockerfile "${{ parameters.Dockerfile }}" \
          --context "${{ parameters.Context }}" \
          --docker-build-args "${{ parameters.DockerBuildArgs }}" \
          --container-registry onnxruntimebuildcache \
          --repository "${{ parameters.Repository }}"
      displayName: "Get ${{ parameters.Repository }} image for ${{ parameters.Dockerfile }}"
    ContainerRegistry: onnxruntimebuildcache

